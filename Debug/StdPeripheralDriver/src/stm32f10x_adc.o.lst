   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f10x_adc.c"
  23              	.Ltext0:
  24              		.file 1 "../StdPeripheralDriver/src/stm32f10x_adc.c"
 17279              		.align	2
 17280              		.global	ADC_DeInit
 17281              		.thumb
 17282              		.thumb_func
 17284              	ADC_DeInit:
 17285              	.LFB29:
   1:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
   2:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ******************************************************************************
   3:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @file    stm32f10x_adc.c
   4:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @author  MCD Application Team
   5:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @version V3.5.0
   6:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @date    11-March-2011
   7:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief   This file provides all the ADC firmware functions.
   8:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ******************************************************************************
   9:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @attention
  10:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *
  11:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *
  18:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ******************************************************************************
  20:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  21:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  22:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* Includes ------------------------------------------------------------------*/
  23:../StdPeripheralDriver/src/stm32f10x_adc.c **** #include "stm32f10x_adc.h"
  24:../StdPeripheralDriver/src/stm32f10x_adc.c **** #include "stm32f10x_rcc.h"
  25:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  26:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  28:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  29:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  30:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC 
  31:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief ADC driver modules
  32:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  33:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  34:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  35:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_TypesDefinitions
  36:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  37:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  38:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  39:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
  40:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
  41:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  42:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  43:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Defines
  44:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  45:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  46:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  47:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DISCNUM mask */
  48:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCNUM_Reset           ((uint32_t)0xFFFF1FFF)
  49:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  50:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DISCEN mask */
  51:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCEN_Set              ((uint32_t)0x00000800)
  52:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCEN_Reset            ((uint32_t)0xFFFFF7FF)
  53:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  54:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JAUTO mask */
  55:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JAUTO_Set               ((uint32_t)0x00000400)
  56:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JAUTO_Reset             ((uint32_t)0xFFFFFBFF)
  57:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  58:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JDISCEN mask */
  59:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JDISCEN_Set             ((uint32_t)0x00001000)
  60:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JDISCEN_Reset           ((uint32_t)0xFFFFEFFF)
  61:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  62:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC AWDCH mask */
  63:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_AWDCH_Reset             ((uint32_t)0xFFFFFFE0)
  64:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  65:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC Analog watchdog enable mode mask */
  66:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_AWDMode_Reset           ((uint32_t)0xFF3FFDFF)
  67:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  68:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* CR1 register Mask */
  69:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_CLEAR_Mask              ((uint32_t)0xFFF0FEFF)
  70:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  71:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC ADON mask */
  72:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_ADON_Set                ((uint32_t)0x00000001)
  73:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_ADON_Reset              ((uint32_t)0xFFFFFFFE)
  74:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  75:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DMA mask */
  76:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_DMA_Set                 ((uint32_t)0x00000100)
  77:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_DMA_Reset               ((uint32_t)0xFFFFFEFF)
  78:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  79:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC RSTCAL mask */
  80:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_RSTCAL_Set              ((uint32_t)0x00000008)
  81:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  82:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC CAL mask */
  83:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_CAL_Set                 ((uint32_t)0x00000004)
  84:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  85:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SWSTART mask */
  86:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_SWSTART_Set             ((uint32_t)0x00400000)
  87:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  88:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC EXTTRIG mask */
  89:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_Set             ((uint32_t)0x00100000)
  90:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_Reset           ((uint32_t)0xFFEFFFFF)
  91:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  92:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC Software start mask */
  93:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_SWSTART_Set     ((uint32_t)0x00500000)
  94:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_SWSTART_Reset   ((uint32_t)0xFFAFFFFF)
  95:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  96:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JEXTSEL mask */
  97:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTSEL_Reset           ((uint32_t)0xFFFF8FFF)
  98:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  99:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JEXTTRIG mask */
 100:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_Set            ((uint32_t)0x00008000)
 101:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_Reset          ((uint32_t)0xFFFF7FFF)
 102:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 103:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JSWSTART mask */
 104:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JSWSTART_Set            ((uint32_t)0x00200000)
 105:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 106:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC injected software start mask */
 107:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_JSWSTART_Set   ((uint32_t)0x00208000)
 108:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_JSWSTART_Reset ((uint32_t)0xFFDF7FFF)
 109:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 110:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC TSPD mask */
 111:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_TSVREFE_Set             ((uint32_t)0x00800000)
 112:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_TSVREFE_Reset           ((uint32_t)0xFF7FFFFF)
 113:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 114:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* CR2 register Mask */
 115:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_CLEAR_Mask              ((uint32_t)0xFFF1F7FD)
 116:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 117:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SQx mask */
 118:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR3_SQ_Set                 ((uint32_t)0x0000001F)
 119:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR2_SQ_Set                 ((uint32_t)0x0000001F)
 120:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR1_SQ_Set                 ((uint32_t)0x0000001F)
 121:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 122:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* SQR1 register Mask */
 123:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR1_CLEAR_Mask             ((uint32_t)0xFF0FFFFF)
 124:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 125:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JSQx mask */
 126:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JSQ_Set                ((uint32_t)0x0000001F)
 127:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 128:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JL mask */
 129:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JL_Set                 ((uint32_t)0x00300000)
 130:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JL_Reset               ((uint32_t)0xFFCFFFFF)
 131:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 132:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SMPx mask */
 133:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SMPR1_SMP_Set               ((uint32_t)0x00000007)
 134:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SMPR2_SMP_Set               ((uint32_t)0x00000007)
 135:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 136:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JDRx registers offset */
 137:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JDR_Offset                  ((uint8_t)0x28)
 138:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 139:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC1 DR register base address */
 140:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define DR_ADDRESS                  ((uint32_t)0x4001244C)
 141:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 142:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 143:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 144:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 145:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 146:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Macros
 147:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 148:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 149:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 150:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 151:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 152:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 153:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 154:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Variables
 155:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 156:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 157:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 158:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 159:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 160:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 161:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 162:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_FunctionPrototypes
 163:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 164:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 165:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 166:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 167:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 168:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 169:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 170:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Functions
 171:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 172:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 173:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 174:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 175:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
 176:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 177:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 178:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 179:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DeInit(ADC_TypeDef* ADCx)
 180:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17286              		.loc 1 180 0
 17287              		.cfi_startproc
 17288              		@ args = 0, pretend = 0, frame = 8
 17289              		@ frame_needed = 1, uses_anonymous_args = 0
 17290 0000 80B5     		push	{r7, lr}
 17291              	.LCFI0:
 17292              		.cfi_def_cfa_offset 8
 17293 0002 82B0     		sub	sp, sp, #8
 17294              	.LCFI1:
 17295              		.cfi_def_cfa_offset 16
 17296 0004 00AF     		add	r7, sp, #0
 17297              		.cfi_offset 14, -4
 17298              		.cfi_offset 7, -8
 17299              	.LCFI2:
 17300              		.cfi_def_cfa_register 7
 17301 0006 7860     		str	r0, [r7, #4]
 181:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 182:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 183:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
 184:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (ADCx == ADC1)
 17302              		.loc 1 184 0
 17303 0008 7A68     		ldr	r2, [r7, #4]
 17304 000a 1A4B     		ldr	r3, .L5
 17305 000c 9A42     		cmp	r2, r3
 17306 000e 0CD1     		bne	.L2
 185:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 186:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable ADC1 reset state */
 187:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 17307              		.loc 1 187 0
 17308 0010 4FF40070 		mov	r0, #512
 17309 0014 4FF00101 		mov	r1, #1
 17310 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 188:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Release ADC1 from reset state */
 189:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 17311              		.loc 1 189 0
 17312 001c 4FF40070 		mov	r0, #512
 17313 0020 4FF00001 		mov	r1, #0
 17314 0024 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 17315 0028 20E0     		b	.L1
 17316              	.L2:
 190:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 191:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else if (ADCx == ADC2)
 17317              		.loc 1 191 0
 17318 002a 7A68     		ldr	r2, [r7, #4]
 17319 002c 124B     		ldr	r3, .L5+4
 17320 002e 9A42     		cmp	r2, r3
 17321 0030 0CD1     		bne	.L4
 192:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 193:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable ADC2 reset state */
 194:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 17322              		.loc 1 194 0
 17323 0032 4FF48060 		mov	r0, #1024
 17324 0036 4FF00101 		mov	r1, #1
 17325 003a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 195:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Release ADC2 from reset state */
 196:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 17326              		.loc 1 196 0
 17327 003e 4FF48060 		mov	r0, #1024
 17328 0042 4FF00001 		mov	r1, #0
 17329 0046 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 17330 004a 0FE0     		b	.L1
 17331              	.L4:
 197:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 198:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 199:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 200:../StdPeripheralDriver/src/stm32f10x_adc.c ****     if (ADCx == ADC3)
 17332              		.loc 1 200 0
 17333 004c 7A68     		ldr	r2, [r7, #4]
 17334 004e 0B4B     		ldr	r3, .L5+8
 17335 0050 9A42     		cmp	r2, r3
 17336 0052 0BD1     		bne	.L1
 201:../StdPeripheralDriver/src/stm32f10x_adc.c ****     {
 202:../StdPeripheralDriver/src/stm32f10x_adc.c ****       /* Enable ADC3 reset state */
 203:../StdPeripheralDriver/src/stm32f10x_adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 17337              		.loc 1 203 0
 17338 0054 4FF40040 		mov	r0, #32768
 17339 0058 4FF00101 		mov	r1, #1
 17340 005c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 204:../StdPeripheralDriver/src/stm32f10x_adc.c ****       /* Release ADC3 from reset state */
 205:../StdPeripheralDriver/src/stm32f10x_adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 17341              		.loc 1 205 0
 17342 0060 4FF40040 		mov	r0, #32768
 17343 0064 4FF00001 		mov	r1, #0
 17344 0068 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 17345              	.L1:
 206:../StdPeripheralDriver/src/stm32f10x_adc.c ****     }
 207:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 208:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17346              		.loc 1 208 0
 17347 006c 07F10807 		add	r7, r7, #8
 17348 0070 BD46     		mov	sp, r7
 17349 0072 80BD     		pop	{r7, pc}
 17350              	.L6:
 17351              		.align	2
 17352              	.L5:
 17353 0074 00240140 		.word	1073816576
 17354 0078 00280140 		.word	1073817600
 17355 007c 003C0140 		.word	1073822720
 17356              		.cfi_endproc
 17357              	.LFE29:
 17359              		.section	.text.ADC_Init,"ax",%progbits
 17360              		.align	2
 17361              		.global	ADC_Init
 17362              		.thumb
 17363              		.thumb_func
 17365              	ADC_Init:
 17366              	.LFB30:
 209:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 210:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 211:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters
 212:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         in the ADC_InitStruct.
 213:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 214:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 215:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         the configuration information for the specified ADC peripheral.
 216:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 217:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 218:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 219:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17367              		.loc 1 219 0
 17368              		.cfi_startproc
 17369              		@ args = 0, pretend = 0, frame = 16
 17370              		@ frame_needed = 1, uses_anonymous_args = 0
 17371              		@ link register save eliminated.
 17372 0000 80B4     		push	{r7}
 17373              	.LCFI3:
 17374              		.cfi_def_cfa_offset 4
 17375 0002 85B0     		sub	sp, sp, #20
 17376              	.LCFI4:
 17377              		.cfi_def_cfa_offset 24
 17378 0004 00AF     		add	r7, sp, #0
 17379              		.cfi_offset 7, -4
 17380              	.LCFI5:
 17381              		.cfi_def_cfa_register 7
 17382 0006 7860     		str	r0, [r7, #4]
 17383 0008 3960     		str	r1, [r7, #0]
 220:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 17384              		.loc 1 220 0
 17385 000a 4FF00003 		mov	r3, #0
 17386 000e FB60     		str	r3, [r7, #12]
 221:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint8_t tmpreg2 = 0;
 17387              		.loc 1 221 0
 17388 0010 4FF00003 		mov	r3, #0
 17389 0014 FB72     		strb	r3, [r7, #11]
 222:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 223:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 224:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_MODE(ADC_InitStruct->ADC_Mode));
 225:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 226:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode));
 227:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));   
 228:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 229:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));
 230:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 231:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 232:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADCx CR1 value */
 233:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR1;
 17390              		.loc 1 233 0
 17391 0016 7B68     		ldr	r3, [r7, #4]
 17392 0018 5B68     		ldr	r3, [r3, #4]
 17393 001a FB60     		str	r3, [r7, #12]
 234:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear DUALMOD and SCAN bits */
 235:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= CR1_CLEAR_Mask;
 17394              		.loc 1 235 0
 17395 001c FB68     		ldr	r3, [r7, #12]
 17396 001e 23F47023 		bic	r3, r3, #983040
 17397 0022 23F48073 		bic	r3, r3, #256
 17398 0026 FB60     		str	r3, [r7, #12]
 236:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Configure ADCx: Dual mode and scan conversion mode */
 237:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set DUALMOD bits according to ADC_Mode value */
 238:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 239:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8
 17399              		.loc 1 239 0
 17400 0028 3B68     		ldr	r3, [r7, #0]
 17401 002a 1A68     		ldr	r2, [r3, #0]
 17402 002c 3B68     		ldr	r3, [r7, #0]
 17403 002e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 17404 0030 4FEA0323 		lsl	r3, r3, #8
 17405 0034 42EA0303 		orr	r3, r2, r3
 17406 0038 FA68     		ldr	r2, [r7, #12]
 17407 003a 42EA0303 		orr	r3, r2, r3
 17408 003e FB60     		str	r3, [r7, #12]
 240:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Write to ADCx CR1 */
 241:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg1;
 17409              		.loc 1 241 0
 17410 0040 7B68     		ldr	r3, [r7, #4]
 17411 0042 FA68     		ldr	r2, [r7, #12]
 17412 0044 5A60     		str	r2, [r3, #4]
 242:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 243:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 244:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADCx CR2 value */
 245:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR2;
 17413              		.loc 1 245 0
 17414 0046 7B68     		ldr	r3, [r7, #4]
 17415 0048 9B68     		ldr	r3, [r3, #8]
 17416 004a FB60     		str	r3, [r7, #12]
 246:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear CONT, ALIGN and EXTSEL bits */
 247:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= CR2_CLEAR_Mask;
 17417              		.loc 1 247 0
 17418 004c FA68     		ldr	r2, [r7, #12]
 17419 004e 1A4B     		ldr	r3, .L8
 17420 0050 02EA0303 		and	r3, r2, r3
 17421 0054 FB60     		str	r3, [r7, #12]
 248:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Configure ADCx: external trigger event and continuous conversion mode */
 249:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 250:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 251:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 252:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 17422              		.loc 1 252 0
 17423 0056 3B68     		ldr	r3, [r7, #0]
 17424 0058 DA68     		ldr	r2, [r3, #12]
 17425 005a 3B68     		ldr	r3, [r7, #0]
 17426 005c 9B68     		ldr	r3, [r3, #8]
 17427 005e 1A43     		orrs	r2, r2, r3
 253:../StdPeripheralDriver/src/stm32f10x_adc.c ****             ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 17428              		.loc 1 253 0
 17429 0060 3B68     		ldr	r3, [r7, #0]
 17430 0062 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 17431 0064 4FEA4303 		lsl	r3, r3, #1
 252:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 17432              		.loc 1 252 0
 17433 0068 42EA0303 		orr	r3, r2, r3
 17434 006c FA68     		ldr	r2, [r7, #12]
 17435 006e 42EA0303 		orr	r3, r2, r3
 17436 0072 FB60     		str	r3, [r7, #12]
 254:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Write to ADCx CR2 */
 255:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 = tmpreg1;
 17437              		.loc 1 255 0
 17438 0074 7B68     		ldr	r3, [r7, #4]
 17439 0076 FA68     		ldr	r2, [r7, #12]
 17440 0078 9A60     		str	r2, [r3, #8]
 256:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 257:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 258:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADCx SQR1 value */
 259:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->SQR1;
 17441              		.loc 1 259 0
 17442 007a 7B68     		ldr	r3, [r7, #4]
 17443 007c DB6A     		ldr	r3, [r3, #44]
 17444 007e FB60     		str	r3, [r7, #12]
 260:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear L bits */
 261:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= SQR1_CLEAR_Mask;
 17445              		.loc 1 261 0
 17446 0080 FB68     		ldr	r3, [r7, #12]
 17447 0082 23F47003 		bic	r3, r3, #15728640
 17448 0086 FB60     		str	r3, [r7, #12]
 262:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Configure ADCx: regular channel sequence length */
 263:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set L bits according to ADC_NbrOfChannel value */
 264:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 17449              		.loc 1 264 0
 17450 0088 3B68     		ldr	r3, [r7, #0]
 17451 008a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 17452 008c 03F1FF33 		add	r3, r3, #-1
 17453 0090 DAB2     		uxtb	r2, r3
 17454 0092 FB7A     		ldrb	r3, [r7, #11]
 17455 0094 42EA0303 		orr	r3, r2, r3
 17456 0098 FB72     		strb	r3, [r7, #11]
 265:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)tmpreg2 << 20;
 17457              		.loc 1 265 0
 17458 009a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 17459 009c 4FEA0353 		lsl	r3, r3, #20
 17460 00a0 FA68     		ldr	r2, [r7, #12]
 17461 00a2 42EA0303 		orr	r3, r2, r3
 17462 00a6 FB60     		str	r3, [r7, #12]
 266:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Write to ADCx SQR1 */
 267:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->SQR1 = tmpreg1;
 17463              		.loc 1 267 0
 17464 00a8 7B68     		ldr	r3, [r7, #4]
 17465 00aa FA68     		ldr	r2, [r7, #12]
 17466 00ac DA62     		str	r2, [r3, #44]
 268:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17467              		.loc 1 268 0
 17468 00ae 07F11407 		add	r7, r7, #20
 17469 00b2 BD46     		mov	sp, r7
 17470 00b4 80BC     		pop	{r7}
 17471 00b6 7047     		bx	lr
 17472              	.L9:
 17473              		.align	2
 17474              	.L8:
 17475 00b8 FDF7F1FF 		.word	-919555
 17476              		.cfi_endproc
 17477              	.LFE30:
 17479              		.section	.text.ADC_StructInit,"ax",%progbits
 17480              		.align	2
 17481              		.global	ADC_StructInit
 17482              		.thumb
 17483              		.thumb_func
 17485              	ADC_StructInit:
 17486              	.LFB31:
 269:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 270:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 271:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 272:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
 273:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 274:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 275:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 276:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17487              		.loc 1 276 0
 17488              		.cfi_startproc
 17489              		@ args = 0, pretend = 0, frame = 8
 17490              		@ frame_needed = 1, uses_anonymous_args = 0
 17491              		@ link register save eliminated.
 17492 0000 80B4     		push	{r7}
 17493              	.LCFI6:
 17494              		.cfi_def_cfa_offset 4
 17495 0002 83B0     		sub	sp, sp, #12
 17496              	.LCFI7:
 17497              		.cfi_def_cfa_offset 16
 17498 0004 00AF     		add	r7, sp, #0
 17499              		.cfi_offset 7, -4
 17500              	.LCFI8:
 17501              		.cfi_def_cfa_register 7
 17502 0006 7860     		str	r0, [r7, #4]
 277:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Reset ADC init structure parameters values */
 278:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_Mode member */
 279:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 17503              		.loc 1 279 0
 17504 0008 7B68     		ldr	r3, [r7, #4]
 17505 000a 4FF00002 		mov	r2, #0
 17506 000e 1A60     		str	r2, [r3, #0]
 280:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* initialize the ADC_ScanConvMode member */
 281:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 17507              		.loc 1 281 0
 17508 0010 7B68     		ldr	r3, [r7, #4]
 17509 0012 4FF00002 		mov	r2, #0
 17510 0016 1A71     		strb	r2, [r3, #4]
 282:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 283:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 17511              		.loc 1 283 0
 17512 0018 7B68     		ldr	r3, [r7, #4]
 17513 001a 4FF00002 		mov	r2, #0
 17514 001e 5A71     		strb	r2, [r3, #5]
 284:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 285:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 17515              		.loc 1 285 0
 17516 0020 7B68     		ldr	r3, [r7, #4]
 17517 0022 4FF00002 		mov	r2, #0
 17518 0026 9A60     		str	r2, [r3, #8]
 286:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_DataAlign member */
 287:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 17519              		.loc 1 287 0
 17520 0028 7B68     		ldr	r3, [r7, #4]
 17521 002a 4FF00002 		mov	r2, #0
 17522 002e DA60     		str	r2, [r3, #12]
 288:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_NbrOfChannel member */
 289:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_NbrOfChannel = 1;
 17523              		.loc 1 289 0
 17524 0030 7B68     		ldr	r3, [r7, #4]
 17525 0032 4FF00102 		mov	r2, #1
 17526 0036 1A74     		strb	r2, [r3, #16]
 290:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17527              		.loc 1 290 0
 17528 0038 07F10C07 		add	r7, r7, #12
 17529 003c BD46     		mov	sp, r7
 17530 003e 80BC     		pop	{r7}
 17531 0040 7047     		bx	lr
 17532              		.cfi_endproc
 17533              	.LFE31:
 17535 0042 00BF     		.section	.text.ADC_Cmd,"ax",%progbits
 17536              		.align	2
 17537              		.global	ADC_Cmd
 17538              		.thumb
 17539              		.thumb_func
 17541              	ADC_Cmd:
 17542              	.LFB32:
 291:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 292:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 293:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 294:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 295:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the ADCx peripheral.
 296:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 297:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 298:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 299:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 300:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17543              		.loc 1 300 0
 17544              		.cfi_startproc
 17545              		@ args = 0, pretend = 0, frame = 8
 17546              		@ frame_needed = 1, uses_anonymous_args = 0
 17547              		@ link register save eliminated.
 17548 0000 80B4     		push	{r7}
 17549              	.LCFI9:
 17550              		.cfi_def_cfa_offset 4
 17551 0002 83B0     		sub	sp, sp, #12
 17552              	.LCFI10:
 17553              		.cfi_def_cfa_offset 16
 17554 0004 00AF     		add	r7, sp, #0
 17555              		.cfi_offset 7, -4
 17556              	.LCFI11:
 17557              		.cfi_def_cfa_register 7
 17558 0006 7860     		str	r0, [r7, #4]
 17559 0008 0B46     		mov	r3, r1
 17560 000a FB70     		strb	r3, [r7, #3]
 301:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 302:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 303:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 304:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 17561              		.loc 1 304 0
 17562 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 17563 000e 002B     		cmp	r3, #0
 17564 0010 06D0     		beq	.L12
 305:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 306:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 307:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_ADON_Set;
 17565              		.loc 1 307 0
 17566 0012 7B68     		ldr	r3, [r7, #4]
 17567 0014 9B68     		ldr	r3, [r3, #8]
 17568 0016 43F00102 		orr	r2, r3, #1
 17569 001a 7B68     		ldr	r3, [r7, #4]
 17570 001c 9A60     		str	r2, [r3, #8]
 17571 001e 05E0     		b	.L11
 17572              	.L12:
 308:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 309:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 310:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 311:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC peripheral */
 312:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_ADON_Reset;
 17573              		.loc 1 312 0
 17574 0020 7B68     		ldr	r3, [r7, #4]
 17575 0022 9B68     		ldr	r3, [r3, #8]
 17576 0024 23F00102 		bic	r2, r3, #1
 17577 0028 7B68     		ldr	r3, [r7, #4]
 17578 002a 9A60     		str	r2, [r3, #8]
 17579              	.L11:
 313:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 314:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17580              		.loc 1 314 0
 17581 002c 07F10C07 		add	r7, r7, #12
 17582 0030 BD46     		mov	sp, r7
 17583 0032 80BC     		pop	{r7}
 17584 0034 7047     		bx	lr
 17585              		.cfi_endproc
 17586              	.LFE32:
 17588 0036 00BF     		.section	.text.ADC_DMACmd,"ax",%progbits
 17589              		.align	2
 17590              		.global	ADC_DMACmd
 17591              		.thumb
 17592              		.thumb_func
 17594              	ADC_DMACmd:
 17595              	.LFB33:
 315:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 316:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 317:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
 318:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1 or 3 to select the ADC peripheral.
 319:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   Note: ADC2 hasn't a DMA capability.
 320:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
 321:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 322:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 323:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 324:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 325:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17596              		.loc 1 325 0
 17597              		.cfi_startproc
 17598              		@ args = 0, pretend = 0, frame = 8
 17599              		@ frame_needed = 1, uses_anonymous_args = 0
 17600              		@ link register save eliminated.
 17601 0000 80B4     		push	{r7}
 17602              	.LCFI12:
 17603              		.cfi_def_cfa_offset 4
 17604 0002 83B0     		sub	sp, sp, #12
 17605              	.LCFI13:
 17606              		.cfi_def_cfa_offset 16
 17607 0004 00AF     		add	r7, sp, #0
 17608              		.cfi_offset 7, -4
 17609              	.LCFI14:
 17610              		.cfi_def_cfa_register 7
 17611 0006 7860     		str	r0, [r7, #4]
 17612 0008 0B46     		mov	r3, r1
 17613 000a FB70     		strb	r3, [r7, #3]
 326:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 327:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_DMA_PERIPH(ADCx));
 328:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 329:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 17614              		.loc 1 329 0
 17615 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 17616 000e 002B     		cmp	r3, #0
 17617 0010 06D0     		beq	.L15
 330:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 331:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC DMA request */
 332:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_DMA_Set;
 17618              		.loc 1 332 0
 17619 0012 7B68     		ldr	r3, [r7, #4]
 17620 0014 9B68     		ldr	r3, [r3, #8]
 17621 0016 43F48072 		orr	r2, r3, #256
 17622 001a 7B68     		ldr	r3, [r7, #4]
 17623 001c 9A60     		str	r2, [r3, #8]
 17624 001e 05E0     		b	.L14
 17625              	.L15:
 333:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 334:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 335:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 336:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC DMA request */
 337:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_DMA_Reset;
 17626              		.loc 1 337 0
 17627 0020 7B68     		ldr	r3, [r7, #4]
 17628 0022 9B68     		ldr	r3, [r3, #8]
 17629 0024 23F48072 		bic	r2, r3, #256
 17630 0028 7B68     		ldr	r3, [r7, #4]
 17631 002a 9A60     		str	r2, [r3, #8]
 17632              	.L14:
 338:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 339:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17633              		.loc 1 339 0
 17634 002c 07F10C07 		add	r7, r7, #12
 17635 0030 BD46     		mov	sp, r7
 17636 0032 80BC     		pop	{r7}
 17637 0034 7047     		bx	lr
 17638              		.cfi_endproc
 17639              	.LFE33:
 17641 0036 00BF     		.section	.text.ADC_ITConfig,"ax",%progbits
 17642              		.align	2
 17643              		.global	ADC_ITConfig
 17644              		.thumb
 17645              		.thumb_func
 17647              	ADC_ITConfig:
 17648              	.LFB34:
 340:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 341:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 342:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
 343:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 344:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
 345:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
 346:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
 347:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
 348:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
 349:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
 350:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 351:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 352:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 353:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
 354:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17649              		.loc 1 354 0
 17650              		.cfi_startproc
 17651              		@ args = 0, pretend = 0, frame = 16
 17652              		@ frame_needed = 1, uses_anonymous_args = 0
 17653              		@ link register save eliminated.
 17654 0000 80B4     		push	{r7}
 17655              	.LCFI15:
 17656              		.cfi_def_cfa_offset 4
 17657 0002 85B0     		sub	sp, sp, #20
 17658              	.LCFI16:
 17659              		.cfi_def_cfa_offset 24
 17660 0004 00AF     		add	r7, sp, #0
 17661              		.cfi_offset 7, -4
 17662              	.LCFI17:
 17663              		.cfi_def_cfa_register 7
 17664 0006 7860     		str	r0, [r7, #4]
 17665 0008 1346     		mov	r3, r2
 17666 000a 0A46     		mov	r2, r1	@ movhi
 17667 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 17668 000e 7B70     		strb	r3, [r7, #1]
 355:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint8_t itmask = 0;
 17669              		.loc 1 355 0
 17670 0010 4FF00003 		mov	r3, #0
 17671 0014 FB73     		strb	r3, [r7, #15]
 356:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 357:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 358:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 359:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
 360:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
 361:../StdPeripheralDriver/src/stm32f10x_adc.c ****   itmask = (uint8_t)ADC_IT;
 17672              		.loc 1 361 0
 17673 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 17674 0018 FB73     		strb	r3, [r7, #15]
 362:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 17675              		.loc 1 362 0
 17676 001a 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 17677 001c 002B     		cmp	r3, #0
 17678 001e 06D0     		beq	.L18
 363:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 364:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC interrupts */
 365:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= itmask;
 17679              		.loc 1 365 0
 17680 0020 7B68     		ldr	r3, [r7, #4]
 17681 0022 5A68     		ldr	r2, [r3, #4]
 17682 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 17683 0026 1A43     		orrs	r2, r2, r3
 17684 0028 7B68     		ldr	r3, [r7, #4]
 17685 002a 5A60     		str	r2, [r3, #4]
 17686 002c 07E0     		b	.L17
 17687              	.L18:
 366:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 367:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 368:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 369:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC interrupts */
 370:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 17688              		.loc 1 370 0
 17689 002e 7B68     		ldr	r3, [r7, #4]
 17690 0030 5A68     		ldr	r2, [r3, #4]
 17691 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 17692 0034 6FEA0303 		mvn	r3, r3
 17693 0038 1A40     		ands	r2, r2, r3
 17694 003a 7B68     		ldr	r3, [r7, #4]
 17695 003c 5A60     		str	r2, [r3, #4]
 17696              	.L17:
 371:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 372:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17697              		.loc 1 372 0
 17698 003e 07F11407 		add	r7, r7, #20
 17699 0042 BD46     		mov	sp, r7
 17700 0044 80BC     		pop	{r7}
 17701 0046 7047     		bx	lr
 17702              		.cfi_endproc
 17703              	.LFE34:
 17705              		.section	.text.ADC_ResetCalibration,"ax",%progbits
 17706              		.align	2
 17707              		.global	ADC_ResetCalibration
 17708              		.thumb
 17709              		.thumb_func
 17711              	ADC_ResetCalibration:
 17712              	.LFB35:
 373:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 374:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 375:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Resets the selected ADC calibration registers.
 376:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 377:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 378:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 379:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ResetCalibration(ADC_TypeDef* ADCx)
 380:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17713              		.loc 1 380 0
 17714              		.cfi_startproc
 17715              		@ args = 0, pretend = 0, frame = 8
 17716              		@ frame_needed = 1, uses_anonymous_args = 0
 17717              		@ link register save eliminated.
 17718 0000 80B4     		push	{r7}
 17719              	.LCFI18:
 17720              		.cfi_def_cfa_offset 4
 17721 0002 83B0     		sub	sp, sp, #12
 17722              	.LCFI19:
 17723              		.cfi_def_cfa_offset 16
 17724 0004 00AF     		add	r7, sp, #0
 17725              		.cfi_offset 7, -4
 17726              	.LCFI20:
 17727              		.cfi_def_cfa_register 7
 17728 0006 7860     		str	r0, [r7, #4]
 381:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 382:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 383:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Resets the selected ADC calibration registers */  
 384:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 |= CR2_RSTCAL_Set;
 17729              		.loc 1 384 0
 17730 0008 7B68     		ldr	r3, [r7, #4]
 17731 000a 9B68     		ldr	r3, [r3, #8]
 17732 000c 43F00802 		orr	r2, r3, #8
 17733 0010 7B68     		ldr	r3, [r7, #4]
 17734 0012 9A60     		str	r2, [r3, #8]
 385:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17735              		.loc 1 385 0
 17736 0014 07F10C07 		add	r7, r7, #12
 17737 0018 BD46     		mov	sp, r7
 17738 001a 80BC     		pop	{r7}
 17739 001c 7047     		bx	lr
 17740              		.cfi_endproc
 17741              	.LFE35:
 17743 001e 00BF     		.section	.text.ADC_GetResetCalibrationStatus,"ax",%progbits
 17744              		.align	2
 17745              		.global	ADC_GetResetCalibrationStatus
 17746              		.thumb
 17747              		.thumb_func
 17749              	ADC_GetResetCalibrationStatus:
 17750              	.LFB36:
 386:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 387:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 388:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC reset calibration registers status.
 389:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 390:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC reset calibration registers (SET or RESET).
 391:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 392:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
 393:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17751              		.loc 1 393 0
 17752              		.cfi_startproc
 17753              		@ args = 0, pretend = 0, frame = 16
 17754              		@ frame_needed = 1, uses_anonymous_args = 0
 17755              		@ link register save eliminated.
 17756 0000 80B4     		push	{r7}
 17757              	.LCFI21:
 17758              		.cfi_def_cfa_offset 4
 17759 0002 85B0     		sub	sp, sp, #20
 17760              	.LCFI22:
 17761              		.cfi_def_cfa_offset 24
 17762 0004 00AF     		add	r7, sp, #0
 17763              		.cfi_offset 7, -4
 17764              	.LCFI23:
 17765              		.cfi_def_cfa_register 7
 17766 0006 7860     		str	r0, [r7, #4]
 394:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 17767              		.loc 1 394 0
 17768 0008 4FF00003 		mov	r3, #0
 17769 000c FB73     		strb	r3, [r7, #15]
 395:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 396:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 397:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of RSTCAL bit */
 398:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 17770              		.loc 1 398 0
 17771 000e 7B68     		ldr	r3, [r7, #4]
 17772 0010 9B68     		ldr	r3, [r3, #8]
 17773 0012 03F00803 		and	r3, r3, #8
 17774 0016 002B     		cmp	r3, #0
 17775 0018 03D0     		beq	.L22
 399:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 400:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* RSTCAL bit is set */
 401:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 17776              		.loc 1 401 0
 17777 001a 4FF00103 		mov	r3, #1
 17778 001e FB73     		strb	r3, [r7, #15]
 17779 0020 02E0     		b	.L23
 17780              	.L22:
 402:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 403:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 404:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 405:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* RSTCAL bit is reset */
 406:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 17781              		.loc 1 406 0
 17782 0022 4FF00003 		mov	r3, #0
 17783 0026 FB73     		strb	r3, [r7, #15]
 17784              	.L23:
 407:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 408:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the RSTCAL bit status */
 409:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 17785              		.loc 1 409 0
 17786 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 410:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17787              		.loc 1 410 0
 17788 002a 1846     		mov	r0, r3
 17789 002c 07F11407 		add	r7, r7, #20
 17790 0030 BD46     		mov	sp, r7
 17791 0032 80BC     		pop	{r7}
 17792 0034 7047     		bx	lr
 17793              		.cfi_endproc
 17794              	.LFE36:
 17796 0036 00BF     		.section	.text.ADC_StartCalibration,"ax",%progbits
 17797              		.align	2
 17798              		.global	ADC_StartCalibration
 17799              		.thumb
 17800              		.thumb_func
 17802              	ADC_StartCalibration:
 17803              	.LFB37:
 411:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 412:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 413:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Starts the selected ADC calibration process.
 414:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 415:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 416:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 417:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_StartCalibration(ADC_TypeDef* ADCx)
 418:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17804              		.loc 1 418 0
 17805              		.cfi_startproc
 17806              		@ args = 0, pretend = 0, frame = 8
 17807              		@ frame_needed = 1, uses_anonymous_args = 0
 17808              		@ link register save eliminated.
 17809 0000 80B4     		push	{r7}
 17810              	.LCFI24:
 17811              		.cfi_def_cfa_offset 4
 17812 0002 83B0     		sub	sp, sp, #12
 17813              	.LCFI25:
 17814              		.cfi_def_cfa_offset 16
 17815 0004 00AF     		add	r7, sp, #0
 17816              		.cfi_offset 7, -4
 17817              	.LCFI26:
 17818              		.cfi_def_cfa_register 7
 17819 0006 7860     		str	r0, [r7, #4]
 419:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 420:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 421:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Enable the selected ADC calibration process */  
 422:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 |= CR2_CAL_Set;
 17820              		.loc 1 422 0
 17821 0008 7B68     		ldr	r3, [r7, #4]
 17822 000a 9B68     		ldr	r3, [r3, #8]
 17823 000c 43F00402 		orr	r2, r3, #4
 17824 0010 7B68     		ldr	r3, [r7, #4]
 17825 0012 9A60     		str	r2, [r3, #8]
 423:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17826              		.loc 1 423 0
 17827 0014 07F10C07 		add	r7, r7, #12
 17828 0018 BD46     		mov	sp, r7
 17829 001a 80BC     		pop	{r7}
 17830 001c 7047     		bx	lr
 17831              		.cfi_endproc
 17832              	.LFE37:
 17834 001e 00BF     		.section	.text.ADC_GetCalibrationStatus,"ax",%progbits
 17835              		.align	2
 17836              		.global	ADC_GetCalibrationStatus
 17837              		.thumb
 17838              		.thumb_func
 17840              	ADC_GetCalibrationStatus:
 17841              	.LFB38:
 424:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 425:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 426:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC calibration status.
 427:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 428:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC calibration (SET or RESET).
 429:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 430:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
 431:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17842              		.loc 1 431 0
 17843              		.cfi_startproc
 17844              		@ args = 0, pretend = 0, frame = 16
 17845              		@ frame_needed = 1, uses_anonymous_args = 0
 17846              		@ link register save eliminated.
 17847 0000 80B4     		push	{r7}
 17848              	.LCFI27:
 17849              		.cfi_def_cfa_offset 4
 17850 0002 85B0     		sub	sp, sp, #20
 17851              	.LCFI28:
 17852              		.cfi_def_cfa_offset 24
 17853 0004 00AF     		add	r7, sp, #0
 17854              		.cfi_offset 7, -4
 17855              	.LCFI29:
 17856              		.cfi_def_cfa_register 7
 17857 0006 7860     		str	r0, [r7, #4]
 432:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 17858              		.loc 1 432 0
 17859 0008 4FF00003 		mov	r3, #0
 17860 000c FB73     		strb	r3, [r7, #15]
 433:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 434:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 435:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of CAL bit */
 436:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 17861              		.loc 1 436 0
 17862 000e 7B68     		ldr	r3, [r7, #4]
 17863 0010 9B68     		ldr	r3, [r3, #8]
 17864 0012 03F00403 		and	r3, r3, #4
 17865 0016 002B     		cmp	r3, #0
 17866 0018 03D0     		beq	.L26
 437:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 438:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* CAL bit is set: calibration on going */
 439:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 17867              		.loc 1 439 0
 17868 001a 4FF00103 		mov	r3, #1
 17869 001e FB73     		strb	r3, [r7, #15]
 17870 0020 02E0     		b	.L27
 17871              	.L26:
 440:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 441:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 442:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 443:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* CAL bit is reset: end of calibration */
 444:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 17872              		.loc 1 444 0
 17873 0022 4FF00003 		mov	r3, #0
 17874 0026 FB73     		strb	r3, [r7, #15]
 17875              	.L27:
 445:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 446:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the CAL bit status */
 447:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 17876              		.loc 1 447 0
 17877 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 448:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17878              		.loc 1 448 0
 17879 002a 1846     		mov	r0, r3
 17880 002c 07F11407 		add	r7, r7, #20
 17881 0030 BD46     		mov	sp, r7
 17882 0032 80BC     		pop	{r7}
 17883 0034 7047     		bx	lr
 17884              		.cfi_endproc
 17885              	.LFE38:
 17887 0036 00BF     		.section	.text.ADC_SoftwareStartConvCmd,"ax",%progbits
 17888              		.align	2
 17889              		.global	ADC_SoftwareStartConvCmd
 17890              		.thumb
 17891              		.thumb_func
 17893              	ADC_SoftwareStartConvCmd:
 17894              	.LFB39:
 449:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 450:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 451:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC software start conversion .
 452:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 453:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC software start conversion.
 454:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 455:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 456:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 457:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 458:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17895              		.loc 1 458 0
 17896              		.cfi_startproc
 17897              		@ args = 0, pretend = 0, frame = 8
 17898              		@ frame_needed = 1, uses_anonymous_args = 0
 17899              		@ link register save eliminated.
 17900 0000 80B4     		push	{r7}
 17901              	.LCFI30:
 17902              		.cfi_def_cfa_offset 4
 17903 0002 83B0     		sub	sp, sp, #12
 17904              	.LCFI31:
 17905              		.cfi_def_cfa_offset 16
 17906 0004 00AF     		add	r7, sp, #0
 17907              		.cfi_offset 7, -4
 17908              	.LCFI32:
 17909              		.cfi_def_cfa_register 7
 17910 0006 7860     		str	r0, [r7, #4]
 17911 0008 0B46     		mov	r3, r1
 17912 000a FB70     		strb	r3, [r7, #3]
 459:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 460:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 461:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 462:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 17913              		.loc 1 462 0
 17914 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 17915 000e 002B     		cmp	r3, #0
 17916 0010 06D0     		beq	.L29
 463:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 464:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion on external event and start the selected
 465:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC conversion */
 466:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 17917              		.loc 1 466 0
 17918 0012 7B68     		ldr	r3, [r7, #4]
 17919 0014 9B68     		ldr	r3, [r3, #8]
 17920 0016 43F4A002 		orr	r2, r3, #5242880
 17921 001a 7B68     		ldr	r3, [r7, #4]
 17922 001c 9A60     		str	r2, [r3, #8]
 17923 001e 05E0     		b	.L28
 17924              	.L29:
 467:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 468:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 469:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 470:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event and stop the selected
 471:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC conversion */
 472:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 17925              		.loc 1 472 0
 17926 0020 7B68     		ldr	r3, [r7, #4]
 17927 0022 9B68     		ldr	r3, [r3, #8]
 17928 0024 23F4A002 		bic	r2, r3, #5242880
 17929 0028 7B68     		ldr	r3, [r7, #4]
 17930 002a 9A60     		str	r2, [r3, #8]
 17931              	.L28:
 473:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 474:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17932              		.loc 1 474 0
 17933 002c 07F10C07 		add	r7, r7, #12
 17934 0030 BD46     		mov	sp, r7
 17935 0032 80BC     		pop	{r7}
 17936 0034 7047     		bx	lr
 17937              		.cfi_endproc
 17938              	.LFE39:
 17940 0036 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 17941              		.align	2
 17942              		.global	ADC_GetSoftwareStartConvStatus
 17943              		.thumb
 17944              		.thumb_func
 17946              	ADC_GetSoftwareStartConvStatus:
 17947              	.LFB40:
 475:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 476:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 477:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC Software start conversion Status.
 478:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 479:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 480:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 481:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 482:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 17948              		.loc 1 482 0
 17949              		.cfi_startproc
 17950              		@ args = 0, pretend = 0, frame = 16
 17951              		@ frame_needed = 1, uses_anonymous_args = 0
 17952              		@ link register save eliminated.
 17953 0000 80B4     		push	{r7}
 17954              	.LCFI33:
 17955              		.cfi_def_cfa_offset 4
 17956 0002 85B0     		sub	sp, sp, #20
 17957              	.LCFI34:
 17958              		.cfi_def_cfa_offset 24
 17959 0004 00AF     		add	r7, sp, #0
 17960              		.cfi_offset 7, -4
 17961              	.LCFI35:
 17962              		.cfi_def_cfa_register 7
 17963 0006 7860     		str	r0, [r7, #4]
 483:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 17964              		.loc 1 483 0
 17965 0008 4FF00003 		mov	r3, #0
 17966 000c FB73     		strb	r3, [r7, #15]
 484:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 485:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 486:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of SWSTART bit */
 487:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
 17967              		.loc 1 487 0
 17968 000e 7B68     		ldr	r3, [r7, #4]
 17969 0010 9B68     		ldr	r3, [r3, #8]
 17970 0012 03F48003 		and	r3, r3, #4194304
 17971 0016 002B     		cmp	r3, #0
 17972 0018 03D0     		beq	.L32
 488:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 489:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* SWSTART bit is set */
 490:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 17973              		.loc 1 490 0
 17974 001a 4FF00103 		mov	r3, #1
 17975 001e FB73     		strb	r3, [r7, #15]
 17976 0020 02E0     		b	.L33
 17977              	.L32:
 491:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 492:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 493:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 494:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* SWSTART bit is reset */
 495:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 17978              		.loc 1 495 0
 17979 0022 4FF00003 		mov	r3, #0
 17980 0026 FB73     		strb	r3, [r7, #15]
 17981              	.L33:
 496:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 497:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the SWSTART bit status */
 498:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 17982              		.loc 1 498 0
 17983 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 499:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 17984              		.loc 1 499 0
 17985 002a 1846     		mov	r0, r3
 17986 002c 07F11407 		add	r7, r7, #20
 17987 0030 BD46     		mov	sp, r7
 17988 0032 80BC     		pop	{r7}
 17989 0034 7047     		bx	lr
 17990              		.cfi_endproc
 17991              	.LFE40:
 17993 0036 00BF     		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 17994              		.align	2
 17995              		.global	ADC_DiscModeChannelCountConfig
 17996              		.thumb
 17997              		.thumb_func
 17999              	ADC_DiscModeChannelCountConfig:
 18000              	.LFB41:
 500:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 501:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 502:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular
 503:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         group channel.
 504:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 505:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel
 506:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         count value. This number must be between 1 and 8.
 507:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 508:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 509:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 510:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18001              		.loc 1 510 0
 18002              		.cfi_startproc
 18003              		@ args = 0, pretend = 0, frame = 16
 18004              		@ frame_needed = 1, uses_anonymous_args = 0
 18005              		@ link register save eliminated.
 18006 0000 80B4     		push	{r7}
 18007              	.LCFI36:
 18008              		.cfi_def_cfa_offset 4
 18009 0002 85B0     		sub	sp, sp, #20
 18010              	.LCFI37:
 18011              		.cfi_def_cfa_offset 24
 18012 0004 00AF     		add	r7, sp, #0
 18013              		.cfi_offset 7, -4
 18014              	.LCFI38:
 18015              		.cfi_def_cfa_register 7
 18016 0006 7860     		str	r0, [r7, #4]
 18017 0008 0B46     		mov	r3, r1
 18018 000a FB70     		strb	r3, [r7, #3]
 511:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 18019              		.loc 1 511 0
 18020 000c 4FF00003 		mov	r3, #0
 18021 0010 FB60     		str	r3, [r7, #12]
 512:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg2 = 0;
 18022              		.loc 1 512 0
 18023 0012 4FF00003 		mov	r3, #0
 18024 0016 BB60     		str	r3, [r7, #8]
 513:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 514:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 515:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 516:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
 517:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR1;
 18025              		.loc 1 517 0
 18026 0018 7B68     		ldr	r3, [r7, #4]
 18027 001a 5B68     		ldr	r3, [r3, #4]
 18028 001c FB60     		str	r3, [r7, #12]
 518:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old discontinuous mode channel count */
 519:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= CR1_DISCNUM_Reset;
 18029              		.loc 1 519 0
 18030 001e FB68     		ldr	r3, [r7, #12]
 18031 0020 23F46043 		bic	r3, r3, #57344
 18032 0024 FB60     		str	r3, [r7, #12]
 520:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the discontinuous mode channel count */
 521:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = Number - 1;
 18033              		.loc 1 521 0
 18034 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18035 0028 03F1FF33 		add	r3, r3, #-1
 18036 002c BB60     		str	r3, [r7, #8]
 522:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 18037              		.loc 1 522 0
 18038 002e BB68     		ldr	r3, [r7, #8]
 18039 0030 4FEA4333 		lsl	r3, r3, #13
 18040 0034 FA68     		ldr	r2, [r7, #12]
 18041 0036 42EA0303 		orr	r3, r2, r3
 18042 003a FB60     		str	r3, [r7, #12]
 523:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
 524:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg1;
 18043              		.loc 1 524 0
 18044 003c 7B68     		ldr	r3, [r7, #4]
 18045 003e FA68     		ldr	r2, [r7, #12]
 18046 0040 5A60     		str	r2, [r3, #4]
 525:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18047              		.loc 1 525 0
 18048 0042 07F11407 		add	r7, r7, #20
 18049 0046 BD46     		mov	sp, r7
 18050 0048 80BC     		pop	{r7}
 18051 004a 7047     		bx	lr
 18052              		.cfi_endproc
 18053              	.LFE41:
 18055              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 18056              		.align	2
 18057              		.global	ADC_DiscModeCmd
 18058              		.thumb
 18059              		.thumb_func
 18061              	ADC_DiscModeCmd:
 18062              	.LFB42:
 526:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 527:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 528:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group
 529:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         channel for the specified ADC
 530:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 531:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode
 532:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         on regular group channel.
 533:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         This parameter can be: ENABLE or DISABLE.
 534:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 535:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 536:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 537:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18063              		.loc 1 537 0
 18064              		.cfi_startproc
 18065              		@ args = 0, pretend = 0, frame = 8
 18066              		@ frame_needed = 1, uses_anonymous_args = 0
 18067              		@ link register save eliminated.
 18068 0000 80B4     		push	{r7}
 18069              	.LCFI39:
 18070              		.cfi_def_cfa_offset 4
 18071 0002 83B0     		sub	sp, sp, #12
 18072              	.LCFI40:
 18073              		.cfi_def_cfa_offset 16
 18074 0004 00AF     		add	r7, sp, #0
 18075              		.cfi_offset 7, -4
 18076              	.LCFI41:
 18077              		.cfi_def_cfa_register 7
 18078 0006 7860     		str	r0, [r7, #4]
 18079 0008 0B46     		mov	r3, r1
 18080 000a FB70     		strb	r3, [r7, #3]
 538:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 539:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 540:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 541:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18081              		.loc 1 541 0
 18082 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18083 000e 002B     		cmp	r3, #0
 18084 0010 06D0     		beq	.L36
 542:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 543:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 544:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_DISCEN_Set;
 18085              		.loc 1 544 0
 18086 0012 7B68     		ldr	r3, [r7, #4]
 18087 0014 5B68     		ldr	r3, [r3, #4]
 18088 0016 43F40062 		orr	r2, r3, #2048
 18089 001a 7B68     		ldr	r3, [r7, #4]
 18090 001c 5A60     		str	r2, [r3, #4]
 18091 001e 05E0     		b	.L35
 18092              	.L36:
 545:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 546:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 547:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 548:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 549:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_DISCEN_Reset;
 18093              		.loc 1 549 0
 18094 0020 7B68     		ldr	r3, [r7, #4]
 18095 0022 5B68     		ldr	r3, [r3, #4]
 18096 0024 23F40062 		bic	r2, r3, #2048
 18097 0028 7B68     		ldr	r3, [r7, #4]
 18098 002a 5A60     		str	r2, [r3, #4]
 18099              	.L35:
 550:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 551:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18100              		.loc 1 551 0
 18101 002c 07F10C07 		add	r7, r7, #12
 18102 0030 BD46     		mov	sp, r7
 18103 0032 80BC     		pop	{r7}
 18104 0034 7047     		bx	lr
 18105              		.cfi_endproc
 18106              	.LFE42:
 18108 0036 00BF     		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 18109              		.align	2
 18110              		.global	ADC_RegularChannelConfig
 18111              		.thumb
 18112              		.thumb_func
 18114              	ADC_RegularChannelConfig:
 18115              	.LFB43:
 552:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 553:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 554:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 555:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         rank in the sequencer and its sample time.
 556:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 557:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 558:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 559:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
 560:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 561:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 562:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 563:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 564:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 565:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 566:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 567:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 568:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 569:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 570:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 571:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 572:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 573:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 574:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
 575:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
 576:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
 577:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Rank: The rank in the regular group sequencer. This parameter must be between 1 to 16.
 578:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 579:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 580:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
 581:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles
 582:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles
 583:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles	
 584:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles	
 585:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles	
 586:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
 587:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
 588:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 589:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 590:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 591:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18116              		.loc 1 591 0
 18117              		.cfi_startproc
 18118              		@ args = 0, pretend = 0, frame = 16
 18119              		@ frame_needed = 1, uses_anonymous_args = 0
 18120              		@ link register save eliminated.
 18121 0000 80B4     		push	{r7}
 18122              	.LCFI42:
 18123              		.cfi_def_cfa_offset 4
 18124 0002 85B0     		sub	sp, sp, #20
 18125              	.LCFI43:
 18126              		.cfi_def_cfa_offset 24
 18127 0004 00AF     		add	r7, sp, #0
 18128              		.cfi_offset 7, -4
 18129              	.LCFI44:
 18130              		.cfi_def_cfa_register 7
 18131 0006 7860     		str	r0, [r7, #4]
 18132 0008 F970     		strb	r1, [r7, #3]
 18133 000a BA70     		strb	r2, [r7, #2]
 18134 000c 7B70     		strb	r3, [r7, #1]
 592:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 18135              		.loc 1 592 0
 18136 000e 4FF00003 		mov	r3, #0
 18137 0012 FB60     		str	r3, [r7, #12]
 18138 0014 4FF00003 		mov	r3, #0
 18139 0018 BB60     		str	r3, [r7, #8]
 593:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 594:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 595:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 596:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 597:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 598:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
 599:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 18140              		.loc 1 599 0
 18141 001a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18142 001c 092B     		cmp	r3, #9
 18143 001e 29D9     		bls	.L39
 600:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 601:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 602:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR1;
 18144              		.loc 1 602 0
 18145 0020 7B68     		ldr	r3, [r7, #4]
 18146 0022 DB68     		ldr	r3, [r3, #12]
 18147 0024 FB60     		str	r3, [r7, #12]
 603:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 604:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 18148              		.loc 1 604 0
 18149 0026 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18150 0028 1346     		mov	r3, r2
 18151 002a 4FEA4303 		lsl	r3, r3, #1
 18152 002e 9B18     		adds	r3, r3, r2
 18153 0030 A3F11E03 		sub	r3, r3, #30
 18154 0034 4FF00702 		mov	r2, #7
 18155 0038 02FA03F3 		lsl	r3, r2, r3
 18156 003c BB60     		str	r3, [r7, #8]
 605:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 606:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 18157              		.loc 1 606 0
 18158 003e BB68     		ldr	r3, [r7, #8]
 18159 0040 6FEA0303 		mvn	r3, r3
 18160 0044 FA68     		ldr	r2, [r7, #12]
 18161 0046 02EA0303 		and	r3, r2, r3
 18162 004a FB60     		str	r3, [r7, #12]
 607:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 608:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 18163              		.loc 1 608 0
 18164 004c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 18165 004e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18166 0050 1346     		mov	r3, r2
 18167 0052 4FEA4303 		lsl	r3, r3, #1
 18168 0056 9B18     		adds	r3, r3, r2
 18169 0058 A3F11E03 		sub	r3, r3, #30
 18170 005c 01FA03F3 		lsl	r3, r1, r3
 18171 0060 BB60     		str	r3, [r7, #8]
 609:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 610:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 18172              		.loc 1 610 0
 18173 0062 FA68     		ldr	r2, [r7, #12]
 18174 0064 BB68     		ldr	r3, [r7, #8]
 18175 0066 42EA0303 		orr	r3, r2, r3
 18176 006a FB60     		str	r3, [r7, #12]
 611:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 612:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR1 = tmpreg1;
 18177              		.loc 1 612 0
 18178 006c 7B68     		ldr	r3, [r7, #4]
 18179 006e FA68     		ldr	r2, [r7, #12]
 18180 0070 DA60     		str	r2, [r3, #12]
 18181 0072 24E0     		b	.L40
 18182              	.L39:
 613:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 614:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 615:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 616:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 617:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR2;
 18183              		.loc 1 617 0
 18184 0074 7B68     		ldr	r3, [r7, #4]
 18185 0076 1B69     		ldr	r3, [r3, #16]
 18186 0078 FB60     		str	r3, [r7, #12]
 618:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 619:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 18187              		.loc 1 619 0
 18188 007a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18189 007c 1346     		mov	r3, r2
 18190 007e 4FEA4303 		lsl	r3, r3, #1
 18191 0082 9B18     		adds	r3, r3, r2
 18192 0084 4FF00702 		mov	r2, #7
 18193 0088 02FA03F3 		lsl	r3, r2, r3
 18194 008c BB60     		str	r3, [r7, #8]
 620:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 621:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 18195              		.loc 1 621 0
 18196 008e BB68     		ldr	r3, [r7, #8]
 18197 0090 6FEA0303 		mvn	r3, r3
 18198 0094 FA68     		ldr	r2, [r7, #12]
 18199 0096 02EA0303 		and	r3, r2, r3
 18200 009a FB60     		str	r3, [r7, #12]
 622:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 623:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 18201              		.loc 1 623 0
 18202 009c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 18203 009e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18204 00a0 1346     		mov	r3, r2
 18205 00a2 4FEA4303 		lsl	r3, r3, #1
 18206 00a6 9B18     		adds	r3, r3, r2
 18207 00a8 01FA03F3 		lsl	r3, r1, r3
 18208 00ac BB60     		str	r3, [r7, #8]
 624:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 625:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 18209              		.loc 1 625 0
 18210 00ae FA68     		ldr	r2, [r7, #12]
 18211 00b0 BB68     		ldr	r3, [r7, #8]
 18212 00b2 42EA0303 		orr	r3, r2, r3
 18213 00b6 FB60     		str	r3, [r7, #12]
 626:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 627:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR2 = tmpreg1;
 18214              		.loc 1 627 0
 18215 00b8 7B68     		ldr	r3, [r7, #4]
 18216 00ba FA68     		ldr	r2, [r7, #12]
 18217 00bc 1A61     		str	r2, [r3, #16]
 18218              	.L40:
 628:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 629:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* For Rank 1 to 6 */
 630:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (Rank < 7)
 18219              		.loc 1 630 0
 18220 00be BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 18221 00c0 062B     		cmp	r3, #6
 18222 00c2 29D8     		bhi	.L41
 631:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 632:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 633:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR3;
 18223              		.loc 1 633 0
 18224 00c4 7B68     		ldr	r3, [r7, #4]
 18225 00c6 5B6B     		ldr	r3, [r3, #52]
 18226 00c8 FB60     		str	r3, [r7, #12]
 634:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 635:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 18227              		.loc 1 635 0
 18228 00ca BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 18229 00cc 03F1FF32 		add	r2, r3, #-1
 18230 00d0 1346     		mov	r3, r2
 18231 00d2 4FEA8303 		lsl	r3, r3, #2
 18232 00d6 9B18     		adds	r3, r3, r2
 18233 00d8 4FF01F02 		mov	r2, #31
 18234 00dc 02FA03F3 		lsl	r3, r2, r3
 18235 00e0 BB60     		str	r3, [r7, #8]
 636:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 637:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 18236              		.loc 1 637 0
 18237 00e2 BB68     		ldr	r3, [r7, #8]
 18238 00e4 6FEA0303 		mvn	r3, r3
 18239 00e8 FA68     		ldr	r2, [r7, #12]
 18240 00ea 02EA0303 		and	r3, r2, r3
 18241 00ee FB60     		str	r3, [r7, #12]
 638:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 639:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 18242              		.loc 1 639 0
 18243 00f0 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 18244 00f2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 18245 00f4 03F1FF32 		add	r2, r3, #-1
 18246 00f8 1346     		mov	r3, r2
 18247 00fa 4FEA8303 		lsl	r3, r3, #2
 18248 00fe 9B18     		adds	r3, r3, r2
 18249 0100 01FA03F3 		lsl	r3, r1, r3
 18250 0104 BB60     		str	r3, [r7, #8]
 640:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 641:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 18251              		.loc 1 641 0
 18252 0106 FA68     		ldr	r2, [r7, #12]
 18253 0108 BB68     		ldr	r3, [r7, #8]
 18254 010a 42EA0303 		orr	r3, r2, r3
 18255 010e FB60     		str	r3, [r7, #12]
 642:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 643:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SQR3 = tmpreg1;
 18256              		.loc 1 643 0
 18257 0110 7B68     		ldr	r3, [r7, #4]
 18258 0112 FA68     		ldr	r2, [r7, #12]
 18259 0114 5A63     		str	r2, [r3, #52]
 18260 0116 55E0     		b	.L38
 18261              	.L41:
 644:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 645:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* For Rank 7 to 12 */
 646:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else if (Rank < 13)
 18262              		.loc 1 646 0
 18263 0118 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 18264 011a 0C2B     		cmp	r3, #12
 18265 011c 29D8     		bhi	.L43
 647:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 648:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 649:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR2;
 18266              		.loc 1 649 0
 18267 011e 7B68     		ldr	r3, [r7, #4]
 18268 0120 1B6B     		ldr	r3, [r3, #48]
 18269 0122 FB60     		str	r3, [r7, #12]
 650:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 651:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 18270              		.loc 1 651 0
 18271 0124 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 18272 0126 1346     		mov	r3, r2
 18273 0128 4FEA8303 		lsl	r3, r3, #2
 18274 012c 9B18     		adds	r3, r3, r2
 18275 012e A3F12303 		sub	r3, r3, #35
 18276 0132 4FF01F02 		mov	r2, #31
 18277 0136 02FA03F3 		lsl	r3, r2, r3
 18278 013a BB60     		str	r3, [r7, #8]
 652:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 653:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 18279              		.loc 1 653 0
 18280 013c BB68     		ldr	r3, [r7, #8]
 18281 013e 6FEA0303 		mvn	r3, r3
 18282 0142 FA68     		ldr	r2, [r7, #12]
 18283 0144 02EA0303 		and	r3, r2, r3
 18284 0148 FB60     		str	r3, [r7, #12]
 654:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 655:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 18285              		.loc 1 655 0
 18286 014a F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 18287 014c BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 18288 014e 1346     		mov	r3, r2
 18289 0150 4FEA8303 		lsl	r3, r3, #2
 18290 0154 9B18     		adds	r3, r3, r2
 18291 0156 A3F12303 		sub	r3, r3, #35
 18292 015a 01FA03F3 		lsl	r3, r1, r3
 18293 015e BB60     		str	r3, [r7, #8]
 656:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 657:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 18294              		.loc 1 657 0
 18295 0160 FA68     		ldr	r2, [r7, #12]
 18296 0162 BB68     		ldr	r3, [r7, #8]
 18297 0164 42EA0303 		orr	r3, r2, r3
 18298 0168 FB60     		str	r3, [r7, #12]
 658:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 659:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SQR2 = tmpreg1;
 18299              		.loc 1 659 0
 18300 016a 7B68     		ldr	r3, [r7, #4]
 18301 016c FA68     		ldr	r2, [r7, #12]
 18302 016e 1A63     		str	r2, [r3, #48]
 18303 0170 28E0     		b	.L38
 18304              	.L43:
 660:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 661:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* For Rank 13 to 16 */
 662:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 663:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 664:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 665:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR1;
 18305              		.loc 1 665 0
 18306 0172 7B68     		ldr	r3, [r7, #4]
 18307 0174 DB6A     		ldr	r3, [r3, #44]
 18308 0176 FB60     		str	r3, [r7, #12]
 666:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 667:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 18309              		.loc 1 667 0
 18310 0178 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 18311 017a 1346     		mov	r3, r2
 18312 017c 4FEA8303 		lsl	r3, r3, #2
 18313 0180 9B18     		adds	r3, r3, r2
 18314 0182 A3F14103 		sub	r3, r3, #65
 18315 0186 4FF01F02 		mov	r2, #31
 18316 018a 02FA03F3 		lsl	r3, r2, r3
 18317 018e BB60     		str	r3, [r7, #8]
 668:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 669:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 18318              		.loc 1 669 0
 18319 0190 BB68     		ldr	r3, [r7, #8]
 18320 0192 6FEA0303 		mvn	r3, r3
 18321 0196 FA68     		ldr	r2, [r7, #12]
 18322 0198 02EA0303 		and	r3, r2, r3
 18323 019c FB60     		str	r3, [r7, #12]
 670:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 671:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 18324              		.loc 1 671 0
 18325 019e F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 18326 01a0 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 18327 01a2 1346     		mov	r3, r2
 18328 01a4 4FEA8303 		lsl	r3, r3, #2
 18329 01a8 9B18     		adds	r3, r3, r2
 18330 01aa A3F14103 		sub	r3, r3, #65
 18331 01ae 01FA03F3 		lsl	r3, r1, r3
 18332 01b2 BB60     		str	r3, [r7, #8]
 672:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 673:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 18333              		.loc 1 673 0
 18334 01b4 FA68     		ldr	r2, [r7, #12]
 18335 01b6 BB68     		ldr	r3, [r7, #8]
 18336 01b8 42EA0303 		orr	r3, r2, r3
 18337 01bc FB60     		str	r3, [r7, #12]
 674:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 675:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SQR1 = tmpreg1;
 18338              		.loc 1 675 0
 18339 01be 7B68     		ldr	r3, [r7, #4]
 18340 01c0 FA68     		ldr	r2, [r7, #12]
 18341 01c2 DA62     		str	r2, [r3, #44]
 18342              	.L38:
 676:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 677:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18343              		.loc 1 677 0
 18344 01c4 07F11407 		add	r7, r7, #20
 18345 01c8 BD46     		mov	sp, r7
 18346 01ca 80BC     		pop	{r7}
 18347 01cc 7047     		bx	lr
 18348              		.cfi_endproc
 18349              	.LFE43:
 18351 01ce 00BF     		.section	.text.ADC_ExternalTrigConvCmd,"ax",%progbits
 18352              		.align	2
 18353              		.global	ADC_ExternalTrigConvCmd
 18354              		.thumb
 18355              		.thumb_func
 18357              	ADC_ExternalTrigConvCmd:
 18358              	.LFB44:
 678:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 679:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 680:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the ADCx conversion through external trigger.
 681:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 682:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC external trigger start of conversion.
 683:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 684:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 685:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 686:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 687:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18359              		.loc 1 687 0
 18360              		.cfi_startproc
 18361              		@ args = 0, pretend = 0, frame = 8
 18362              		@ frame_needed = 1, uses_anonymous_args = 0
 18363              		@ link register save eliminated.
 18364 0000 80B4     		push	{r7}
 18365              	.LCFI45:
 18366              		.cfi_def_cfa_offset 4
 18367 0002 83B0     		sub	sp, sp, #12
 18368              	.LCFI46:
 18369              		.cfi_def_cfa_offset 16
 18370 0004 00AF     		add	r7, sp, #0
 18371              		.cfi_offset 7, -4
 18372              	.LCFI47:
 18373              		.cfi_def_cfa_register 7
 18374 0006 7860     		str	r0, [r7, #4]
 18375 0008 0B46     		mov	r3, r1
 18376 000a FB70     		strb	r3, [r7, #3]
 688:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 689:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 690:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 691:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18377              		.loc 1 691 0
 18378 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18379 000e 002B     		cmp	r3, #0
 18380 0010 06D0     		beq	.L45
 692:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 693:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion on external event */
 694:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_EXTTRIG_Set;
 18381              		.loc 1 694 0
 18382 0012 7B68     		ldr	r3, [r7, #4]
 18383 0014 9B68     		ldr	r3, [r3, #8]
 18384 0016 43F48012 		orr	r2, r3, #1048576
 18385 001a 7B68     		ldr	r3, [r7, #4]
 18386 001c 9A60     		str	r2, [r3, #8]
 18387 001e 05E0     		b	.L44
 18388              	.L45:
 695:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 696:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 697:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 698:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event */
 699:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_EXTTRIG_Reset;
 18389              		.loc 1 699 0
 18390 0020 7B68     		ldr	r3, [r7, #4]
 18391 0022 9B68     		ldr	r3, [r3, #8]
 18392 0024 23F48012 		bic	r2, r3, #1048576
 18393 0028 7B68     		ldr	r3, [r7, #4]
 18394 002a 9A60     		str	r2, [r3, #8]
 18395              	.L44:
 700:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 701:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18396              		.loc 1 701 0
 18397 002c 07F10C07 		add	r7, r7, #12
 18398 0030 BD46     		mov	sp, r7
 18399 0032 80BC     		pop	{r7}
 18400 0034 7047     		bx	lr
 18401              		.cfi_endproc
 18402              	.LFE44:
 18404 0036 00BF     		.section	.text.ADC_GetConversionValue,"ax",%progbits
 18405              		.align	2
 18406              		.global	ADC_GetConversionValue
 18407              		.thumb
 18408              		.thumb_func
 18410              	ADC_GetConversionValue:
 18411              	.LFB45:
 702:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 703:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 704:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 705:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 706:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
 707:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 708:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 709:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18412              		.loc 1 709 0
 18413              		.cfi_startproc
 18414              		@ args = 0, pretend = 0, frame = 8
 18415              		@ frame_needed = 1, uses_anonymous_args = 0
 18416              		@ link register save eliminated.
 18417 0000 80B4     		push	{r7}
 18418              	.LCFI48:
 18419              		.cfi_def_cfa_offset 4
 18420 0002 83B0     		sub	sp, sp, #12
 18421              	.LCFI49:
 18422              		.cfi_def_cfa_offset 16
 18423 0004 00AF     		add	r7, sp, #0
 18424              		.cfi_offset 7, -4
 18425              	.LCFI50:
 18426              		.cfi_def_cfa_register 7
 18427 0006 7860     		str	r0, [r7, #4]
 710:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 711:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 712:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the selected ADC conversion value */
 713:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return (uint16_t) ADCx->DR;
 18428              		.loc 1 713 0
 18429 0008 7B68     		ldr	r3, [r7, #4]
 18430 000a DB6C     		ldr	r3, [r3, #76]
 18431 000c 9BB2     		uxth	r3, r3
 714:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18432              		.loc 1 714 0
 18433 000e 1846     		mov	r0, r3
 18434 0010 07F10C07 		add	r7, r7, #12
 18435 0014 BD46     		mov	sp, r7
 18436 0016 80BC     		pop	{r7}
 18437 0018 7047     		bx	lr
 18438              		.cfi_endproc
 18439              	.LFE45:
 18441 001a 00BF     		.section	.text.ADC_GetDualModeConversionValue,"ax",%progbits
 18442              		.align	2
 18443              		.global	ADC_GetDualModeConversionValue
 18444              		.thumb
 18445              		.thumb_func
 18447              	ADC_GetDualModeConversionValue:
 18448              	.LFB46:
 715:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 716:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 717:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
 718:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
 719:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 720:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint32_t ADC_GetDualModeConversionValue(void)
 721:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18449              		.loc 1 721 0
 18450              		.cfi_startproc
 18451              		@ args = 0, pretend = 0, frame = 0
 18452              		@ frame_needed = 1, uses_anonymous_args = 0
 18453              		@ link register save eliminated.
 18454 0000 80B4     		push	{r7}
 18455              	.LCFI51:
 18456              		.cfi_def_cfa_offset 4
 18457 0002 00AF     		add	r7, sp, #0
 18458              		.cfi_offset 7, -4
 18459              	.LCFI52:
 18460              		.cfi_def_cfa_register 7
 722:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the dual mode conversion value */
 723:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return (*(__IO uint32_t *) DR_ADDRESS);
 18461              		.loc 1 723 0
 18462 0004 024B     		ldr	r3, .L49
 18463 0006 1B68     		ldr	r3, [r3, #0]
 724:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18464              		.loc 1 724 0
 18465 0008 1846     		mov	r0, r3
 18466 000a BD46     		mov	sp, r7
 18467 000c 80BC     		pop	{r7}
 18468 000e 7047     		bx	lr
 18469              	.L50:
 18470              		.align	2
 18471              	.L49:
 18472 0010 4C240140 		.word	1073816652
 18473              		.cfi_endproc
 18474              	.LFE46:
 18476              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 18477              		.align	2
 18478              		.global	ADC_AutoInjectedConvCmd
 18479              		.thumb
 18480              		.thumb_func
 18482              	ADC_AutoInjectedConvCmd:
 18483              	.LFB47:
 725:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 726:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 727:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group
 728:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         conversion after regular one.
 729:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 730:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
 731:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 732:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 733:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 734:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 735:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18484              		.loc 1 735 0
 18485              		.cfi_startproc
 18486              		@ args = 0, pretend = 0, frame = 8
 18487              		@ frame_needed = 1, uses_anonymous_args = 0
 18488              		@ link register save eliminated.
 18489 0000 80B4     		push	{r7}
 18490              	.LCFI53:
 18491              		.cfi_def_cfa_offset 4
 18492 0002 83B0     		sub	sp, sp, #12
 18493              	.LCFI54:
 18494              		.cfi_def_cfa_offset 16
 18495 0004 00AF     		add	r7, sp, #0
 18496              		.cfi_offset 7, -4
 18497              	.LCFI55:
 18498              		.cfi_def_cfa_register 7
 18499 0006 7860     		str	r0, [r7, #4]
 18500 0008 0B46     		mov	r3, r1
 18501 000a FB70     		strb	r3, [r7, #3]
 736:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 737:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 738:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 739:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18502              		.loc 1 739 0
 18503 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18504 000e 002B     		cmp	r3, #0
 18505 0010 06D0     		beq	.L52
 740:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 741:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
 742:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_JAUTO_Set;
 18506              		.loc 1 742 0
 18507 0012 7B68     		ldr	r3, [r7, #4]
 18508 0014 5B68     		ldr	r3, [r3, #4]
 18509 0016 43F48062 		orr	r2, r3, #1024
 18510 001a 7B68     		ldr	r3, [r7, #4]
 18511 001c 5A60     		str	r2, [r3, #4]
 18512 001e 05E0     		b	.L51
 18513              	.L52:
 743:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 744:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 745:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 746:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
 747:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_JAUTO_Reset;
 18514              		.loc 1 747 0
 18515 0020 7B68     		ldr	r3, [r7, #4]
 18516 0022 5B68     		ldr	r3, [r3, #4]
 18517 0024 23F48062 		bic	r2, r3, #1024
 18518 0028 7B68     		ldr	r3, [r7, #4]
 18519 002a 5A60     		str	r2, [r3, #4]
 18520              	.L51:
 748:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 749:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18521              		.loc 1 749 0
 18522 002c 07F10C07 		add	r7, r7, #12
 18523 0030 BD46     		mov	sp, r7
 18524 0032 80BC     		pop	{r7}
 18525 0034 7047     		bx	lr
 18526              		.cfi_endproc
 18527              	.LFE47:
 18529 0036 00BF     		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 18530              		.align	2
 18531              		.global	ADC_InjectedDiscModeCmd
 18532              		.thumb
 18533              		.thumb_func
 18535              	ADC_InjectedDiscModeCmd:
 18536              	.LFB48:
 750:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 751:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 752:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group
 753:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         channel for the specified ADC
 754:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 755:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode
 756:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         on injected group channel.
 757:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 758:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 759:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 760:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 761:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18537              		.loc 1 761 0
 18538              		.cfi_startproc
 18539              		@ args = 0, pretend = 0, frame = 8
 18540              		@ frame_needed = 1, uses_anonymous_args = 0
 18541              		@ link register save eliminated.
 18542 0000 80B4     		push	{r7}
 18543              	.LCFI56:
 18544              		.cfi_def_cfa_offset 4
 18545 0002 83B0     		sub	sp, sp, #12
 18546              	.LCFI57:
 18547              		.cfi_def_cfa_offset 16
 18548 0004 00AF     		add	r7, sp, #0
 18549              		.cfi_offset 7, -4
 18550              	.LCFI58:
 18551              		.cfi_def_cfa_register 7
 18552 0006 7860     		str	r0, [r7, #4]
 18553 0008 0B46     		mov	r3, r1
 18554 000a FB70     		strb	r3, [r7, #3]
 762:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 763:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 764:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 765:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18555              		.loc 1 765 0
 18556 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18557 000e 002B     		cmp	r3, #0
 18558 0010 06D0     		beq	.L55
 766:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 767:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
 768:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_JDISCEN_Set;
 18559              		.loc 1 768 0
 18560 0012 7B68     		ldr	r3, [r7, #4]
 18561 0014 5B68     		ldr	r3, [r3, #4]
 18562 0016 43F48052 		orr	r2, r3, #4096
 18563 001a 7B68     		ldr	r3, [r7, #4]
 18564 001c 5A60     		str	r2, [r3, #4]
 18565 001e 05E0     		b	.L54
 18566              	.L55:
 769:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 770:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 771:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 772:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
 773:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_JDISCEN_Reset;
 18567              		.loc 1 773 0
 18568 0020 7B68     		ldr	r3, [r7, #4]
 18569 0022 5B68     		ldr	r3, [r3, #4]
 18570 0024 23F48052 		bic	r2, r3, #4096
 18571 0028 7B68     		ldr	r3, [r7, #4]
 18572 002a 5A60     		str	r2, [r3, #4]
 18573              	.L54:
 774:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 775:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18574              		.loc 1 775 0
 18575 002c 07F10C07 		add	r7, r7, #12
 18576 0030 BD46     		mov	sp, r7
 18577 0032 80BC     		pop	{r7}
 18578 0034 7047     		bx	lr
 18579              		.cfi_endproc
 18580              	.LFE48:
 18582 0036 00BF     		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 18583              		.align	2
 18584              		.global	ADC_ExternalTrigInjectedConvConfig
 18585              		.thumb
 18586              		.thumb_func
 18588              	ADC_ExternalTrigInjectedConvConfig:
 18589              	.LFB49:
 776:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 777:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 778:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
 779:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 780:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion. 
 781:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 782:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected (for ADC1, ADC2 and ADC3
 783:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected (for ADC1, ADC2 and
 784:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected (for ADC1 and ADC2)
 785:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected (for ADC1 and ADC2)
 786:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected (for ADC1 and ADC2)
 787:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected (for ADC1 and ADC2)
 788:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4: External interrupt line 15 or Timer8
 789:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *                                                       capture compare4 event selected (for ADC1
 790:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected (for ADC3 only)
 791:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected (for ADC3 only)    
 792:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected (for ADC3 only)
 793:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected (for ADC3 only)         
 794:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected (for ADC3 only)    
 795:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
 796:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *                                          by external trigger (for ADC1, ADC2 and ADC3)
 797:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 798:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 799:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
 800:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18590              		.loc 1 800 0
 18591              		.cfi_startproc
 18592              		@ args = 0, pretend = 0, frame = 16
 18593              		@ frame_needed = 1, uses_anonymous_args = 0
 18594              		@ link register save eliminated.
 18595 0000 80B4     		push	{r7}
 18596              	.LCFI59:
 18597              		.cfi_def_cfa_offset 4
 18598 0002 85B0     		sub	sp, sp, #20
 18599              	.LCFI60:
 18600              		.cfi_def_cfa_offset 24
 18601 0004 00AF     		add	r7, sp, #0
 18602              		.cfi_offset 7, -4
 18603              	.LCFI61:
 18604              		.cfi_def_cfa_register 7
 18605 0006 7860     		str	r0, [r7, #4]
 18606 0008 3960     		str	r1, [r7, #0]
 801:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 18607              		.loc 1 801 0
 18608 000a 4FF00003 		mov	r3, #0
 18609 000e FB60     		str	r3, [r7, #12]
 802:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 803:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 804:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
 805:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
 806:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR2;
 18610              		.loc 1 806 0
 18611 0010 7B68     		ldr	r3, [r7, #4]
 18612 0012 9B68     		ldr	r3, [r3, #8]
 18613 0014 FB60     		str	r3, [r7, #12]
 807:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old external event selection for injected group */
 808:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg &= CR2_JEXTSEL_Reset;
 18614              		.loc 1 808 0
 18615 0016 FB68     		ldr	r3, [r7, #12]
 18616 0018 23F4E043 		bic	r3, r3, #28672
 18617 001c FB60     		str	r3, [r7, #12]
 809:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the external event selection for injected group */
 810:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 18618              		.loc 1 810 0
 18619 001e FA68     		ldr	r2, [r7, #12]
 18620 0020 3B68     		ldr	r3, [r7, #0]
 18621 0022 42EA0303 		orr	r3, r2, r3
 18622 0026 FB60     		str	r3, [r7, #12]
 811:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
 812:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 = tmpreg;
 18623              		.loc 1 812 0
 18624 0028 7B68     		ldr	r3, [r7, #4]
 18625 002a FA68     		ldr	r2, [r7, #12]
 18626 002c 9A60     		str	r2, [r3, #8]
 813:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18627              		.loc 1 813 0
 18628 002e 07F11407 		add	r7, r7, #20
 18629 0032 BD46     		mov	sp, r7
 18630 0034 80BC     		pop	{r7}
 18631 0036 7047     		bx	lr
 18632              		.cfi_endproc
 18633              	.LFE49:
 18635              		.section	.text.ADC_ExternalTrigInjectedConvCmd,"ax",%progbits
 18636              		.align	2
 18637              		.global	ADC_ExternalTrigInjectedConvCmd
 18638              		.thumb
 18639              		.thumb_func
 18641              	ADC_ExternalTrigInjectedConvCmd:
 18642              	.LFB50:
 814:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 815:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 816:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the ADCx injected channels conversion through
 817:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         external trigger
 818:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 819:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC external trigger start of
 820:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         injected conversion.
 821:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 822:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 823:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 824:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 825:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18643              		.loc 1 825 0
 18644              		.cfi_startproc
 18645              		@ args = 0, pretend = 0, frame = 8
 18646              		@ frame_needed = 1, uses_anonymous_args = 0
 18647              		@ link register save eliminated.
 18648 0000 80B4     		push	{r7}
 18649              	.LCFI62:
 18650              		.cfi_def_cfa_offset 4
 18651 0002 83B0     		sub	sp, sp, #12
 18652              	.LCFI63:
 18653              		.cfi_def_cfa_offset 16
 18654 0004 00AF     		add	r7, sp, #0
 18655              		.cfi_offset 7, -4
 18656              	.LCFI64:
 18657              		.cfi_def_cfa_register 7
 18658 0006 7860     		str	r0, [r7, #4]
 18659 0008 0B46     		mov	r3, r1
 18660 000a FB70     		strb	r3, [r7, #3]
 826:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 827:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 828:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 829:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18661              		.loc 1 829 0
 18662 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18663 000e 002B     		cmp	r3, #0
 18664 0010 06D0     		beq	.L59
 830:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 831:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC external event selection for injected group */
 832:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_JEXTTRIG_Set;
 18665              		.loc 1 832 0
 18666 0012 7B68     		ldr	r3, [r7, #4]
 18667 0014 9B68     		ldr	r3, [r3, #8]
 18668 0016 43F40042 		orr	r2, r3, #32768
 18669 001a 7B68     		ldr	r3, [r7, #4]
 18670 001c 9A60     		str	r2, [r3, #8]
 18671 001e 05E0     		b	.L58
 18672              	.L59:
 833:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 834:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 835:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 836:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC external event selection for injected group */
 837:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 18673              		.loc 1 837 0
 18674 0020 7B68     		ldr	r3, [r7, #4]
 18675 0022 9B68     		ldr	r3, [r3, #8]
 18676 0024 23F40042 		bic	r2, r3, #32768
 18677 0028 7B68     		ldr	r3, [r7, #4]
 18678 002a 9A60     		str	r2, [r3, #8]
 18679              	.L58:
 838:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 839:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18680              		.loc 1 839 0
 18681 002c 07F10C07 		add	r7, r7, #12
 18682 0030 BD46     		mov	sp, r7
 18683 0032 80BC     		pop	{r7}
 18684 0034 7047     		bx	lr
 18685              		.cfi_endproc
 18686              	.LFE50:
 18688 0036 00BF     		.section	.text.ADC_SoftwareStartInjectedConvCmd,"ax",%progbits
 18689              		.align	2
 18690              		.global	ADC_SoftwareStartInjectedConvCmd
 18691              		.thumb
 18692              		.thumb_func
 18694              	ADC_SoftwareStartInjectedConvCmd:
 18695              	.LFB51:
 840:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 841:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 842:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC start of the injected 
 843:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         channels conversion.
 844:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 845:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC software start injected conversion.
 846:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 847:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 848:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 849:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 850:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18696              		.loc 1 850 0
 18697              		.cfi_startproc
 18698              		@ args = 0, pretend = 0, frame = 8
 18699              		@ frame_needed = 1, uses_anonymous_args = 0
 18700              		@ link register save eliminated.
 18701 0000 80B4     		push	{r7}
 18702              	.LCFI65:
 18703              		.cfi_def_cfa_offset 4
 18704 0002 83B0     		sub	sp, sp, #12
 18705              	.LCFI66:
 18706              		.cfi_def_cfa_offset 16
 18707 0004 00AF     		add	r7, sp, #0
 18708              		.cfi_offset 7, -4
 18709              	.LCFI67:
 18710              		.cfi_def_cfa_register 7
 18711 0006 7860     		str	r0, [r7, #4]
 18712 0008 0B46     		mov	r3, r1
 18713 000a FB70     		strb	r3, [r7, #3]
 851:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 852:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 853:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 854:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18714              		.loc 1 854 0
 18715 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18716 000e 002B     		cmp	r3, #0
 18717 0010 06D0     		beq	.L62
 855:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 856:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion for injected group on external event and start the select
 857:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC injected conversion */
 858:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 18718              		.loc 1 858 0
 18719 0012 7B68     		ldr	r3, [r7, #4]
 18720 0014 9B68     		ldr	r3, [r3, #8]
 18721 0016 43F40212 		orr	r2, r3, #2129920
 18722 001a 7B68     		ldr	r3, [r7, #4]
 18723 001c 9A60     		str	r2, [r3, #8]
 18724 001e 05E0     		b	.L61
 18725              	.L62:
 859:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 860:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 861:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 862:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event for injected group and stop the select
 863:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC injected conversion */
 864:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 18726              		.loc 1 864 0
 18727 0020 7B68     		ldr	r3, [r7, #4]
 18728 0022 9B68     		ldr	r3, [r3, #8]
 18729 0024 23F40212 		bic	r2, r3, #2129920
 18730 0028 7B68     		ldr	r3, [r7, #4]
 18731 002a 9A60     		str	r2, [r3, #8]
 18732              	.L61:
 865:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 866:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18733              		.loc 1 866 0
 18734 002c 07F10C07 		add	r7, r7, #12
 18735 0030 BD46     		mov	sp, r7
 18736 0032 80BC     		pop	{r7}
 18737 0034 7047     		bx	lr
 18738              		.cfi_endproc
 18739              	.LFE51:
 18741 0036 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 18742              		.align	2
 18743              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 18744              		.thumb
 18745              		.thumb_func
 18747              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 18748              	.LFB52:
 867:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 868:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 869:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
 870:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 871:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
 872:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 873:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
 874:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18749              		.loc 1 874 0
 18750              		.cfi_startproc
 18751              		@ args = 0, pretend = 0, frame = 16
 18752              		@ frame_needed = 1, uses_anonymous_args = 0
 18753              		@ link register save eliminated.
 18754 0000 80B4     		push	{r7}
 18755              	.LCFI68:
 18756              		.cfi_def_cfa_offset 4
 18757 0002 85B0     		sub	sp, sp, #20
 18758              	.LCFI69:
 18759              		.cfi_def_cfa_offset 24
 18760 0004 00AF     		add	r7, sp, #0
 18761              		.cfi_offset 7, -4
 18762              	.LCFI70:
 18763              		.cfi_def_cfa_register 7
 18764 0006 7860     		str	r0, [r7, #4]
 875:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 18765              		.loc 1 875 0
 18766 0008 4FF00003 		mov	r3, #0
 18767 000c FB73     		strb	r3, [r7, #15]
 876:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 877:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 878:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of JSWSTART bit */
 879:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
 18768              		.loc 1 879 0
 18769 000e 7B68     		ldr	r3, [r7, #4]
 18770 0010 9B68     		ldr	r3, [r3, #8]
 18771 0012 03F40013 		and	r3, r3, #2097152
 18772 0016 002B     		cmp	r3, #0
 18773 0018 03D0     		beq	.L65
 880:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 881:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* JSWSTART bit is set */
 882:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 18774              		.loc 1 882 0
 18775 001a 4FF00103 		mov	r3, #1
 18776 001e FB73     		strb	r3, [r7, #15]
 18777 0020 02E0     		b	.L66
 18778              	.L65:
 883:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 884:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 885:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 886:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* JSWSTART bit is reset */
 887:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 18779              		.loc 1 887 0
 18780 0022 4FF00003 		mov	r3, #0
 18781 0026 FB73     		strb	r3, [r7, #15]
 18782              	.L66:
 888:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 889:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the JSWSTART bit status */
 890:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 18783              		.loc 1 890 0
 18784 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 891:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18785              		.loc 1 891 0
 18786 002a 1846     		mov	r0, r3
 18787 002c 07F11407 		add	r7, r7, #20
 18788 0030 BD46     		mov	sp, r7
 18789 0032 80BC     		pop	{r7}
 18790 0034 7047     		bx	lr
 18791              		.cfi_endproc
 18792              	.LFE52:
 18794 0036 00BF     		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 18795              		.align	2
 18796              		.global	ADC_InjectedChannelConfig
 18797              		.thumb
 18798              		.thumb_func
 18800              	ADC_InjectedChannelConfig:
 18801              	.LFB53:
 892:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 893:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 894:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
 895:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         rank in the sequencer and its sample time.
 896:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 897:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 898:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 899:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
 900:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 901:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 902:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 903:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 904:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 905:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 906:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 907:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 908:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 909:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 910:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 911:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 912:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 913:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 914:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
 915:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
 916:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
 917:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Rank: The rank in the injected group sequencer. This parameter must be between 1 and 4.
 918:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 919:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 920:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
 921:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles
 922:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles
 923:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles	
 924:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles	
 925:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles	
 926:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
 927:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
 928:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 929:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 930:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
 931:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18802              		.loc 1 931 0
 18803              		.cfi_startproc
 18804              		@ args = 0, pretend = 0, frame = 24
 18805              		@ frame_needed = 1, uses_anonymous_args = 0
 18806              		@ link register save eliminated.
 18807 0000 80B4     		push	{r7}
 18808              	.LCFI71:
 18809              		.cfi_def_cfa_offset 4
 18810 0002 87B0     		sub	sp, sp, #28
 18811              	.LCFI72:
 18812              		.cfi_def_cfa_offset 32
 18813 0004 00AF     		add	r7, sp, #0
 18814              		.cfi_offset 7, -4
 18815              	.LCFI73:
 18816              		.cfi_def_cfa_register 7
 18817 0006 7860     		str	r0, [r7, #4]
 18818 0008 F970     		strb	r1, [r7, #3]
 18819 000a BA70     		strb	r2, [r7, #2]
 18820 000c 7B70     		strb	r3, [r7, #1]
 932:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 18821              		.loc 1 932 0
 18822 000e 4FF00003 		mov	r3, #0
 18823 0012 7B61     		str	r3, [r7, #20]
 18824 0014 4FF00003 		mov	r3, #0
 18825 0018 3B61     		str	r3, [r7, #16]
 18826 001a 4FF00003 		mov	r3, #0
 18827 001e FB60     		str	r3, [r7, #12]
 933:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 934:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 935:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 936:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
 937:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 938:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
 939:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 18828              		.loc 1 939 0
 18829 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18830 0022 092B     		cmp	r3, #9
 18831 0024 29D9     		bls	.L68
 940:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 941:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 942:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR1;
 18832              		.loc 1 942 0
 18833 0026 7B68     		ldr	r3, [r7, #4]
 18834 0028 DB68     		ldr	r3, [r3, #12]
 18835 002a 7B61     		str	r3, [r7, #20]
 943:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 944:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 18836              		.loc 1 944 0
 18837 002c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18838 002e 1346     		mov	r3, r2
 18839 0030 4FEA4303 		lsl	r3, r3, #1
 18840 0034 9B18     		adds	r3, r3, r2
 18841 0036 A3F11E03 		sub	r3, r3, #30
 18842 003a 4FF00702 		mov	r2, #7
 18843 003e 02FA03F3 		lsl	r3, r2, r3
 18844 0042 3B61     		str	r3, [r7, #16]
 945:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 946:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 18845              		.loc 1 946 0
 18846 0044 3B69     		ldr	r3, [r7, #16]
 18847 0046 6FEA0303 		mvn	r3, r3
 18848 004a 7A69     		ldr	r2, [r7, #20]
 18849 004c 02EA0303 		and	r3, r2, r3
 18850 0050 7B61     		str	r3, [r7, #20]
 947:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 948:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 18851              		.loc 1 948 0
 18852 0052 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 18853 0054 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18854 0056 1346     		mov	r3, r2
 18855 0058 4FEA4303 		lsl	r3, r3, #1
 18856 005c 9B18     		adds	r3, r3, r2
 18857 005e A3F11E03 		sub	r3, r3, #30
 18858 0062 01FA03F3 		lsl	r3, r1, r3
 18859 0066 3B61     		str	r3, [r7, #16]
 949:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 950:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 18860              		.loc 1 950 0
 18861 0068 7A69     		ldr	r2, [r7, #20]
 18862 006a 3B69     		ldr	r3, [r7, #16]
 18863 006c 42EA0303 		orr	r3, r2, r3
 18864 0070 7B61     		str	r3, [r7, #20]
 951:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 952:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR1 = tmpreg1;
 18865              		.loc 1 952 0
 18866 0072 7B68     		ldr	r3, [r7, #4]
 18867 0074 7A69     		ldr	r2, [r7, #20]
 18868 0076 DA60     		str	r2, [r3, #12]
 18869 0078 24E0     		b	.L69
 18870              	.L68:
 953:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 954:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 955:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 956:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 957:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR2;
 18871              		.loc 1 957 0
 18872 007a 7B68     		ldr	r3, [r7, #4]
 18873 007c 1B69     		ldr	r3, [r3, #16]
 18874 007e 7B61     		str	r3, [r7, #20]
 958:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 959:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 18875              		.loc 1 959 0
 18876 0080 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18877 0082 1346     		mov	r3, r2
 18878 0084 4FEA4303 		lsl	r3, r3, #1
 18879 0088 9B18     		adds	r3, r3, r2
 18880 008a 4FF00702 		mov	r2, #7
 18881 008e 02FA03F3 		lsl	r3, r2, r3
 18882 0092 3B61     		str	r3, [r7, #16]
 960:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 961:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 18883              		.loc 1 961 0
 18884 0094 3B69     		ldr	r3, [r7, #16]
 18885 0096 6FEA0303 		mvn	r3, r3
 18886 009a 7A69     		ldr	r2, [r7, #20]
 18887 009c 02EA0303 		and	r3, r2, r3
 18888 00a0 7B61     		str	r3, [r7, #20]
 962:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 963:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 18889              		.loc 1 963 0
 18890 00a2 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 18891 00a4 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18892 00a6 1346     		mov	r3, r2
 18893 00a8 4FEA4303 		lsl	r3, r3, #1
 18894 00ac 9B18     		adds	r3, r3, r2
 18895 00ae 01FA03F3 		lsl	r3, r1, r3
 18896 00b2 3B61     		str	r3, [r7, #16]
 964:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 965:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 18897              		.loc 1 965 0
 18898 00b4 7A69     		ldr	r2, [r7, #20]
 18899 00b6 3B69     		ldr	r3, [r7, #16]
 18900 00b8 42EA0303 		orr	r3, r2, r3
 18901 00bc 7B61     		str	r3, [r7, #20]
 966:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 967:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR2 = tmpreg1;
 18902              		.loc 1 967 0
 18903 00be 7B68     		ldr	r3, [r7, #4]
 18904 00c0 7A69     		ldr	r2, [r7, #20]
 18905 00c2 1A61     		str	r2, [r3, #16]
 18906              	.L69:
 968:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 969:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Rank configuration */
 970:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
 971:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->JSQR;
 18907              		.loc 1 971 0
 18908 00c4 7B68     		ldr	r3, [r7, #4]
 18909 00c6 9B6B     		ldr	r3, [r3, #56]
 18910 00c8 7B61     		str	r3, [r7, #20]
 972:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get JL value: Number = JL+1 */
 973:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
 18911              		.loc 1 973 0
 18912 00ca 7B69     		ldr	r3, [r7, #20]
 18913 00cc 03F44013 		and	r3, r3, #3145728
 18914 00d0 4FEA1353 		lsr	r3, r3, #20
 18915 00d4 FB60     		str	r3, [r7, #12]
 974:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
 975:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 18916              		.loc 1 975 0
 18917 00d6 FB68     		ldr	r3, [r7, #12]
 18918 00d8 DBB2     		uxtb	r3, r3
 18919 00da 6FEA0303 		mvn	r3, r3
 18920 00de DAB2     		uxtb	r2, r3
 18921 00e0 BB78     		ldrb	r3, [r7, #2]
 18922 00e2 D318     		adds	r3, r2, r3
 18923 00e4 DBB2     		uxtb	r3, r3
 18924 00e6 03F10303 		add	r3, r3, #3
 18925 00ea DBB2     		uxtb	r3, r3
 18926 00ec 1A46     		mov	r2, r3
 18927 00ee 1346     		mov	r3, r2
 18928 00f0 4FEA8303 		lsl	r3, r3, #2
 18929 00f4 9B18     		adds	r3, r3, r2
 18930 00f6 4FF01F02 		mov	r2, #31
 18931 00fa 02FA03F3 		lsl	r3, r2, r3
 18932 00fe 3B61     		str	r3, [r7, #16]
 976:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old JSQx bits for the selected rank */
 977:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= ~tmpreg2;
 18933              		.loc 1 977 0
 18934 0100 3B69     		ldr	r3, [r7, #16]
 18935 0102 6FEA0303 		mvn	r3, r3
 18936 0106 7A69     		ldr	r2, [r7, #20]
 18937 0108 02EA0303 		and	r3, r2, r3
 18938 010c 7B61     		str	r3, [r7, #20]
 978:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
 979:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 18939              		.loc 1 979 0
 18940 010e F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 18941 0110 FB68     		ldr	r3, [r7, #12]
 18942 0112 DBB2     		uxtb	r3, r3
 18943 0114 6FEA0303 		mvn	r3, r3
 18944 0118 DAB2     		uxtb	r2, r3
 18945 011a BB78     		ldrb	r3, [r7, #2]
 18946 011c D318     		adds	r3, r2, r3
 18947 011e DBB2     		uxtb	r3, r3
 18948 0120 03F10303 		add	r3, r3, #3
 18949 0124 DBB2     		uxtb	r3, r3
 18950 0126 1A46     		mov	r2, r3
 18951 0128 1346     		mov	r3, r2
 18952 012a 4FEA8303 		lsl	r3, r3, #2
 18953 012e 9B18     		adds	r3, r3, r2
 18954 0130 01FA03F3 		lsl	r3, r1, r3
 18955 0134 3B61     		str	r3, [r7, #16]
 980:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the JSQx bits for the selected rank */
 981:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2;
 18956              		.loc 1 981 0
 18957 0136 7A69     		ldr	r2, [r7, #20]
 18958 0138 3B69     		ldr	r3, [r7, #16]
 18959 013a 42EA0303 		orr	r3, r2, r3
 18960 013e 7B61     		str	r3, [r7, #20]
 982:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
 983:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->JSQR = tmpreg1;
 18961              		.loc 1 983 0
 18962 0140 7B68     		ldr	r3, [r7, #4]
 18963 0142 7A69     		ldr	r2, [r7, #20]
 18964 0144 9A63     		str	r2, [r3, #56]
 984:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18965              		.loc 1 984 0
 18966 0146 07F11C07 		add	r7, r7, #28
 18967 014a BD46     		mov	sp, r7
 18968 014c 80BC     		pop	{r7}
 18969 014e 7047     		bx	lr
 18970              		.cfi_endproc
 18971              	.LFE53:
 18973              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 18974              		.align	2
 18975              		.global	ADC_InjectedSequencerLengthConfig
 18976              		.thumb
 18977              		.thumb_func
 18979              	ADC_InjectedSequencerLengthConfig:
 18980              	.LFB54:
 985:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 986:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 987:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the sequencer length for injected channels
 988:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 989:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Length: The sequencer length. 
 990:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a number between 1 to 4.
 991:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 992:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 993:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
 994:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18981              		.loc 1 994 0
 18982              		.cfi_startproc
 18983              		@ args = 0, pretend = 0, frame = 16
 18984              		@ frame_needed = 1, uses_anonymous_args = 0
 18985              		@ link register save eliminated.
 18986 0000 80B4     		push	{r7}
 18987              	.LCFI74:
 18988              		.cfi_def_cfa_offset 4
 18989 0002 85B0     		sub	sp, sp, #20
 18990              	.LCFI75:
 18991              		.cfi_def_cfa_offset 24
 18992 0004 00AF     		add	r7, sp, #0
 18993              		.cfi_offset 7, -4
 18994              	.LCFI76:
 18995              		.cfi_def_cfa_register 7
 18996 0006 7860     		str	r0, [r7, #4]
 18997 0008 0B46     		mov	r3, r1
 18998 000a FB70     		strb	r3, [r7, #3]
 995:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 18999              		.loc 1 995 0
 19000 000c 4FF00003 		mov	r3, #0
 19001 0010 FB60     		str	r3, [r7, #12]
 996:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg2 = 0;
 19002              		.loc 1 996 0
 19003 0012 4FF00003 		mov	r3, #0
 19004 0016 BB60     		str	r3, [r7, #8]
 997:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 998:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 999:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1000:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1001:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
1002:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->JSQR;
 19005              		.loc 1 1002 0
 19006 0018 7B68     		ldr	r3, [r7, #4]
 19007 001a 9B6B     		ldr	r3, [r3, #56]
 19008 001c FB60     		str	r3, [r7, #12]
1003:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old injected sequnence lenght JL bits */
1004:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= JSQR_JL_Reset;
 19009              		.loc 1 1004 0
 19010 001e FB68     		ldr	r3, [r7, #12]
 19011 0020 23F44013 		bic	r3, r3, #3145728
 19012 0024 FB60     		str	r3, [r7, #12]
1005:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the injected sequnence lenght JL bits */
1006:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = Length - 1; 
 19013              		.loc 1 1006 0
 19014 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19015 0028 03F1FF33 		add	r3, r3, #-1
 19016 002c BB60     		str	r3, [r7, #8]
1007:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 19017              		.loc 1 1007 0
 19018 002e BB68     		ldr	r3, [r7, #8]
 19019 0030 4FEA0353 		lsl	r3, r3, #20
 19020 0034 FA68     		ldr	r2, [r7, #12]
 19021 0036 42EA0303 		orr	r3, r2, r3
 19022 003a FB60     		str	r3, [r7, #12]
1008:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
1009:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->JSQR = tmpreg1;
 19023              		.loc 1 1009 0
 19024 003c 7B68     		ldr	r3, [r7, #4]
 19025 003e FA68     		ldr	r2, [r7, #12]
 19026 0040 9A63     		str	r2, [r3, #56]
1010:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19027              		.loc 1 1010 0
 19028 0042 07F11407 		add	r7, r7, #20
 19029 0046 BD46     		mov	sp, r7
 19030 0048 80BC     		pop	{r7}
 19031 004a 7047     		bx	lr
 19032              		.cfi_endproc
 19033              	.LFE54:
 19035              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 19036              		.align	2
 19037              		.global	ADC_SetInjectedOffset
 19038              		.thumb
 19039              		.thumb_func
 19041              	ADC_SetInjectedOffset:
 19042              	.LFB55:
1011:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1012:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1013:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Set the injected channels conversion value offset
1014:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1015:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1016:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1017:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_1: Injected Channel1 selected
1018:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_2: Injected Channel2 selected
1019:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
1020:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
1021:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1022:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1023:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1024:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1025:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1026:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19043              		.loc 1 1026 0
 19044              		.cfi_startproc
 19045              		@ args = 0, pretend = 0, frame = 16
 19046              		@ frame_needed = 1, uses_anonymous_args = 0
 19047              		@ link register save eliminated.
 19048 0000 80B4     		push	{r7}
 19049              	.LCFI77:
 19050              		.cfi_def_cfa_offset 4
 19051 0002 85B0     		sub	sp, sp, #20
 19052              	.LCFI78:
 19053              		.cfi_def_cfa_offset 24
 19054 0004 00AF     		add	r7, sp, #0
 19055              		.cfi_offset 7, -4
 19056              	.LCFI79:
 19057              		.cfi_def_cfa_register 7
 19058 0006 7860     		str	r0, [r7, #4]
 19059 0008 1346     		mov	r3, r2
 19060 000a 0A46     		mov	r2, r1
 19061 000c FA70     		strb	r2, [r7, #3]
 19062 000e 3B80     		strh	r3, [r7, #0]	@ movhi
1027:../StdPeripheralDriver/src/stm32f10x_adc.c ****   __IO uint32_t tmp = 0;
 19063              		.loc 1 1027 0
 19064 0010 4FF00003 		mov	r3, #0
 19065 0014 FB60     		str	r3, [r7, #12]
1028:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1029:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1030:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1031:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1032:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));  
1033:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1034:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp = (uint32_t)ADCx;
 19066              		.loc 1 1034 0
 19067 0016 7B68     		ldr	r3, [r7, #4]
 19068 0018 FB60     		str	r3, [r7, #12]
1035:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp += ADC_InjectedChannel;
 19069              		.loc 1 1035 0
 19070 001a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19071 001c FB68     		ldr	r3, [r7, #12]
 19072 001e D318     		adds	r3, r2, r3
 19073 0020 FB60     		str	r3, [r7, #12]
1036:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1037:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the selected injected channel data offset */
1038:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *(__IO uint32_t *) tmp = (uint32_t)Offset;
 19074              		.loc 1 1038 0
 19075 0022 FB68     		ldr	r3, [r7, #12]
 19076 0024 3A88     		ldrh	r2, [r7, #0]
 19077 0026 1A60     		str	r2, [r3, #0]
1039:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19078              		.loc 1 1039 0
 19079 0028 07F11407 		add	r7, r7, #20
 19080 002c BD46     		mov	sp, r7
 19081 002e 80BC     		pop	{r7}
 19082 0030 7047     		bx	lr
 19083              		.cfi_endproc
 19084              	.LFE55:
 19086 0032 00BF     		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 19087              		.align	2
 19088              		.global	ADC_GetInjectedConversionValue
 19089              		.thumb
 19090              		.thumb_func
 19092              	ADC_GetInjectedConversionValue:
 19093              	.LFB56:
1040:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1041:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1042:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1043:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1045:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1046:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_1: Injected Channel1 selected
1047:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_2: Injected Channel2 selected
1048:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
1049:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
1050:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
1051:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1052:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1053:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19094              		.loc 1 1053 0
 19095              		.cfi_startproc
 19096              		@ args = 0, pretend = 0, frame = 16
 19097              		@ frame_needed = 1, uses_anonymous_args = 0
 19098              		@ link register save eliminated.
 19099 0000 80B4     		push	{r7}
 19100              	.LCFI80:
 19101              		.cfi_def_cfa_offset 4
 19102 0002 85B0     		sub	sp, sp, #20
 19103              	.LCFI81:
 19104              		.cfi_def_cfa_offset 24
 19105 0004 00AF     		add	r7, sp, #0
 19106              		.cfi_offset 7, -4
 19107              	.LCFI82:
 19108              		.cfi_def_cfa_register 7
 19109 0006 7860     		str	r0, [r7, #4]
 19110 0008 0B46     		mov	r3, r1
 19111 000a FB70     		strb	r3, [r7, #3]
1054:../StdPeripheralDriver/src/stm32f10x_adc.c ****   __IO uint32_t tmp = 0;
 19112              		.loc 1 1054 0
 19113 000c 4FF00003 		mov	r3, #0
 19114 0010 FB60     		str	r3, [r7, #12]
1055:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1056:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1057:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1058:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1059:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1060:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp = (uint32_t)ADCx;
 19115              		.loc 1 1060 0
 19116 0012 7B68     		ldr	r3, [r7, #4]
 19117 0014 FB60     		str	r3, [r7, #12]
1061:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp += ADC_InjectedChannel + JDR_Offset;
 19118              		.loc 1 1061 0
 19119 0016 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19120 0018 FB68     		ldr	r3, [r7, #12]
 19121 001a D318     		adds	r3, r2, r3
 19122 001c 03F12803 		add	r3, r3, #40
 19123 0020 FB60     		str	r3, [r7, #12]
1062:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1063:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Returns the selected injected channel conversion data value */
1064:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp);   
 19124              		.loc 1 1064 0
 19125 0022 FB68     		ldr	r3, [r7, #12]
 19126 0024 1B68     		ldr	r3, [r3, #0]
 19127 0026 9BB2     		uxth	r3, r3
1065:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19128              		.loc 1 1065 0
 19129 0028 1846     		mov	r0, r3
 19130 002a 07F11407 		add	r7, r7, #20
 19131 002e BD46     		mov	sp, r7
 19132 0030 80BC     		pop	{r7}
 19133 0032 7047     		bx	lr
 19134              		.cfi_endproc
 19135              	.LFE56:
 19137              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 19138              		.align	2
 19139              		.global	ADC_AnalogWatchdogCmd
 19140              		.thumb
 19141              		.thumb_func
 19143              	ADC_AnalogWatchdogCmd:
 19144              	.LFB57:
1066:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1067:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1068:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular
1069:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         or injected channels
1070:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1071:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
1072:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1073:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
1074:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected channel
1075:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular or inje
1076:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on  all regular channel
1077:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on  all injected channel
1078:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected c
1079:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
1080:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None	  
1081:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1082:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
1083:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19145              		.loc 1 1083 0
 19146              		.cfi_startproc
 19147              		@ args = 0, pretend = 0, frame = 16
 19148              		@ frame_needed = 1, uses_anonymous_args = 0
 19149              		@ link register save eliminated.
 19150 0000 80B4     		push	{r7}
 19151              	.LCFI83:
 19152              		.cfi_def_cfa_offset 4
 19153 0002 85B0     		sub	sp, sp, #20
 19154              	.LCFI84:
 19155              		.cfi_def_cfa_offset 24
 19156 0004 00AF     		add	r7, sp, #0
 19157              		.cfi_offset 7, -4
 19158              	.LCFI85:
 19159              		.cfi_def_cfa_register 7
 19160 0006 7860     		str	r0, [r7, #4]
 19161 0008 3960     		str	r1, [r7, #0]
1084:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 19162              		.loc 1 1084 0
 19163 000a 4FF00003 		mov	r3, #0
 19164 000e FB60     		str	r3, [r7, #12]
1085:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1086:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1087:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
1088:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
1089:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR1;
 19165              		.loc 1 1089 0
 19166 0010 7B68     		ldr	r3, [r7, #4]
 19167 0012 5B68     		ldr	r3, [r3, #4]
 19168 0014 FB60     		str	r3, [r7, #12]
1090:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear AWDEN, AWDENJ and AWDSGL bits */
1091:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg &= CR1_AWDMode_Reset;
 19169              		.loc 1 1091 0
 19170 0016 FB68     		ldr	r3, [r7, #12]
 19171 0018 23F44003 		bic	r3, r3, #12582912
 19172 001c 23F40073 		bic	r3, r3, #512
 19173 0020 FB60     		str	r3, [r7, #12]
1092:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the analog watchdog enable mode */
1093:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 19174              		.loc 1 1093 0
 19175 0022 FA68     		ldr	r2, [r7, #12]
 19176 0024 3B68     		ldr	r3, [r7, #0]
 19177 0026 42EA0303 		orr	r3, r2, r3
 19178 002a FB60     		str	r3, [r7, #12]
1094:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
1095:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg;
 19179              		.loc 1 1095 0
 19180 002c 7B68     		ldr	r3, [r7, #4]
 19181 002e FA68     		ldr	r2, [r7, #12]
 19182 0030 5A60     		str	r2, [r3, #4]
1096:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19183              		.loc 1 1096 0
 19184 0032 07F11407 		add	r7, r7, #20
 19185 0036 BD46     		mov	sp, r7
 19186 0038 80BC     		pop	{r7}
 19187 003a 7047     		bx	lr
 19188              		.cfi_endproc
 19189              	.LFE57:
 19191              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 19192              		.align	2
 19193              		.global	ADC_AnalogWatchdogThresholdsConfig
 19194              		.thumb
 19195              		.thumb_func
 19197              	ADC_AnalogWatchdogThresholdsConfig:
 19198              	.LFB58:
1097:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1098:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1099:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
1100:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1101:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
1102:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1103:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  LowThreshold: the ADC analog watchdog Low threshold value.
1104:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1105:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1106:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1107:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
1108:../StdPeripheralDriver/src/stm32f10x_adc.c ****                                         uint16_t LowThreshold)
1109:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19199              		.loc 1 1109 0
 19200              		.cfi_startproc
 19201              		@ args = 0, pretend = 0, frame = 8
 19202              		@ frame_needed = 1, uses_anonymous_args = 0
 19203              		@ link register save eliminated.
 19204 0000 80B4     		push	{r7}
 19205              	.LCFI86:
 19206              		.cfi_def_cfa_offset 4
 19207 0002 83B0     		sub	sp, sp, #12
 19208              	.LCFI87:
 19209              		.cfi_def_cfa_offset 16
 19210 0004 00AF     		add	r7, sp, #0
 19211              		.cfi_offset 7, -4
 19212              	.LCFI88:
 19213              		.cfi_def_cfa_register 7
 19214 0006 7860     		str	r0, [r7, #4]
 19215 0008 1346     		mov	r3, r2
 19216 000a 0A46     		mov	r2, r1	@ movhi
 19217 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 19218 000e 3B80     		strh	r3, [r7, #0]	@ movhi
1110:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1111:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1112:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
1113:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
1114:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the ADCx high threshold */
1115:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->HTR = HighThreshold;
 19219              		.loc 1 1115 0
 19220 0010 7A88     		ldrh	r2, [r7, #2]
 19221 0012 7B68     		ldr	r3, [r7, #4]
 19222 0014 5A62     		str	r2, [r3, #36]
1116:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the ADCx low threshold */
1117:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->LTR = LowThreshold;
 19223              		.loc 1 1117 0
 19224 0016 3A88     		ldrh	r2, [r7, #0]
 19225 0018 7B68     		ldr	r3, [r7, #4]
 19226 001a 9A62     		str	r2, [r3, #40]
1118:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19227              		.loc 1 1118 0
 19228 001c 07F10C07 		add	r7, r7, #12
 19229 0020 BD46     		mov	sp, r7
 19230 0022 80BC     		pop	{r7}
 19231 0024 7047     		bx	lr
 19232              		.cfi_endproc
 19233              	.LFE58:
 19235 0026 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 19236              		.align	2
 19237              		.global	ADC_AnalogWatchdogSingleChannelConfig
 19238              		.thumb
 19239              		.thumb_func
 19241              	ADC_AnalogWatchdogSingleChannelConfig:
 19242              	.LFB59:
1119:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1120:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1121:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
1122:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1123:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
1124:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1125:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
1126:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
1127:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
1128:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
1129:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
1130:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
1131:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
1132:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
1133:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
1134:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
1135:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
1136:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
1137:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
1138:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
1139:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
1140:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
1141:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
1142:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
1143:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1144:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1145:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
1146:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19243              		.loc 1 1146 0
 19244              		.cfi_startproc
 19245              		@ args = 0, pretend = 0, frame = 16
 19246              		@ frame_needed = 1, uses_anonymous_args = 0
 19247              		@ link register save eliminated.
 19248 0000 80B4     		push	{r7}
 19249              	.LCFI89:
 19250              		.cfi_def_cfa_offset 4
 19251 0002 85B0     		sub	sp, sp, #20
 19252              	.LCFI90:
 19253              		.cfi_def_cfa_offset 24
 19254 0004 00AF     		add	r7, sp, #0
 19255              		.cfi_offset 7, -4
 19256              	.LCFI91:
 19257              		.cfi_def_cfa_register 7
 19258 0006 7860     		str	r0, [r7, #4]
 19259 0008 0B46     		mov	r3, r1
 19260 000a FB70     		strb	r3, [r7, #3]
1147:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 19261              		.loc 1 1147 0
 19262 000c 4FF00003 		mov	r3, #0
 19263 0010 FB60     		str	r3, [r7, #12]
1148:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1149:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1150:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1151:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
1152:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR1;
 19264              		.loc 1 1152 0
 19265 0012 7B68     		ldr	r3, [r7, #4]
 19266 0014 5B68     		ldr	r3, [r3, #4]
 19267 0016 FB60     		str	r3, [r7, #12]
1153:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the Analog watchdog channel select bits */
1154:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg &= CR1_AWDCH_Reset;
 19268              		.loc 1 1154 0
 19269 0018 FB68     		ldr	r3, [r7, #12]
 19270 001a 23F01F03 		bic	r3, r3, #31
 19271 001e FB60     		str	r3, [r7, #12]
1155:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the Analog watchdog channel */
1156:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg |= ADC_Channel;
 19272              		.loc 1 1156 0
 19273 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19274 0022 FA68     		ldr	r2, [r7, #12]
 19275 0024 42EA0303 		orr	r3, r2, r3
 19276 0028 FB60     		str	r3, [r7, #12]
1157:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
1158:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg;
 19277              		.loc 1 1158 0
 19278 002a 7B68     		ldr	r3, [r7, #4]
 19279 002c FA68     		ldr	r2, [r7, #12]
 19280 002e 5A60     		str	r2, [r3, #4]
1159:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19281              		.loc 1 1159 0
 19282 0030 07F11407 		add	r7, r7, #20
 19283 0034 BD46     		mov	sp, r7
 19284 0036 80BC     		pop	{r7}
 19285 0038 7047     		bx	lr
 19286              		.cfi_endproc
 19287              	.LFE59:
 19289 003a 00BF     		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 19290              		.align	2
 19291              		.global	ADC_TempSensorVrefintCmd
 19292              		.thumb
 19293              		.thumb_func
 19295              	ADC_TempSensorVrefintCmd:
 19296              	.LFB60:
1160:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1161:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1162:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channel.
1163:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the temperature sensor.
1164:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1165:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1166:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1167:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)
1168:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19297              		.loc 1 1168 0
 19298              		.cfi_startproc
 19299              		@ args = 0, pretend = 0, frame = 8
 19300              		@ frame_needed = 1, uses_anonymous_args = 0
 19301              		@ link register save eliminated.
 19302 0000 80B4     		push	{r7}
 19303              	.LCFI92:
 19304              		.cfi_def_cfa_offset 4
 19305 0002 83B0     		sub	sp, sp, #12
 19306              	.LCFI93:
 19307              		.cfi_def_cfa_offset 16
 19308 0004 00AF     		add	r7, sp, #0
 19309              		.cfi_offset 7, -4
 19310              	.LCFI94:
 19311              		.cfi_def_cfa_register 7
 19312 0006 0346     		mov	r3, r0
 19313 0008 FB71     		strb	r3, [r7, #7]
1169:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1170:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1171:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 19314              		.loc 1 1171 0
 19315 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 19316 000c 002B     		cmp	r3, #0
 19317 000e 06D0     		beq	.L77
1172:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1173:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
1174:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADC1->CR2 |= CR2_TSVREFE_Set;
 19318              		.loc 1 1174 0
 19319 0010 084B     		ldr	r3, .L79
 19320 0012 084A     		ldr	r2, .L79
 19321 0014 9268     		ldr	r2, [r2, #8]
 19322 0016 42F40002 		orr	r2, r2, #8388608
 19323 001a 9A60     		str	r2, [r3, #8]
 19324 001c 05E0     		b	.L76
 19325              	.L77:
1175:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1176:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
1177:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1178:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
1179:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADC1->CR2 &= CR2_TSVREFE_Reset;
 19326              		.loc 1 1179 0
 19327 001e 054B     		ldr	r3, .L79
 19328 0020 044A     		ldr	r2, .L79
 19329 0022 9268     		ldr	r2, [r2, #8]
 19330 0024 22F40002 		bic	r2, r2, #8388608
 19331 0028 9A60     		str	r2, [r3, #8]
 19332              	.L76:
1180:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1181:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19333              		.loc 1 1181 0
 19334 002a 07F10C07 		add	r7, r7, #12
 19335 002e BD46     		mov	sp, r7
 19336 0030 80BC     		pop	{r7}
 19337 0032 7047     		bx	lr
 19338              	.L80:
 19339              		.align	2
 19340              	.L79:
 19341 0034 00240140 		.word	1073816576
 19342              		.cfi_endproc
 19343              	.LFE60:
 19345              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 19346              		.align	2
 19347              		.global	ADC_GetFlagStatus
 19348              		.thumb
 19349              		.thumb_func
 19351              	ADC_GetFlagStatus:
 19352              	.LFB61:
1182:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1183:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1184:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1185:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1186:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1187:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1188:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_AWD: Analog watchdog flag
1189:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_EOC: End of conversion flag
1190:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JEOC: End of injected group conversion flag
1191:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1192:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
1193:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1194:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1195:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1196:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19353              		.loc 1 1196 0
 19354              		.cfi_startproc
 19355              		@ args = 0, pretend = 0, frame = 16
 19356              		@ frame_needed = 1, uses_anonymous_args = 0
 19357              		@ link register save eliminated.
 19358 0000 80B4     		push	{r7}
 19359              	.LCFI95:
 19360              		.cfi_def_cfa_offset 4
 19361 0002 85B0     		sub	sp, sp, #20
 19362              	.LCFI96:
 19363              		.cfi_def_cfa_offset 24
 19364 0004 00AF     		add	r7, sp, #0
 19365              		.cfi_offset 7, -4
 19366              	.LCFI97:
 19367              		.cfi_def_cfa_register 7
 19368 0006 7860     		str	r0, [r7, #4]
 19369 0008 0B46     		mov	r3, r1
 19370 000a FB70     		strb	r3, [r7, #3]
1197:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 19371              		.loc 1 1197 0
 19372 000c 4FF00003 		mov	r3, #0
 19373 0010 FB73     		strb	r3, [r7, #15]
1198:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1199:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1200:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1201:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of the specified ADC flag */
1202:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 19374              		.loc 1 1202 0
 19375 0012 7B68     		ldr	r3, [r7, #4]
 19376 0014 1A68     		ldr	r2, [r3, #0]
 19377 0016 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19378 0018 02EA0303 		and	r3, r2, r3
 19379 001c 002B     		cmp	r3, #0
 19380 001e 03D0     		beq	.L82
1203:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1204:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_FLAG is set */
1205:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 19381              		.loc 1 1205 0
 19382 0020 4FF00103 		mov	r3, #1
 19383 0024 FB73     		strb	r3, [r7, #15]
 19384 0026 02E0     		b	.L83
 19385              	.L82:
1206:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1207:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
1208:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1209:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_FLAG is reset */
1210:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 19386              		.loc 1 1210 0
 19387 0028 4FF00003 		mov	r3, #0
 19388 002c FB73     		strb	r3, [r7, #15]
 19389              	.L83:
1211:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1212:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the ADC_FLAG status */
1213:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 19390              		.loc 1 1213 0
 19391 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1214:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19392              		.loc 1 1214 0
 19393 0030 1846     		mov	r0, r3
 19394 0032 07F11407 		add	r7, r7, #20
 19395 0036 BD46     		mov	sp, r7
 19396 0038 80BC     		pop	{r7}
 19397 003a 7047     		bx	lr
 19398              		.cfi_endproc
 19399              	.LFE61:
 19401              		.section	.text.ADC_ClearFlag,"ax",%progbits
 19402              		.align	2
 19403              		.global	ADC_ClearFlag
 19404              		.thumb
 19405              		.thumb_func
 19407              	ADC_ClearFlag:
 19408              	.LFB62:
1215:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1216:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1217:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Clears the ADCx's pending flags.
1218:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1219:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1220:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
1221:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_AWD: Analog watchdog flag
1222:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_EOC: End of conversion flag
1223:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JEOC: End of injected group conversion flag
1224:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1225:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
1226:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1227:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1228:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1229:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19409              		.loc 1 1229 0
 19410              		.cfi_startproc
 19411              		@ args = 0, pretend = 0, frame = 8
 19412              		@ frame_needed = 1, uses_anonymous_args = 0
 19413              		@ link register save eliminated.
 19414 0000 80B4     		push	{r7}
 19415              	.LCFI98:
 19416              		.cfi_def_cfa_offset 4
 19417 0002 83B0     		sub	sp, sp, #12
 19418              	.LCFI99:
 19419              		.cfi_def_cfa_offset 16
 19420 0004 00AF     		add	r7, sp, #0
 19421              		.cfi_offset 7, -4
 19422              	.LCFI100:
 19423              		.cfi_def_cfa_register 7
 19424 0006 7860     		str	r0, [r7, #4]
 19425 0008 0B46     		mov	r3, r1
 19426 000a FB70     		strb	r3, [r7, #3]
1230:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1231:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1232:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1233:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the selected ADC flags */
1234:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 19427              		.loc 1 1234 0
 19428 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19429 000e 6FEA0302 		mvn	r2, r3
 19430 0012 7B68     		ldr	r3, [r7, #4]
 19431 0014 1A60     		str	r2, [r3, #0]
1235:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19432              		.loc 1 1235 0
 19433 0016 07F10C07 		add	r7, r7, #12
 19434 001a BD46     		mov	sp, r7
 19435 001c 80BC     		pop	{r7}
 19436 001e 7047     		bx	lr
 19437              		.cfi_endproc
 19438              	.LFE62:
 19440              		.section	.text.ADC_GetITStatus,"ax",%progbits
 19441              		.align	2
 19442              		.global	ADC_GetITStatus
 19443              		.thumb
 19444              		.thumb_func
 19446              	ADC_GetITStatus:
 19447              	.LFB63:
1236:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1237:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1238:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1239:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1240:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1241:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1242:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
1243:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
1244:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1245:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1246:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1247:../StdPeripheralDriver/src/stm32f10x_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1248:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19448              		.loc 1 1248 0
 19449              		.cfi_startproc
 19450              		@ args = 0, pretend = 0, frame = 24
 19451              		@ frame_needed = 1, uses_anonymous_args = 0
 19452              		@ link register save eliminated.
 19453 0000 80B4     		push	{r7}
 19454              	.LCFI101:
 19455              		.cfi_def_cfa_offset 4
 19456 0002 87B0     		sub	sp, sp, #28
 19457              	.LCFI102:
 19458              		.cfi_def_cfa_offset 32
 19459 0004 00AF     		add	r7, sp, #0
 19460              		.cfi_offset 7, -4
 19461              	.LCFI103:
 19462              		.cfi_def_cfa_register 7
 19463 0006 7860     		str	r0, [r7, #4]
 19464 0008 0B46     		mov	r3, r1
 19465 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1249:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ITStatus bitstatus = RESET;
 19466              		.loc 1 1249 0
 19467 000c 4FF00003 		mov	r3, #0
 19468 0010 FB75     		strb	r3, [r7, #23]
1250:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 19469              		.loc 1 1250 0
 19470 0012 4FF00003 		mov	r3, #0
 19471 0016 3B61     		str	r3, [r7, #16]
 19472 0018 4FF00003 		mov	r3, #0
 19473 001c FB60     		str	r3, [r7, #12]
1251:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1252:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1253:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_GET_IT(ADC_IT));
1254:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
1255:../StdPeripheralDriver/src/stm32f10x_adc.c ****   itmask = ADC_IT >> 8;
 19474              		.loc 1 1255 0
 19475 001e 7B88     		ldrh	r3, [r7, #2]
 19476 0020 4FEA1323 		lsr	r3, r3, #8
 19477 0024 9BB2     		uxth	r3, r3
 19478 0026 3B61     		str	r3, [r7, #16]
1256:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC_IT enable bit status */
1257:../StdPeripheralDriver/src/stm32f10x_adc.c ****   enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
 19479              		.loc 1 1257 0
 19480 0028 7B68     		ldr	r3, [r7, #4]
 19481 002a 5A68     		ldr	r2, [r3, #4]
 19482 002c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 19483 002e DBB2     		uxtb	r3, r3
 19484 0030 02EA0303 		and	r3, r2, r3
 19485 0034 FB60     		str	r3, [r7, #12]
1258:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of the specified ADC interrupt */
1259:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 19486              		.loc 1 1259 0
 19487 0036 7B68     		ldr	r3, [r7, #4]
 19488 0038 1A68     		ldr	r2, [r3, #0]
 19489 003a 3B69     		ldr	r3, [r7, #16]
 19490 003c 02EA0303 		and	r3, r2, r3
 19491 0040 002B     		cmp	r3, #0
 19492 0042 06D0     		beq	.L86
 19493              		.loc 1 1259 0 is_stmt 0 discriminator 1
 19494 0044 FB68     		ldr	r3, [r7, #12]
 19495 0046 002B     		cmp	r3, #0
 19496 0048 03D0     		beq	.L86
1260:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1261:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_IT is set */
1262:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 19497              		.loc 1 1262 0 is_stmt 1
 19498 004a 4FF00103 		mov	r3, #1
 19499 004e FB75     		strb	r3, [r7, #23]
 19500 0050 02E0     		b	.L87
 19501              	.L86:
1263:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1264:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
1265:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1266:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_IT is reset */
1267:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 19502              		.loc 1 1267 0
 19503 0052 4FF00003 		mov	r3, #0
 19504 0056 FB75     		strb	r3, [r7, #23]
 19505              	.L87:
1268:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1269:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the ADC_IT status */
1270:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 19506              		.loc 1 1270 0
 19507 0058 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1271:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19508              		.loc 1 1271 0
 19509 005a 1846     		mov	r0, r3
 19510 005c 07F11C07 		add	r7, r7, #28
 19511 0060 BD46     		mov	sp, r7
 19512 0062 80BC     		pop	{r7}
 19513 0064 7047     		bx	lr
 19514              		.cfi_endproc
 19515              	.LFE63:
 19517 0066 00BF     		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 19518              		.align	2
 19519              		.global	ADC_ClearITPendingBit
 19520              		.thumb
 19521              		.thumb_func
 19523              	ADC_ClearITPendingBit:
 19524              	.LFB64:
1272:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1273:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1274:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1275:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1276:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1277:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
1278:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
1279:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
1280:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1281:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1282:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1283:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1284:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19525              		.loc 1 1284 0
 19526              		.cfi_startproc
 19527              		@ args = 0, pretend = 0, frame = 16
 19528              		@ frame_needed = 1, uses_anonymous_args = 0
 19529              		@ link register save eliminated.
 19530 0000 80B4     		push	{r7}
 19531              	.LCFI104:
 19532              		.cfi_def_cfa_offset 4
 19533 0002 85B0     		sub	sp, sp, #20
 19534              	.LCFI105:
 19535              		.cfi_def_cfa_offset 24
 19536 0004 00AF     		add	r7, sp, #0
 19537              		.cfi_offset 7, -4
 19538              	.LCFI106:
 19539              		.cfi_def_cfa_register 7
 19540 0006 7860     		str	r0, [r7, #4]
 19541 0008 0B46     		mov	r3, r1
 19542 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1285:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint8_t itmask = 0;
 19543              		.loc 1 1285 0
 19544 000c 4FF00003 		mov	r3, #0
 19545 0010 FB73     		strb	r3, [r7, #15]
1286:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1287:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1288:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1289:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
1290:../StdPeripheralDriver/src/stm32f10x_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 19546              		.loc 1 1290 0
 19547 0012 7B88     		ldrh	r3, [r7, #2]
 19548 0014 4FEA1323 		lsr	r3, r3, #8
 19549 0018 9BB2     		uxth	r3, r3
 19550 001a FB73     		strb	r3, [r7, #15]
1291:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1292:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 19551              		.loc 1 1292 0
 19552 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 19553 001e 6FEA0302 		mvn	r2, r3
 19554 0022 7B68     		ldr	r3, [r7, #4]
 19555 0024 1A60     		str	r2, [r3, #0]
1293:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19556              		.loc 1 1293 0
 19557 0026 07F11407 		add	r7, r7, #20
 19558 002a BD46     		mov	sp, r7
 19559 002c 80BC     		pop	{r7}
 19560 002e 7047     		bx	lr
 19561              		.cfi_endproc
 19562              	.LFE64:
 19564              		.text
 19565              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_adc.c
     /tmp/ccRF71E7.s:17279  .text.ADC_DeInit:00000000 $t
     /tmp/ccRF71E7.s:17284  .text.ADC_DeInit:00000000 ADC_DeInit
     /tmp/ccRF71E7.s:17353  .text.ADC_DeInit:00000074 $d
     /tmp/ccRF71E7.s:17360  .text.ADC_Init:00000000 $t
     /tmp/ccRF71E7.s:17365  .text.ADC_Init:00000000 ADC_Init
     /tmp/ccRF71E7.s:17475  .text.ADC_Init:000000b8 $d
     /tmp/ccRF71E7.s:17480  .text.ADC_StructInit:00000000 $t
     /tmp/ccRF71E7.s:17485  .text.ADC_StructInit:00000000 ADC_StructInit
     /tmp/ccRF71E7.s:17536  .text.ADC_Cmd:00000000 $t
     /tmp/ccRF71E7.s:17541  .text.ADC_Cmd:00000000 ADC_Cmd
     /tmp/ccRF71E7.s:17589  .text.ADC_DMACmd:00000000 $t
     /tmp/ccRF71E7.s:17594  .text.ADC_DMACmd:00000000 ADC_DMACmd
     /tmp/ccRF71E7.s:17642  .text.ADC_ITConfig:00000000 $t
     /tmp/ccRF71E7.s:17647  .text.ADC_ITConfig:00000000 ADC_ITConfig
     /tmp/ccRF71E7.s:17706  .text.ADC_ResetCalibration:00000000 $t
     /tmp/ccRF71E7.s:17711  .text.ADC_ResetCalibration:00000000 ADC_ResetCalibration
     /tmp/ccRF71E7.s:17744  .text.ADC_GetResetCalibrationStatus:00000000 $t
     /tmp/ccRF71E7.s:17749  .text.ADC_GetResetCalibrationStatus:00000000 ADC_GetResetCalibrationStatus
     /tmp/ccRF71E7.s:17797  .text.ADC_StartCalibration:00000000 $t
     /tmp/ccRF71E7.s:17802  .text.ADC_StartCalibration:00000000 ADC_StartCalibration
     /tmp/ccRF71E7.s:17835  .text.ADC_GetCalibrationStatus:00000000 $t
     /tmp/ccRF71E7.s:17840  .text.ADC_GetCalibrationStatus:00000000 ADC_GetCalibrationStatus
     /tmp/ccRF71E7.s:17888  .text.ADC_SoftwareStartConvCmd:00000000 $t
     /tmp/ccRF71E7.s:17893  .text.ADC_SoftwareStartConvCmd:00000000 ADC_SoftwareStartConvCmd
     /tmp/ccRF71E7.s:17941  .text.ADC_GetSoftwareStartConvStatus:00000000 $t
     /tmp/ccRF71E7.s:17946  .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
     /tmp/ccRF71E7.s:17994  .text.ADC_DiscModeChannelCountConfig:00000000 $t
     /tmp/ccRF71E7.s:17999  .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
     /tmp/ccRF71E7.s:18056  .text.ADC_DiscModeCmd:00000000 $t
     /tmp/ccRF71E7.s:18061  .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
     /tmp/ccRF71E7.s:18109  .text.ADC_RegularChannelConfig:00000000 $t
     /tmp/ccRF71E7.s:18114  .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
     /tmp/ccRF71E7.s:18352  .text.ADC_ExternalTrigConvCmd:00000000 $t
     /tmp/ccRF71E7.s:18357  .text.ADC_ExternalTrigConvCmd:00000000 ADC_ExternalTrigConvCmd
     /tmp/ccRF71E7.s:18405  .text.ADC_GetConversionValue:00000000 $t
     /tmp/ccRF71E7.s:18410  .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
     /tmp/ccRF71E7.s:18442  .text.ADC_GetDualModeConversionValue:00000000 $t
     /tmp/ccRF71E7.s:18447  .text.ADC_GetDualModeConversionValue:00000000 ADC_GetDualModeConversionValue
     /tmp/ccRF71E7.s:18472  .text.ADC_GetDualModeConversionValue:00000010 $d
     /tmp/ccRF71E7.s:18477  .text.ADC_AutoInjectedConvCmd:00000000 $t
     /tmp/ccRF71E7.s:18482  .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
     /tmp/ccRF71E7.s:18530  .text.ADC_InjectedDiscModeCmd:00000000 $t
     /tmp/ccRF71E7.s:18535  .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
     /tmp/ccRF71E7.s:18583  .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
     /tmp/ccRF71E7.s:18588  .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/ccRF71E7.s:18636  .text.ADC_ExternalTrigInjectedConvCmd:00000000 $t
     /tmp/ccRF71E7.s:18641  .text.ADC_ExternalTrigInjectedConvCmd:00000000 ADC_ExternalTrigInjectedConvCmd
     /tmp/ccRF71E7.s:18689  .text.ADC_SoftwareStartInjectedConvCmd:00000000 $t
     /tmp/ccRF71E7.s:18694  .text.ADC_SoftwareStartInjectedConvCmd:00000000 ADC_SoftwareStartInjectedConvCmd
     /tmp/ccRF71E7.s:18742  .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
     /tmp/ccRF71E7.s:18747  .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/ccRF71E7.s:18795  .text.ADC_InjectedChannelConfig:00000000 $t
     /tmp/ccRF71E7.s:18800  .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
     /tmp/ccRF71E7.s:18974  .text.ADC_InjectedSequencerLengthConfig:00000000 $t
     /tmp/ccRF71E7.s:18979  .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
     /tmp/ccRF71E7.s:19036  .text.ADC_SetInjectedOffset:00000000 $t
     /tmp/ccRF71E7.s:19041  .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
     /tmp/ccRF71E7.s:19087  .text.ADC_GetInjectedConversionValue:00000000 $t
     /tmp/ccRF71E7.s:19092  .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
     /tmp/ccRF71E7.s:19138  .text.ADC_AnalogWatchdogCmd:00000000 $t
     /tmp/ccRF71E7.s:19143  .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
     /tmp/ccRF71E7.s:19192  .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
     /tmp/ccRF71E7.s:19197  .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/ccRF71E7.s:19236  .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
     /tmp/ccRF71E7.s:19241  .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/ccRF71E7.s:19290  .text.ADC_TempSensorVrefintCmd:00000000 $t
     /tmp/ccRF71E7.s:19295  .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
     /tmp/ccRF71E7.s:19341  .text.ADC_TempSensorVrefintCmd:00000034 $d
     /tmp/ccRF71E7.s:19346  .text.ADC_GetFlagStatus:00000000 $t
     /tmp/ccRF71E7.s:19351  .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
     /tmp/ccRF71E7.s:19402  .text.ADC_ClearFlag:00000000 $t
     /tmp/ccRF71E7.s:19407  .text.ADC_ClearFlag:00000000 ADC_ClearFlag
     /tmp/ccRF71E7.s:19441  .text.ADC_GetITStatus:00000000 $t
     /tmp/ccRF71E7.s:19446  .text.ADC_GetITStatus:00000000 ADC_GetITStatus
     /tmp/ccRF71E7.s:19518  .text.ADC_ClearITPendingBit:00000000 $t
     /tmp/ccRF71E7.s:19523  .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
