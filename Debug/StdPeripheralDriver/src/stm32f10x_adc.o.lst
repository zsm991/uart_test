   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f10x_adc.c"
  23              	.Ltext0:
  24              		.file 1 "../StdPeripheralDriver/src/stm32f10x_adc.c"
 18020              		.align	2
 18021              		.global	ADC_DeInit
 18022              		.thumb
 18023              		.thumb_func
 18025              	ADC_DeInit:
 18026              	.LFB29:
   1:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
   2:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ******************************************************************************
   3:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @file    stm32f10x_adc.c
   4:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @author  MCD Application Team
   5:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @version V3.5.0
   6:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @date    11-March-2011
   7:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief   This file provides all the ADC firmware functions.
   8:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ******************************************************************************
   9:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @attention
  10:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *
  11:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *
  18:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ******************************************************************************
  20:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  21:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  22:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* Includes ------------------------------------------------------------------*/
  23:../StdPeripheralDriver/src/stm32f10x_adc.c **** #include "stm32f10x_adc.h"
  24:../StdPeripheralDriver/src/stm32f10x_adc.c **** #include "stm32f10x_rcc.h"
  25:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  26:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  28:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  29:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  30:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC 
  31:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief ADC driver modules
  32:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  33:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  34:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  35:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_TypesDefinitions
  36:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  37:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  38:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  39:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
  40:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
  41:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  42:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  43:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Defines
  44:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
  45:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
  46:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  47:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DISCNUM mask */
  48:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCNUM_Reset           ((uint32_t)0xFFFF1FFF)
  49:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  50:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DISCEN mask */
  51:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCEN_Set              ((uint32_t)0x00000800)
  52:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_DISCEN_Reset            ((uint32_t)0xFFFFF7FF)
  53:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  54:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JAUTO mask */
  55:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JAUTO_Set               ((uint32_t)0x00000400)
  56:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JAUTO_Reset             ((uint32_t)0xFFFFFBFF)
  57:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  58:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JDISCEN mask */
  59:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JDISCEN_Set             ((uint32_t)0x00001000)
  60:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_JDISCEN_Reset           ((uint32_t)0xFFFFEFFF)
  61:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  62:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC AWDCH mask */
  63:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_AWDCH_Reset             ((uint32_t)0xFFFFFFE0)
  64:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  65:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC Analog watchdog enable mode mask */
  66:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_AWDMode_Reset           ((uint32_t)0xFF3FFDFF)
  67:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  68:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* CR1 register Mask */
  69:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR1_CLEAR_Mask              ((uint32_t)0xFFF0FEFF)
  70:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  71:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC ADON mask */
  72:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_ADON_Set                ((uint32_t)0x00000001)
  73:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_ADON_Reset              ((uint32_t)0xFFFFFFFE)
  74:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  75:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC DMA mask */
  76:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_DMA_Set                 ((uint32_t)0x00000100)
  77:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_DMA_Reset               ((uint32_t)0xFFFFFEFF)
  78:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  79:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC RSTCAL mask */
  80:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_RSTCAL_Set              ((uint32_t)0x00000008)
  81:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  82:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC CAL mask */
  83:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_CAL_Set                 ((uint32_t)0x00000004)
  84:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  85:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SWSTART mask */
  86:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_SWSTART_Set             ((uint32_t)0x00400000)
  87:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  88:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC EXTTRIG mask */
  89:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_Set             ((uint32_t)0x00100000)
  90:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_Reset           ((uint32_t)0xFFEFFFFF)
  91:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  92:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC Software start mask */
  93:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_SWSTART_Set     ((uint32_t)0x00500000)
  94:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_EXTTRIG_SWSTART_Reset   ((uint32_t)0xFFAFFFFF)
  95:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  96:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JEXTSEL mask */
  97:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTSEL_Reset           ((uint32_t)0xFFFF8FFF)
  98:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
  99:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JEXTTRIG mask */
 100:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_Set            ((uint32_t)0x00008000)
 101:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_Reset          ((uint32_t)0xFFFF7FFF)
 102:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 103:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JSWSTART mask */
 104:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JSWSTART_Set            ((uint32_t)0x00200000)
 105:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 106:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC injected software start mask */
 107:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_JSWSTART_Set   ((uint32_t)0x00208000)
 108:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_JEXTTRIG_JSWSTART_Reset ((uint32_t)0xFFDF7FFF)
 109:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 110:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC TSPD mask */
 111:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_TSVREFE_Set             ((uint32_t)0x00800000)
 112:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_TSVREFE_Reset           ((uint32_t)0xFF7FFFFF)
 113:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 114:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* CR2 register Mask */
 115:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define CR2_CLEAR_Mask              ((uint32_t)0xFFF1F7FD)
 116:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 117:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SQx mask */
 118:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR3_SQ_Set                 ((uint32_t)0x0000001F)
 119:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR2_SQ_Set                 ((uint32_t)0x0000001F)
 120:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR1_SQ_Set                 ((uint32_t)0x0000001F)
 121:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 122:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* SQR1 register Mask */
 123:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SQR1_CLEAR_Mask             ((uint32_t)0xFF0FFFFF)
 124:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 125:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JSQx mask */
 126:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JSQ_Set                ((uint32_t)0x0000001F)
 127:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 128:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JL mask */
 129:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JL_Set                 ((uint32_t)0x00300000)
 130:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JSQR_JL_Reset               ((uint32_t)0xFFCFFFFF)
 131:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 132:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC SMPx mask */
 133:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SMPR1_SMP_Set               ((uint32_t)0x00000007)
 134:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define SMPR2_SMP_Set               ((uint32_t)0x00000007)
 135:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 136:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC JDRx registers offset */
 137:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define JDR_Offset                  ((uint8_t)0x28)
 138:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 139:../StdPeripheralDriver/src/stm32f10x_adc.c **** /* ADC1 DR register base address */
 140:../StdPeripheralDriver/src/stm32f10x_adc.c **** #define DR_ADDRESS                  ((uint32_t)0x4001244C)
 141:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 142:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 143:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 144:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 145:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 146:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Macros
 147:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 148:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 149:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 150:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 151:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 152:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 153:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 154:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Variables
 155:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 156:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 157:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 158:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 159:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 160:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 161:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 162:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_FunctionPrototypes
 163:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 164:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 165:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 166:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 167:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @}
 168:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 169:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 170:../StdPeripheralDriver/src/stm32f10x_adc.c **** /** @defgroup ADC_Private_Functions
 171:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @{
 172:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 173:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 174:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 175:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
 176:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 177:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 178:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 179:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DeInit(ADC_TypeDef* ADCx)
 180:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18027              		.loc 1 180 0
 18028              		.cfi_startproc
 18029              		@ args = 0, pretend = 0, frame = 8
 18030              		@ frame_needed = 1, uses_anonymous_args = 0
 18031 0000 80B5     		push	{r7, lr}
 18032              	.LCFI0:
 18033              		.cfi_def_cfa_offset 8
 18034 0002 82B0     		sub	sp, sp, #8
 18035              	.LCFI1:
 18036              		.cfi_def_cfa_offset 16
 18037 0004 00AF     		add	r7, sp, #0
 18038              		.cfi_offset 14, -4
 18039              		.cfi_offset 7, -8
 18040              	.LCFI2:
 18041              		.cfi_def_cfa_register 7
 18042 0006 7860     		str	r0, [r7, #4]
 181:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 182:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 183:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
 184:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (ADCx == ADC1)
 18043              		.loc 1 184 0
 18044 0008 7A68     		ldr	r2, [r7, #4]
 18045 000a 1A4B     		ldr	r3, .L5
 18046 000c 9A42     		cmp	r2, r3
 18047 000e 0CD1     		bne	.L2
 185:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 186:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable ADC1 reset state */
 187:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 18048              		.loc 1 187 0
 18049 0010 4FF40070 		mov	r0, #512
 18050 0014 4FF00101 		mov	r1, #1
 18051 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 188:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Release ADC1 from reset state */
 189:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 18052              		.loc 1 189 0
 18053 001c 4FF40070 		mov	r0, #512
 18054 0020 4FF00001 		mov	r1, #0
 18055 0024 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 18056 0028 20E0     		b	.L1
 18057              	.L2:
 190:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 191:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else if (ADCx == ADC2)
 18058              		.loc 1 191 0
 18059 002a 7A68     		ldr	r2, [r7, #4]
 18060 002c 124B     		ldr	r3, .L5+4
 18061 002e 9A42     		cmp	r2, r3
 18062 0030 0CD1     		bne	.L4
 192:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 193:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable ADC2 reset state */
 194:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 18063              		.loc 1 194 0
 18064 0032 4FF48060 		mov	r0, #1024
 18065 0036 4FF00101 		mov	r1, #1
 18066 003a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 195:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Release ADC2 from reset state */
 196:../StdPeripheralDriver/src/stm32f10x_adc.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 18067              		.loc 1 196 0
 18068 003e 4FF48060 		mov	r0, #1024
 18069 0042 4FF00001 		mov	r1, #0
 18070 0046 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 18071 004a 0FE0     		b	.L1
 18072              	.L4:
 197:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 198:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 199:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 200:../StdPeripheralDriver/src/stm32f10x_adc.c ****     if (ADCx == ADC3)
 18073              		.loc 1 200 0
 18074 004c 7A68     		ldr	r2, [r7, #4]
 18075 004e 0B4B     		ldr	r3, .L5+8
 18076 0050 9A42     		cmp	r2, r3
 18077 0052 0BD1     		bne	.L1
 201:../StdPeripheralDriver/src/stm32f10x_adc.c ****     {
 202:../StdPeripheralDriver/src/stm32f10x_adc.c ****       /* Enable ADC3 reset state */
 203:../StdPeripheralDriver/src/stm32f10x_adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 18078              		.loc 1 203 0
 18079 0054 4FF40040 		mov	r0, #32768
 18080 0058 4FF00101 		mov	r1, #1
 18081 005c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 204:../StdPeripheralDriver/src/stm32f10x_adc.c ****       /* Release ADC3 from reset state */
 205:../StdPeripheralDriver/src/stm32f10x_adc.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 18082              		.loc 1 205 0
 18083 0060 4FF40040 		mov	r0, #32768
 18084 0064 4FF00001 		mov	r1, #0
 18085 0068 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 18086              	.L1:
 206:../StdPeripheralDriver/src/stm32f10x_adc.c ****     }
 207:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 208:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18087              		.loc 1 208 0
 18088 006c 07F10807 		add	r7, r7, #8
 18089 0070 BD46     		mov	sp, r7
 18090 0072 80BD     		pop	{r7, pc}
 18091              	.L6:
 18092              		.align	2
 18093              	.L5:
 18094 0074 00240140 		.word	1073816576
 18095 0078 00280140 		.word	1073817600
 18096 007c 003C0140 		.word	1073822720
 18097              		.cfi_endproc
 18098              	.LFE29:
 18100              		.section	.text.ADC_Init,"ax",%progbits
 18101              		.align	2
 18102              		.global	ADC_Init
 18103              		.thumb
 18104              		.thumb_func
 18106              	ADC_Init:
 18107              	.LFB30:
 209:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 210:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 211:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters
 212:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         in the ADC_InitStruct.
 213:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 214:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 215:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         the configuration information for the specified ADC peripheral.
 216:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 217:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 218:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 219:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18108              		.loc 1 219 0
 18109              		.cfi_startproc
 18110              		@ args = 0, pretend = 0, frame = 16
 18111              		@ frame_needed = 1, uses_anonymous_args = 0
 18112              		@ link register save eliminated.
 18113 0000 80B4     		push	{r7}
 18114              	.LCFI3:
 18115              		.cfi_def_cfa_offset 4
 18116 0002 85B0     		sub	sp, sp, #20
 18117              	.LCFI4:
 18118              		.cfi_def_cfa_offset 24
 18119 0004 00AF     		add	r7, sp, #0
 18120              		.cfi_offset 7, -4
 18121              	.LCFI5:
 18122              		.cfi_def_cfa_register 7
 18123 0006 7860     		str	r0, [r7, #4]
 18124 0008 3960     		str	r1, [r7, #0]
 220:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 18125              		.loc 1 220 0
 18126 000a 4FF00003 		mov	r3, #0
 18127 000e FB60     		str	r3, [r7, #12]
 221:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint8_t tmpreg2 = 0;
 18128              		.loc 1 221 0
 18129 0010 4FF00003 		mov	r3, #0
 18130 0014 FB72     		strb	r3, [r7, #11]
 222:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 223:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 224:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_MODE(ADC_InitStruct->ADC_Mode));
 225:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 226:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode));
 227:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));   
 228:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 229:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));
 230:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 231:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 232:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADCx CR1 value */
 233:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR1;
 18131              		.loc 1 233 0
 18132 0016 7B68     		ldr	r3, [r7, #4]
 18133 0018 5B68     		ldr	r3, [r3, #4]
 18134 001a FB60     		str	r3, [r7, #12]
 234:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear DUALMOD and SCAN bits */
 235:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= CR1_CLEAR_Mask;
 18135              		.loc 1 235 0
 18136 001c FB68     		ldr	r3, [r7, #12]
 18137 001e 23F47023 		bic	r3, r3, #983040
 18138 0022 23F48073 		bic	r3, r3, #256
 18139 0026 FB60     		str	r3, [r7, #12]
 236:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Configure ADCx: Dual mode and scan conversion mode */
 237:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set DUALMOD bits according to ADC_Mode value */
 238:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 239:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8
 18140              		.loc 1 239 0
 18141 0028 3B68     		ldr	r3, [r7, #0]
 18142 002a 1A68     		ldr	r2, [r3, #0]
 18143 002c 3B68     		ldr	r3, [r7, #0]
 18144 002e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 18145 0030 4FEA0323 		lsl	r3, r3, #8
 18146 0034 42EA0303 		orr	r3, r2, r3
 18147 0038 FA68     		ldr	r2, [r7, #12]
 18148 003a 42EA0303 		orr	r3, r2, r3
 18149 003e FB60     		str	r3, [r7, #12]
 240:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Write to ADCx CR1 */
 241:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg1;
 18150              		.loc 1 241 0
 18151 0040 7B68     		ldr	r3, [r7, #4]
 18152 0042 FA68     		ldr	r2, [r7, #12]
 18153 0044 5A60     		str	r2, [r3, #4]
 242:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 243:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 244:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADCx CR2 value */
 245:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR2;
 18154              		.loc 1 245 0
 18155 0046 7B68     		ldr	r3, [r7, #4]
 18156 0048 9B68     		ldr	r3, [r3, #8]
 18157 004a FB60     		str	r3, [r7, #12]
 246:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear CONT, ALIGN and EXTSEL bits */
 247:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= CR2_CLEAR_Mask;
 18158              		.loc 1 247 0
 18159 004c FA68     		ldr	r2, [r7, #12]
 18160 004e 1A4B     		ldr	r3, .L8
 18161 0050 02EA0303 		and	r3, r2, r3
 18162 0054 FB60     		str	r3, [r7, #12]
 248:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Configure ADCx: external trigger event and continuous conversion mode */
 249:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 250:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 251:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 252:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 18163              		.loc 1 252 0
 18164 0056 3B68     		ldr	r3, [r7, #0]
 18165 0058 DA68     		ldr	r2, [r3, #12]
 18166 005a 3B68     		ldr	r3, [r7, #0]
 18167 005c 9B68     		ldr	r3, [r3, #8]
 18168 005e 1A43     		orrs	r2, r2, r3
 253:../StdPeripheralDriver/src/stm32f10x_adc.c ****             ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 18169              		.loc 1 253 0
 18170 0060 3B68     		ldr	r3, [r7, #0]
 18171 0062 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 18172 0064 4FEA4303 		lsl	r3, r3, #1
 252:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 18173              		.loc 1 252 0
 18174 0068 42EA0303 		orr	r3, r2, r3
 18175 006c FA68     		ldr	r2, [r7, #12]
 18176 006e 42EA0303 		orr	r3, r2, r3
 18177 0072 FB60     		str	r3, [r7, #12]
 254:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Write to ADCx CR2 */
 255:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 = tmpreg1;
 18178              		.loc 1 255 0
 18179 0074 7B68     		ldr	r3, [r7, #4]
 18180 0076 FA68     		ldr	r2, [r7, #12]
 18181 0078 9A60     		str	r2, [r3, #8]
 256:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 257:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 258:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADCx SQR1 value */
 259:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->SQR1;
 18182              		.loc 1 259 0
 18183 007a 7B68     		ldr	r3, [r7, #4]
 18184 007c DB6A     		ldr	r3, [r3, #44]
 18185 007e FB60     		str	r3, [r7, #12]
 260:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear L bits */
 261:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= SQR1_CLEAR_Mask;
 18186              		.loc 1 261 0
 18187 0080 FB68     		ldr	r3, [r7, #12]
 18188 0082 23F47003 		bic	r3, r3, #15728640
 18189 0086 FB60     		str	r3, [r7, #12]
 262:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Configure ADCx: regular channel sequence length */
 263:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set L bits according to ADC_NbrOfChannel value */
 264:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 18190              		.loc 1 264 0
 18191 0088 3B68     		ldr	r3, [r7, #0]
 18192 008a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 18193 008c 03F1FF33 		add	r3, r3, #-1
 18194 0090 DAB2     		uxtb	r2, r3
 18195 0092 FB7A     		ldrb	r3, [r7, #11]
 18196 0094 42EA0303 		orr	r3, r2, r3
 18197 0098 FB72     		strb	r3, [r7, #11]
 265:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= (uint32_t)tmpreg2 << 20;
 18198              		.loc 1 265 0
 18199 009a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 18200 009c 4FEA0353 		lsl	r3, r3, #20
 18201 00a0 FA68     		ldr	r2, [r7, #12]
 18202 00a2 42EA0303 		orr	r3, r2, r3
 18203 00a6 FB60     		str	r3, [r7, #12]
 266:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Write to ADCx SQR1 */
 267:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->SQR1 = tmpreg1;
 18204              		.loc 1 267 0
 18205 00a8 7B68     		ldr	r3, [r7, #4]
 18206 00aa FA68     		ldr	r2, [r7, #12]
 18207 00ac DA62     		str	r2, [r3, #44]
 268:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18208              		.loc 1 268 0
 18209 00ae 07F11407 		add	r7, r7, #20
 18210 00b2 BD46     		mov	sp, r7
 18211 00b4 80BC     		pop	{r7}
 18212 00b6 7047     		bx	lr
 18213              	.L9:
 18214              		.align	2
 18215              	.L8:
 18216 00b8 FDF7F1FF 		.word	-919555
 18217              		.cfi_endproc
 18218              	.LFE30:
 18220              		.section	.text.ADC_StructInit,"ax",%progbits
 18221              		.align	2
 18222              		.global	ADC_StructInit
 18223              		.thumb
 18224              		.thumb_func
 18226              	ADC_StructInit:
 18227              	.LFB31:
 269:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 270:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 271:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 272:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
 273:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 274:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 275:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 276:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18228              		.loc 1 276 0
 18229              		.cfi_startproc
 18230              		@ args = 0, pretend = 0, frame = 8
 18231              		@ frame_needed = 1, uses_anonymous_args = 0
 18232              		@ link register save eliminated.
 18233 0000 80B4     		push	{r7}
 18234              	.LCFI6:
 18235              		.cfi_def_cfa_offset 4
 18236 0002 83B0     		sub	sp, sp, #12
 18237              	.LCFI7:
 18238              		.cfi_def_cfa_offset 16
 18239 0004 00AF     		add	r7, sp, #0
 18240              		.cfi_offset 7, -4
 18241              	.LCFI8:
 18242              		.cfi_def_cfa_register 7
 18243 0006 7860     		str	r0, [r7, #4]
 277:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Reset ADC init structure parameters values */
 278:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_Mode member */
 279:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 18244              		.loc 1 279 0
 18245 0008 7B68     		ldr	r3, [r7, #4]
 18246 000a 4FF00002 		mov	r2, #0
 18247 000e 1A60     		str	r2, [r3, #0]
 280:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* initialize the ADC_ScanConvMode member */
 281:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 18248              		.loc 1 281 0
 18249 0010 7B68     		ldr	r3, [r7, #4]
 18250 0012 4FF00002 		mov	r2, #0
 18251 0016 1A71     		strb	r2, [r3, #4]
 282:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 283:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 18252              		.loc 1 283 0
 18253 0018 7B68     		ldr	r3, [r7, #4]
 18254 001a 4FF00002 		mov	r2, #0
 18255 001e 5A71     		strb	r2, [r3, #5]
 284:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 285:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 18256              		.loc 1 285 0
 18257 0020 7B68     		ldr	r3, [r7, #4]
 18258 0022 4FF00002 		mov	r2, #0
 18259 0026 9A60     		str	r2, [r3, #8]
 286:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_DataAlign member */
 287:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 18260              		.loc 1 287 0
 18261 0028 7B68     		ldr	r3, [r7, #4]
 18262 002a 4FF00002 		mov	r2, #0
 18263 002e DA60     		str	r2, [r3, #12]
 288:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Initialize the ADC_NbrOfChannel member */
 289:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADC_InitStruct->ADC_NbrOfChannel = 1;
 18264              		.loc 1 289 0
 18265 0030 7B68     		ldr	r3, [r7, #4]
 18266 0032 4FF00102 		mov	r2, #1
 18267 0036 1A74     		strb	r2, [r3, #16]
 290:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18268              		.loc 1 290 0
 18269 0038 07F10C07 		add	r7, r7, #12
 18270 003c BD46     		mov	sp, r7
 18271 003e 80BC     		pop	{r7}
 18272 0040 7047     		bx	lr
 18273              		.cfi_endproc
 18274              	.LFE31:
 18276 0042 00BF     		.section	.text.ADC_Cmd,"ax",%progbits
 18277              		.align	2
 18278              		.global	ADC_Cmd
 18279              		.thumb
 18280              		.thumb_func
 18282              	ADC_Cmd:
 18283              	.LFB32:
 291:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 292:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 293:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 294:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 295:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the ADCx peripheral.
 296:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 297:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 298:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 299:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 300:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18284              		.loc 1 300 0
 18285              		.cfi_startproc
 18286              		@ args = 0, pretend = 0, frame = 8
 18287              		@ frame_needed = 1, uses_anonymous_args = 0
 18288              		@ link register save eliminated.
 18289 0000 80B4     		push	{r7}
 18290              	.LCFI9:
 18291              		.cfi_def_cfa_offset 4
 18292 0002 83B0     		sub	sp, sp, #12
 18293              	.LCFI10:
 18294              		.cfi_def_cfa_offset 16
 18295 0004 00AF     		add	r7, sp, #0
 18296              		.cfi_offset 7, -4
 18297              	.LCFI11:
 18298              		.cfi_def_cfa_register 7
 18299 0006 7860     		str	r0, [r7, #4]
 18300 0008 0B46     		mov	r3, r1
 18301 000a FB70     		strb	r3, [r7, #3]
 301:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 302:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 303:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 304:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18302              		.loc 1 304 0
 18303 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18304 000e 002B     		cmp	r3, #0
 18305 0010 06D0     		beq	.L12
 305:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 306:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 307:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_ADON_Set;
 18306              		.loc 1 307 0
 18307 0012 7B68     		ldr	r3, [r7, #4]
 18308 0014 9B68     		ldr	r3, [r3, #8]
 18309 0016 43F00102 		orr	r2, r3, #1
 18310 001a 7B68     		ldr	r3, [r7, #4]
 18311 001c 9A60     		str	r2, [r3, #8]
 18312 001e 05E0     		b	.L11
 18313              	.L12:
 308:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 309:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 310:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 311:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC peripheral */
 312:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_ADON_Reset;
 18314              		.loc 1 312 0
 18315 0020 7B68     		ldr	r3, [r7, #4]
 18316 0022 9B68     		ldr	r3, [r3, #8]
 18317 0024 23F00102 		bic	r2, r3, #1
 18318 0028 7B68     		ldr	r3, [r7, #4]
 18319 002a 9A60     		str	r2, [r3, #8]
 18320              	.L11:
 313:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 314:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18321              		.loc 1 314 0
 18322 002c 07F10C07 		add	r7, r7, #12
 18323 0030 BD46     		mov	sp, r7
 18324 0032 80BC     		pop	{r7}
 18325 0034 7047     		bx	lr
 18326              		.cfi_endproc
 18327              	.LFE32:
 18329 0036 00BF     		.section	.text.ADC_DMACmd,"ax",%progbits
 18330              		.align	2
 18331              		.global	ADC_DMACmd
 18332              		.thumb
 18333              		.thumb_func
 18335              	ADC_DMACmd:
 18336              	.LFB33:
 315:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 316:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 317:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
 318:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1 or 3 to select the ADC peripheral.
 319:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   Note: ADC2 hasn't a DMA capability.
 320:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
 321:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 322:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 323:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 324:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 325:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18337              		.loc 1 325 0
 18338              		.cfi_startproc
 18339              		@ args = 0, pretend = 0, frame = 8
 18340              		@ frame_needed = 1, uses_anonymous_args = 0
 18341              		@ link register save eliminated.
 18342 0000 80B4     		push	{r7}
 18343              	.LCFI12:
 18344              		.cfi_def_cfa_offset 4
 18345 0002 83B0     		sub	sp, sp, #12
 18346              	.LCFI13:
 18347              		.cfi_def_cfa_offset 16
 18348 0004 00AF     		add	r7, sp, #0
 18349              		.cfi_offset 7, -4
 18350              	.LCFI14:
 18351              		.cfi_def_cfa_register 7
 18352 0006 7860     		str	r0, [r7, #4]
 18353 0008 0B46     		mov	r3, r1
 18354 000a FB70     		strb	r3, [r7, #3]
 326:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 327:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_DMA_PERIPH(ADCx));
 328:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 329:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18355              		.loc 1 329 0
 18356 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18357 000e 002B     		cmp	r3, #0
 18358 0010 06D0     		beq	.L15
 330:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 331:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC DMA request */
 332:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_DMA_Set;
 18359              		.loc 1 332 0
 18360 0012 7B68     		ldr	r3, [r7, #4]
 18361 0014 9B68     		ldr	r3, [r3, #8]
 18362 0016 43F48072 		orr	r2, r3, #256
 18363 001a 7B68     		ldr	r3, [r7, #4]
 18364 001c 9A60     		str	r2, [r3, #8]
 18365 001e 05E0     		b	.L14
 18366              	.L15:
 333:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 334:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 335:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 336:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC DMA request */
 337:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_DMA_Reset;
 18367              		.loc 1 337 0
 18368 0020 7B68     		ldr	r3, [r7, #4]
 18369 0022 9B68     		ldr	r3, [r3, #8]
 18370 0024 23F48072 		bic	r2, r3, #256
 18371 0028 7B68     		ldr	r3, [r7, #4]
 18372 002a 9A60     		str	r2, [r3, #8]
 18373              	.L14:
 338:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 339:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18374              		.loc 1 339 0
 18375 002c 07F10C07 		add	r7, r7, #12
 18376 0030 BD46     		mov	sp, r7
 18377 0032 80BC     		pop	{r7}
 18378 0034 7047     		bx	lr
 18379              		.cfi_endproc
 18380              	.LFE33:
 18382 0036 00BF     		.section	.text.ADC_ITConfig,"ax",%progbits
 18383              		.align	2
 18384              		.global	ADC_ITConfig
 18385              		.thumb
 18386              		.thumb_func
 18388              	ADC_ITConfig:
 18389              	.LFB34:
 340:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 341:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 342:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
 343:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 344:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
 345:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
 346:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
 347:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
 348:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
 349:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
 350:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 351:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 352:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 353:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
 354:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18390              		.loc 1 354 0
 18391              		.cfi_startproc
 18392              		@ args = 0, pretend = 0, frame = 16
 18393              		@ frame_needed = 1, uses_anonymous_args = 0
 18394              		@ link register save eliminated.
 18395 0000 80B4     		push	{r7}
 18396              	.LCFI15:
 18397              		.cfi_def_cfa_offset 4
 18398 0002 85B0     		sub	sp, sp, #20
 18399              	.LCFI16:
 18400              		.cfi_def_cfa_offset 24
 18401 0004 00AF     		add	r7, sp, #0
 18402              		.cfi_offset 7, -4
 18403              	.LCFI17:
 18404              		.cfi_def_cfa_register 7
 18405 0006 7860     		str	r0, [r7, #4]
 18406 0008 1346     		mov	r3, r2
 18407 000a 0A46     		mov	r2, r1	@ movhi
 18408 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 18409 000e 7B70     		strb	r3, [r7, #1]
 355:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint8_t itmask = 0;
 18410              		.loc 1 355 0
 18411 0010 4FF00003 		mov	r3, #0
 18412 0014 FB73     		strb	r3, [r7, #15]
 356:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 357:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 358:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 359:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
 360:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
 361:../StdPeripheralDriver/src/stm32f10x_adc.c ****   itmask = (uint8_t)ADC_IT;
 18413              		.loc 1 361 0
 18414 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 18415 0018 FB73     		strb	r3, [r7, #15]
 362:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18416              		.loc 1 362 0
 18417 001a 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 18418 001c 002B     		cmp	r3, #0
 18419 001e 06D0     		beq	.L18
 363:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 364:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC interrupts */
 365:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= itmask;
 18420              		.loc 1 365 0
 18421 0020 7B68     		ldr	r3, [r7, #4]
 18422 0022 5A68     		ldr	r2, [r3, #4]
 18423 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 18424 0026 1A43     		orrs	r2, r2, r3
 18425 0028 7B68     		ldr	r3, [r7, #4]
 18426 002a 5A60     		str	r2, [r3, #4]
 18427 002c 07E0     		b	.L17
 18428              	.L18:
 366:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 367:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 368:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 369:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC interrupts */
 370:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 18429              		.loc 1 370 0
 18430 002e 7B68     		ldr	r3, [r7, #4]
 18431 0030 5A68     		ldr	r2, [r3, #4]
 18432 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 18433 0034 6FEA0303 		mvn	r3, r3
 18434 0038 1A40     		ands	r2, r2, r3
 18435 003a 7B68     		ldr	r3, [r7, #4]
 18436 003c 5A60     		str	r2, [r3, #4]
 18437              	.L17:
 371:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 372:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18438              		.loc 1 372 0
 18439 003e 07F11407 		add	r7, r7, #20
 18440 0042 BD46     		mov	sp, r7
 18441 0044 80BC     		pop	{r7}
 18442 0046 7047     		bx	lr
 18443              		.cfi_endproc
 18444              	.LFE34:
 18446              		.section	.text.ADC_ResetCalibration,"ax",%progbits
 18447              		.align	2
 18448              		.global	ADC_ResetCalibration
 18449              		.thumb
 18450              		.thumb_func
 18452              	ADC_ResetCalibration:
 18453              	.LFB35:
 373:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 374:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 375:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Resets the selected ADC calibration registers.
 376:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 377:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 378:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 379:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ResetCalibration(ADC_TypeDef* ADCx)
 380:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18454              		.loc 1 380 0
 18455              		.cfi_startproc
 18456              		@ args = 0, pretend = 0, frame = 8
 18457              		@ frame_needed = 1, uses_anonymous_args = 0
 18458              		@ link register save eliminated.
 18459 0000 80B4     		push	{r7}
 18460              	.LCFI18:
 18461              		.cfi_def_cfa_offset 4
 18462 0002 83B0     		sub	sp, sp, #12
 18463              	.LCFI19:
 18464              		.cfi_def_cfa_offset 16
 18465 0004 00AF     		add	r7, sp, #0
 18466              		.cfi_offset 7, -4
 18467              	.LCFI20:
 18468              		.cfi_def_cfa_register 7
 18469 0006 7860     		str	r0, [r7, #4]
 381:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 382:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 383:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Resets the selected ADC calibration registers */  
 384:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 |= CR2_RSTCAL_Set;
 18470              		.loc 1 384 0
 18471 0008 7B68     		ldr	r3, [r7, #4]
 18472 000a 9B68     		ldr	r3, [r3, #8]
 18473 000c 43F00802 		orr	r2, r3, #8
 18474 0010 7B68     		ldr	r3, [r7, #4]
 18475 0012 9A60     		str	r2, [r3, #8]
 385:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18476              		.loc 1 385 0
 18477 0014 07F10C07 		add	r7, r7, #12
 18478 0018 BD46     		mov	sp, r7
 18479 001a 80BC     		pop	{r7}
 18480 001c 7047     		bx	lr
 18481              		.cfi_endproc
 18482              	.LFE35:
 18484 001e 00BF     		.section	.text.ADC_GetResetCalibrationStatus,"ax",%progbits
 18485              		.align	2
 18486              		.global	ADC_GetResetCalibrationStatus
 18487              		.thumb
 18488              		.thumb_func
 18490              	ADC_GetResetCalibrationStatus:
 18491              	.LFB36:
 386:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 387:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 388:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC reset calibration registers status.
 389:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 390:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC reset calibration registers (SET or RESET).
 391:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 392:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
 393:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18492              		.loc 1 393 0
 18493              		.cfi_startproc
 18494              		@ args = 0, pretend = 0, frame = 16
 18495              		@ frame_needed = 1, uses_anonymous_args = 0
 18496              		@ link register save eliminated.
 18497 0000 80B4     		push	{r7}
 18498              	.LCFI21:
 18499              		.cfi_def_cfa_offset 4
 18500 0002 85B0     		sub	sp, sp, #20
 18501              	.LCFI22:
 18502              		.cfi_def_cfa_offset 24
 18503 0004 00AF     		add	r7, sp, #0
 18504              		.cfi_offset 7, -4
 18505              	.LCFI23:
 18506              		.cfi_def_cfa_register 7
 18507 0006 7860     		str	r0, [r7, #4]
 394:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 18508              		.loc 1 394 0
 18509 0008 4FF00003 		mov	r3, #0
 18510 000c FB73     		strb	r3, [r7, #15]
 395:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 396:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 397:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of RSTCAL bit */
 398:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 18511              		.loc 1 398 0
 18512 000e 7B68     		ldr	r3, [r7, #4]
 18513 0010 9B68     		ldr	r3, [r3, #8]
 18514 0012 03F00803 		and	r3, r3, #8
 18515 0016 002B     		cmp	r3, #0
 18516 0018 03D0     		beq	.L22
 399:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 400:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* RSTCAL bit is set */
 401:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 18517              		.loc 1 401 0
 18518 001a 4FF00103 		mov	r3, #1
 18519 001e FB73     		strb	r3, [r7, #15]
 18520 0020 02E0     		b	.L23
 18521              	.L22:
 402:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 403:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 404:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 405:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* RSTCAL bit is reset */
 406:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 18522              		.loc 1 406 0
 18523 0022 4FF00003 		mov	r3, #0
 18524 0026 FB73     		strb	r3, [r7, #15]
 18525              	.L23:
 407:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 408:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the RSTCAL bit status */
 409:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 18526              		.loc 1 409 0
 18527 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 410:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18528              		.loc 1 410 0
 18529 002a 1846     		mov	r0, r3
 18530 002c 07F11407 		add	r7, r7, #20
 18531 0030 BD46     		mov	sp, r7
 18532 0032 80BC     		pop	{r7}
 18533 0034 7047     		bx	lr
 18534              		.cfi_endproc
 18535              	.LFE36:
 18537 0036 00BF     		.section	.text.ADC_StartCalibration,"ax",%progbits
 18538              		.align	2
 18539              		.global	ADC_StartCalibration
 18540              		.thumb
 18541              		.thumb_func
 18543              	ADC_StartCalibration:
 18544              	.LFB37:
 411:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 412:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 413:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Starts the selected ADC calibration process.
 414:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 415:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 416:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 417:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_StartCalibration(ADC_TypeDef* ADCx)
 418:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18545              		.loc 1 418 0
 18546              		.cfi_startproc
 18547              		@ args = 0, pretend = 0, frame = 8
 18548              		@ frame_needed = 1, uses_anonymous_args = 0
 18549              		@ link register save eliminated.
 18550 0000 80B4     		push	{r7}
 18551              	.LCFI24:
 18552              		.cfi_def_cfa_offset 4
 18553 0002 83B0     		sub	sp, sp, #12
 18554              	.LCFI25:
 18555              		.cfi_def_cfa_offset 16
 18556 0004 00AF     		add	r7, sp, #0
 18557              		.cfi_offset 7, -4
 18558              	.LCFI26:
 18559              		.cfi_def_cfa_register 7
 18560 0006 7860     		str	r0, [r7, #4]
 419:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 420:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 421:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Enable the selected ADC calibration process */  
 422:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 |= CR2_CAL_Set;
 18561              		.loc 1 422 0
 18562 0008 7B68     		ldr	r3, [r7, #4]
 18563 000a 9B68     		ldr	r3, [r3, #8]
 18564 000c 43F00402 		orr	r2, r3, #4
 18565 0010 7B68     		ldr	r3, [r7, #4]
 18566 0012 9A60     		str	r2, [r3, #8]
 423:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18567              		.loc 1 423 0
 18568 0014 07F10C07 		add	r7, r7, #12
 18569 0018 BD46     		mov	sp, r7
 18570 001a 80BC     		pop	{r7}
 18571 001c 7047     		bx	lr
 18572              		.cfi_endproc
 18573              	.LFE37:
 18575 001e 00BF     		.section	.text.ADC_GetCalibrationStatus,"ax",%progbits
 18576              		.align	2
 18577              		.global	ADC_GetCalibrationStatus
 18578              		.thumb
 18579              		.thumb_func
 18581              	ADC_GetCalibrationStatus:
 18582              	.LFB38:
 424:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 425:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 426:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC calibration status.
 427:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 428:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC calibration (SET or RESET).
 429:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 430:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
 431:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18583              		.loc 1 431 0
 18584              		.cfi_startproc
 18585              		@ args = 0, pretend = 0, frame = 16
 18586              		@ frame_needed = 1, uses_anonymous_args = 0
 18587              		@ link register save eliminated.
 18588 0000 80B4     		push	{r7}
 18589              	.LCFI27:
 18590              		.cfi_def_cfa_offset 4
 18591 0002 85B0     		sub	sp, sp, #20
 18592              	.LCFI28:
 18593              		.cfi_def_cfa_offset 24
 18594 0004 00AF     		add	r7, sp, #0
 18595              		.cfi_offset 7, -4
 18596              	.LCFI29:
 18597              		.cfi_def_cfa_register 7
 18598 0006 7860     		str	r0, [r7, #4]
 432:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 18599              		.loc 1 432 0
 18600 0008 4FF00003 		mov	r3, #0
 18601 000c FB73     		strb	r3, [r7, #15]
 433:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 434:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 435:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of CAL bit */
 436:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 18602              		.loc 1 436 0
 18603 000e 7B68     		ldr	r3, [r7, #4]
 18604 0010 9B68     		ldr	r3, [r3, #8]
 18605 0012 03F00403 		and	r3, r3, #4
 18606 0016 002B     		cmp	r3, #0
 18607 0018 03D0     		beq	.L26
 437:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 438:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* CAL bit is set: calibration on going */
 439:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 18608              		.loc 1 439 0
 18609 001a 4FF00103 		mov	r3, #1
 18610 001e FB73     		strb	r3, [r7, #15]
 18611 0020 02E0     		b	.L27
 18612              	.L26:
 440:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 441:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 442:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 443:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* CAL bit is reset: end of calibration */
 444:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 18613              		.loc 1 444 0
 18614 0022 4FF00003 		mov	r3, #0
 18615 0026 FB73     		strb	r3, [r7, #15]
 18616              	.L27:
 445:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 446:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the CAL bit status */
 447:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 18617              		.loc 1 447 0
 18618 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 448:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18619              		.loc 1 448 0
 18620 002a 1846     		mov	r0, r3
 18621 002c 07F11407 		add	r7, r7, #20
 18622 0030 BD46     		mov	sp, r7
 18623 0032 80BC     		pop	{r7}
 18624 0034 7047     		bx	lr
 18625              		.cfi_endproc
 18626              	.LFE38:
 18628 0036 00BF     		.section	.text.ADC_SoftwareStartConvCmd,"ax",%progbits
 18629              		.align	2
 18630              		.global	ADC_SoftwareStartConvCmd
 18631              		.thumb
 18632              		.thumb_func
 18634              	ADC_SoftwareStartConvCmd:
 18635              	.LFB39:
 449:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 450:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 451:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC software start conversion .
 452:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 453:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC software start conversion.
 454:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 455:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 456:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 457:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 458:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18636              		.loc 1 458 0
 18637              		.cfi_startproc
 18638              		@ args = 0, pretend = 0, frame = 8
 18639              		@ frame_needed = 1, uses_anonymous_args = 0
 18640              		@ link register save eliminated.
 18641 0000 80B4     		push	{r7}
 18642              	.LCFI30:
 18643              		.cfi_def_cfa_offset 4
 18644 0002 83B0     		sub	sp, sp, #12
 18645              	.LCFI31:
 18646              		.cfi_def_cfa_offset 16
 18647 0004 00AF     		add	r7, sp, #0
 18648              		.cfi_offset 7, -4
 18649              	.LCFI32:
 18650              		.cfi_def_cfa_register 7
 18651 0006 7860     		str	r0, [r7, #4]
 18652 0008 0B46     		mov	r3, r1
 18653 000a FB70     		strb	r3, [r7, #3]
 459:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 460:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 461:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 462:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18654              		.loc 1 462 0
 18655 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18656 000e 002B     		cmp	r3, #0
 18657 0010 06D0     		beq	.L29
 463:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 464:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion on external event and start the selected
 465:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC conversion */
 466:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 18658              		.loc 1 466 0
 18659 0012 7B68     		ldr	r3, [r7, #4]
 18660 0014 9B68     		ldr	r3, [r3, #8]
 18661 0016 43F4A002 		orr	r2, r3, #5242880
 18662 001a 7B68     		ldr	r3, [r7, #4]
 18663 001c 9A60     		str	r2, [r3, #8]
 18664 001e 05E0     		b	.L28
 18665              	.L29:
 467:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 468:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 469:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 470:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event and stop the selected
 471:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC conversion */
 472:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 18666              		.loc 1 472 0
 18667 0020 7B68     		ldr	r3, [r7, #4]
 18668 0022 9B68     		ldr	r3, [r3, #8]
 18669 0024 23F4A002 		bic	r2, r3, #5242880
 18670 0028 7B68     		ldr	r3, [r7, #4]
 18671 002a 9A60     		str	r2, [r3, #8]
 18672              	.L28:
 473:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 474:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18673              		.loc 1 474 0
 18674 002c 07F10C07 		add	r7, r7, #12
 18675 0030 BD46     		mov	sp, r7
 18676 0032 80BC     		pop	{r7}
 18677 0034 7047     		bx	lr
 18678              		.cfi_endproc
 18679              	.LFE39:
 18681 0036 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 18682              		.align	2
 18683              		.global	ADC_GetSoftwareStartConvStatus
 18684              		.thumb
 18685              		.thumb_func
 18687              	ADC_GetSoftwareStartConvStatus:
 18688              	.LFB40:
 475:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 476:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 477:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC Software start conversion Status.
 478:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 479:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 480:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 481:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 482:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18689              		.loc 1 482 0
 18690              		.cfi_startproc
 18691              		@ args = 0, pretend = 0, frame = 16
 18692              		@ frame_needed = 1, uses_anonymous_args = 0
 18693              		@ link register save eliminated.
 18694 0000 80B4     		push	{r7}
 18695              	.LCFI33:
 18696              		.cfi_def_cfa_offset 4
 18697 0002 85B0     		sub	sp, sp, #20
 18698              	.LCFI34:
 18699              		.cfi_def_cfa_offset 24
 18700 0004 00AF     		add	r7, sp, #0
 18701              		.cfi_offset 7, -4
 18702              	.LCFI35:
 18703              		.cfi_def_cfa_register 7
 18704 0006 7860     		str	r0, [r7, #4]
 483:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 18705              		.loc 1 483 0
 18706 0008 4FF00003 		mov	r3, #0
 18707 000c FB73     		strb	r3, [r7, #15]
 484:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 485:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 486:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of SWSTART bit */
 487:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
 18708              		.loc 1 487 0
 18709 000e 7B68     		ldr	r3, [r7, #4]
 18710 0010 9B68     		ldr	r3, [r3, #8]
 18711 0012 03F48003 		and	r3, r3, #4194304
 18712 0016 002B     		cmp	r3, #0
 18713 0018 03D0     		beq	.L32
 488:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 489:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* SWSTART bit is set */
 490:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 18714              		.loc 1 490 0
 18715 001a 4FF00103 		mov	r3, #1
 18716 001e FB73     		strb	r3, [r7, #15]
 18717 0020 02E0     		b	.L33
 18718              	.L32:
 491:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 492:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 493:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 494:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* SWSTART bit is reset */
 495:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 18719              		.loc 1 495 0
 18720 0022 4FF00003 		mov	r3, #0
 18721 0026 FB73     		strb	r3, [r7, #15]
 18722              	.L33:
 496:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 497:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the SWSTART bit status */
 498:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 18723              		.loc 1 498 0
 18724 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 499:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18725              		.loc 1 499 0
 18726 002a 1846     		mov	r0, r3
 18727 002c 07F11407 		add	r7, r7, #20
 18728 0030 BD46     		mov	sp, r7
 18729 0032 80BC     		pop	{r7}
 18730 0034 7047     		bx	lr
 18731              		.cfi_endproc
 18732              	.LFE40:
 18734 0036 00BF     		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 18735              		.align	2
 18736              		.global	ADC_DiscModeChannelCountConfig
 18737              		.thumb
 18738              		.thumb_func
 18740              	ADC_DiscModeChannelCountConfig:
 18741              	.LFB41:
 500:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 501:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 502:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular
 503:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         group channel.
 504:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 505:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel
 506:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         count value. This number must be between 1 and 8.
 507:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 508:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 509:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 510:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18742              		.loc 1 510 0
 18743              		.cfi_startproc
 18744              		@ args = 0, pretend = 0, frame = 16
 18745              		@ frame_needed = 1, uses_anonymous_args = 0
 18746              		@ link register save eliminated.
 18747 0000 80B4     		push	{r7}
 18748              	.LCFI36:
 18749              		.cfi_def_cfa_offset 4
 18750 0002 85B0     		sub	sp, sp, #20
 18751              	.LCFI37:
 18752              		.cfi_def_cfa_offset 24
 18753 0004 00AF     		add	r7, sp, #0
 18754              		.cfi_offset 7, -4
 18755              	.LCFI38:
 18756              		.cfi_def_cfa_register 7
 18757 0006 7860     		str	r0, [r7, #4]
 18758 0008 0B46     		mov	r3, r1
 18759 000a FB70     		strb	r3, [r7, #3]
 511:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 18760              		.loc 1 511 0
 18761 000c 4FF00003 		mov	r3, #0
 18762 0010 FB60     		str	r3, [r7, #12]
 512:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg2 = 0;
 18763              		.loc 1 512 0
 18764 0012 4FF00003 		mov	r3, #0
 18765 0016 BB60     		str	r3, [r7, #8]
 513:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 514:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 515:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 516:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
 517:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->CR1;
 18766              		.loc 1 517 0
 18767 0018 7B68     		ldr	r3, [r7, #4]
 18768 001a 5B68     		ldr	r3, [r3, #4]
 18769 001c FB60     		str	r3, [r7, #12]
 518:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old discontinuous mode channel count */
 519:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= CR1_DISCNUM_Reset;
 18770              		.loc 1 519 0
 18771 001e FB68     		ldr	r3, [r7, #12]
 18772 0020 23F46043 		bic	r3, r3, #57344
 18773 0024 FB60     		str	r3, [r7, #12]
 520:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the discontinuous mode channel count */
 521:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = Number - 1;
 18774              		.loc 1 521 0
 18775 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18776 0028 03F1FF33 		add	r3, r3, #-1
 18777 002c BB60     		str	r3, [r7, #8]
 522:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 18778              		.loc 1 522 0
 18779 002e BB68     		ldr	r3, [r7, #8]
 18780 0030 4FEA4333 		lsl	r3, r3, #13
 18781 0034 FA68     		ldr	r2, [r7, #12]
 18782 0036 42EA0303 		orr	r3, r2, r3
 18783 003a FB60     		str	r3, [r7, #12]
 523:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
 524:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg1;
 18784              		.loc 1 524 0
 18785 003c 7B68     		ldr	r3, [r7, #4]
 18786 003e FA68     		ldr	r2, [r7, #12]
 18787 0040 5A60     		str	r2, [r3, #4]
 525:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18788              		.loc 1 525 0
 18789 0042 07F11407 		add	r7, r7, #20
 18790 0046 BD46     		mov	sp, r7
 18791 0048 80BC     		pop	{r7}
 18792 004a 7047     		bx	lr
 18793              		.cfi_endproc
 18794              	.LFE41:
 18796              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 18797              		.align	2
 18798              		.global	ADC_DiscModeCmd
 18799              		.thumb
 18800              		.thumb_func
 18802              	ADC_DiscModeCmd:
 18803              	.LFB42:
 526:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 527:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 528:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group
 529:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         channel for the specified ADC
 530:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 531:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode
 532:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         on regular group channel.
 533:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         This parameter can be: ENABLE or DISABLE.
 534:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 535:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 536:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 537:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18804              		.loc 1 537 0
 18805              		.cfi_startproc
 18806              		@ args = 0, pretend = 0, frame = 8
 18807              		@ frame_needed = 1, uses_anonymous_args = 0
 18808              		@ link register save eliminated.
 18809 0000 80B4     		push	{r7}
 18810              	.LCFI39:
 18811              		.cfi_def_cfa_offset 4
 18812 0002 83B0     		sub	sp, sp, #12
 18813              	.LCFI40:
 18814              		.cfi_def_cfa_offset 16
 18815 0004 00AF     		add	r7, sp, #0
 18816              		.cfi_offset 7, -4
 18817              	.LCFI41:
 18818              		.cfi_def_cfa_register 7
 18819 0006 7860     		str	r0, [r7, #4]
 18820 0008 0B46     		mov	r3, r1
 18821 000a FB70     		strb	r3, [r7, #3]
 538:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 539:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 540:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 541:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 18822              		.loc 1 541 0
 18823 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18824 000e 002B     		cmp	r3, #0
 18825 0010 06D0     		beq	.L36
 542:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 543:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 544:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_DISCEN_Set;
 18826              		.loc 1 544 0
 18827 0012 7B68     		ldr	r3, [r7, #4]
 18828 0014 5B68     		ldr	r3, [r3, #4]
 18829 0016 43F40062 		orr	r2, r3, #2048
 18830 001a 7B68     		ldr	r3, [r7, #4]
 18831 001c 5A60     		str	r2, [r3, #4]
 18832 001e 05E0     		b	.L35
 18833              	.L36:
 545:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 546:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 547:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 548:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 549:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_DISCEN_Reset;
 18834              		.loc 1 549 0
 18835 0020 7B68     		ldr	r3, [r7, #4]
 18836 0022 5B68     		ldr	r3, [r3, #4]
 18837 0024 23F40062 		bic	r2, r3, #2048
 18838 0028 7B68     		ldr	r3, [r7, #4]
 18839 002a 5A60     		str	r2, [r3, #4]
 18840              	.L35:
 550:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 551:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 18841              		.loc 1 551 0
 18842 002c 07F10C07 		add	r7, r7, #12
 18843 0030 BD46     		mov	sp, r7
 18844 0032 80BC     		pop	{r7}
 18845 0034 7047     		bx	lr
 18846              		.cfi_endproc
 18847              	.LFE42:
 18849 0036 00BF     		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 18850              		.align	2
 18851              		.global	ADC_RegularChannelConfig
 18852              		.thumb
 18853              		.thumb_func
 18855              	ADC_RegularChannelConfig:
 18856              	.LFB43:
 552:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 553:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 554:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 555:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         rank in the sequencer and its sample time.
 556:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 557:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 558:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 559:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
 560:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 561:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 562:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 563:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 564:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 565:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 566:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 567:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 568:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 569:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 570:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 571:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 572:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 573:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 574:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
 575:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
 576:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
 577:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Rank: The rank in the regular group sequencer. This parameter must be between 1 to 16.
 578:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 579:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 580:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
 581:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles
 582:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles
 583:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles	
 584:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles	
 585:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles	
 586:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
 587:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
 588:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 589:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 590:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 591:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 18857              		.loc 1 591 0
 18858              		.cfi_startproc
 18859              		@ args = 0, pretend = 0, frame = 16
 18860              		@ frame_needed = 1, uses_anonymous_args = 0
 18861              		@ link register save eliminated.
 18862 0000 80B4     		push	{r7}
 18863              	.LCFI42:
 18864              		.cfi_def_cfa_offset 4
 18865 0002 85B0     		sub	sp, sp, #20
 18866              	.LCFI43:
 18867              		.cfi_def_cfa_offset 24
 18868 0004 00AF     		add	r7, sp, #0
 18869              		.cfi_offset 7, -4
 18870              	.LCFI44:
 18871              		.cfi_def_cfa_register 7
 18872 0006 7860     		str	r0, [r7, #4]
 18873 0008 F970     		strb	r1, [r7, #3]
 18874 000a BA70     		strb	r2, [r7, #2]
 18875 000c 7B70     		strb	r3, [r7, #1]
 592:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 18876              		.loc 1 592 0
 18877 000e 4FF00003 		mov	r3, #0
 18878 0012 FB60     		str	r3, [r7, #12]
 18879 0014 4FF00003 		mov	r3, #0
 18880 0018 BB60     		str	r3, [r7, #8]
 593:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 594:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 595:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 596:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 597:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 598:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
 599:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 18881              		.loc 1 599 0
 18882 001a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18883 001c 092B     		cmp	r3, #9
 18884 001e 29D9     		bls	.L39
 600:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 601:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 602:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR1;
 18885              		.loc 1 602 0
 18886 0020 7B68     		ldr	r3, [r7, #4]
 18887 0022 DB68     		ldr	r3, [r3, #12]
 18888 0024 FB60     		str	r3, [r7, #12]
 603:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 604:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 18889              		.loc 1 604 0
 18890 0026 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18891 0028 1346     		mov	r3, r2
 18892 002a 4FEA4303 		lsl	r3, r3, #1
 18893 002e 9B18     		adds	r3, r3, r2
 18894 0030 A3F11E03 		sub	r3, r3, #30
 18895 0034 4FF00702 		mov	r2, #7
 18896 0038 02FA03F3 		lsl	r3, r2, r3
 18897 003c BB60     		str	r3, [r7, #8]
 605:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 606:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 18898              		.loc 1 606 0
 18899 003e BB68     		ldr	r3, [r7, #8]
 18900 0040 6FEA0303 		mvn	r3, r3
 18901 0044 FA68     		ldr	r2, [r7, #12]
 18902 0046 02EA0303 		and	r3, r2, r3
 18903 004a FB60     		str	r3, [r7, #12]
 607:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 608:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 18904              		.loc 1 608 0
 18905 004c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 18906 004e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18907 0050 1346     		mov	r3, r2
 18908 0052 4FEA4303 		lsl	r3, r3, #1
 18909 0056 9B18     		adds	r3, r3, r2
 18910 0058 A3F11E03 		sub	r3, r3, #30
 18911 005c 01FA03F3 		lsl	r3, r1, r3
 18912 0060 BB60     		str	r3, [r7, #8]
 609:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 610:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 18913              		.loc 1 610 0
 18914 0062 FA68     		ldr	r2, [r7, #12]
 18915 0064 BB68     		ldr	r3, [r7, #8]
 18916 0066 42EA0303 		orr	r3, r2, r3
 18917 006a FB60     		str	r3, [r7, #12]
 611:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 612:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR1 = tmpreg1;
 18918              		.loc 1 612 0
 18919 006c 7B68     		ldr	r3, [r7, #4]
 18920 006e FA68     		ldr	r2, [r7, #12]
 18921 0070 DA60     		str	r2, [r3, #12]
 18922 0072 24E0     		b	.L40
 18923              	.L39:
 613:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 614:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 615:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 616:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 617:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR2;
 18924              		.loc 1 617 0
 18925 0074 7B68     		ldr	r3, [r7, #4]
 18926 0076 1B69     		ldr	r3, [r3, #16]
 18927 0078 FB60     		str	r3, [r7, #12]
 618:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 619:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 18928              		.loc 1 619 0
 18929 007a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18930 007c 1346     		mov	r3, r2
 18931 007e 4FEA4303 		lsl	r3, r3, #1
 18932 0082 9B18     		adds	r3, r3, r2
 18933 0084 4FF00702 		mov	r2, #7
 18934 0088 02FA03F3 		lsl	r3, r2, r3
 18935 008c BB60     		str	r3, [r7, #8]
 620:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 621:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 18936              		.loc 1 621 0
 18937 008e BB68     		ldr	r3, [r7, #8]
 18938 0090 6FEA0303 		mvn	r3, r3
 18939 0094 FA68     		ldr	r2, [r7, #12]
 18940 0096 02EA0303 		and	r3, r2, r3
 18941 009a FB60     		str	r3, [r7, #12]
 622:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 623:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 18942              		.loc 1 623 0
 18943 009c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 18944 009e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 18945 00a0 1346     		mov	r3, r2
 18946 00a2 4FEA4303 		lsl	r3, r3, #1
 18947 00a6 9B18     		adds	r3, r3, r2
 18948 00a8 01FA03F3 		lsl	r3, r1, r3
 18949 00ac BB60     		str	r3, [r7, #8]
 624:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 625:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 18950              		.loc 1 625 0
 18951 00ae FA68     		ldr	r2, [r7, #12]
 18952 00b0 BB68     		ldr	r3, [r7, #8]
 18953 00b2 42EA0303 		orr	r3, r2, r3
 18954 00b6 FB60     		str	r3, [r7, #12]
 626:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 627:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR2 = tmpreg1;
 18955              		.loc 1 627 0
 18956 00b8 7B68     		ldr	r3, [r7, #4]
 18957 00ba FA68     		ldr	r2, [r7, #12]
 18958 00bc 1A61     		str	r2, [r3, #16]
 18959              	.L40:
 628:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 629:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* For Rank 1 to 6 */
 630:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (Rank < 7)
 18960              		.loc 1 630 0
 18961 00be BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 18962 00c0 062B     		cmp	r3, #6
 18963 00c2 29D8     		bhi	.L41
 631:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 632:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 633:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR3;
 18964              		.loc 1 633 0
 18965 00c4 7B68     		ldr	r3, [r7, #4]
 18966 00c6 5B6B     		ldr	r3, [r3, #52]
 18967 00c8 FB60     		str	r3, [r7, #12]
 634:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 635:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 18968              		.loc 1 635 0
 18969 00ca BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 18970 00cc 03F1FF32 		add	r2, r3, #-1
 18971 00d0 1346     		mov	r3, r2
 18972 00d2 4FEA8303 		lsl	r3, r3, #2
 18973 00d6 9B18     		adds	r3, r3, r2
 18974 00d8 4FF01F02 		mov	r2, #31
 18975 00dc 02FA03F3 		lsl	r3, r2, r3
 18976 00e0 BB60     		str	r3, [r7, #8]
 636:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 637:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 18977              		.loc 1 637 0
 18978 00e2 BB68     		ldr	r3, [r7, #8]
 18979 00e4 6FEA0303 		mvn	r3, r3
 18980 00e8 FA68     		ldr	r2, [r7, #12]
 18981 00ea 02EA0303 		and	r3, r2, r3
 18982 00ee FB60     		str	r3, [r7, #12]
 638:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 639:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 18983              		.loc 1 639 0
 18984 00f0 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 18985 00f2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 18986 00f4 03F1FF32 		add	r2, r3, #-1
 18987 00f8 1346     		mov	r3, r2
 18988 00fa 4FEA8303 		lsl	r3, r3, #2
 18989 00fe 9B18     		adds	r3, r3, r2
 18990 0100 01FA03F3 		lsl	r3, r1, r3
 18991 0104 BB60     		str	r3, [r7, #8]
 640:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 641:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 18992              		.loc 1 641 0
 18993 0106 FA68     		ldr	r2, [r7, #12]
 18994 0108 BB68     		ldr	r3, [r7, #8]
 18995 010a 42EA0303 		orr	r3, r2, r3
 18996 010e FB60     		str	r3, [r7, #12]
 642:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 643:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SQR3 = tmpreg1;
 18997              		.loc 1 643 0
 18998 0110 7B68     		ldr	r3, [r7, #4]
 18999 0112 FA68     		ldr	r2, [r7, #12]
 19000 0114 5A63     		str	r2, [r3, #52]
 19001 0116 55E0     		b	.L38
 19002              	.L41:
 644:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 645:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* For Rank 7 to 12 */
 646:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else if (Rank < 13)
 19003              		.loc 1 646 0
 19004 0118 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 19005 011a 0C2B     		cmp	r3, #12
 19006 011c 29D8     		bhi	.L43
 647:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 648:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 649:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR2;
 19007              		.loc 1 649 0
 19008 011e 7B68     		ldr	r3, [r7, #4]
 19009 0120 1B6B     		ldr	r3, [r3, #48]
 19010 0122 FB60     		str	r3, [r7, #12]
 650:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 651:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 19011              		.loc 1 651 0
 19012 0124 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 19013 0126 1346     		mov	r3, r2
 19014 0128 4FEA8303 		lsl	r3, r3, #2
 19015 012c 9B18     		adds	r3, r3, r2
 19016 012e A3F12303 		sub	r3, r3, #35
 19017 0132 4FF01F02 		mov	r2, #31
 19018 0136 02FA03F3 		lsl	r3, r2, r3
 19019 013a BB60     		str	r3, [r7, #8]
 652:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 653:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 19020              		.loc 1 653 0
 19021 013c BB68     		ldr	r3, [r7, #8]
 19022 013e 6FEA0303 		mvn	r3, r3
 19023 0142 FA68     		ldr	r2, [r7, #12]
 19024 0144 02EA0303 		and	r3, r2, r3
 19025 0148 FB60     		str	r3, [r7, #12]
 654:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 655:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 19026              		.loc 1 655 0
 19027 014a F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 19028 014c BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 19029 014e 1346     		mov	r3, r2
 19030 0150 4FEA8303 		lsl	r3, r3, #2
 19031 0154 9B18     		adds	r3, r3, r2
 19032 0156 A3F12303 		sub	r3, r3, #35
 19033 015a 01FA03F3 		lsl	r3, r1, r3
 19034 015e BB60     		str	r3, [r7, #8]
 656:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 657:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 19035              		.loc 1 657 0
 19036 0160 FA68     		ldr	r2, [r7, #12]
 19037 0162 BB68     		ldr	r3, [r7, #8]
 19038 0164 42EA0303 		orr	r3, r2, r3
 19039 0168 FB60     		str	r3, [r7, #12]
 658:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 659:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SQR2 = tmpreg1;
 19040              		.loc 1 659 0
 19041 016a 7B68     		ldr	r3, [r7, #4]
 19042 016c FA68     		ldr	r2, [r7, #12]
 19043 016e 1A63     		str	r2, [r3, #48]
 19044 0170 28E0     		b	.L38
 19045              	.L43:
 660:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 661:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* For Rank 13 to 16 */
 662:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 663:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 664:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 665:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SQR1;
 19046              		.loc 1 665 0
 19047 0172 7B68     		ldr	r3, [r7, #4]
 19048 0174 DB6A     		ldr	r3, [r3, #44]
 19049 0176 FB60     		str	r3, [r7, #12]
 666:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 667:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 19050              		.loc 1 667 0
 19051 0178 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 19052 017a 1346     		mov	r3, r2
 19053 017c 4FEA8303 		lsl	r3, r3, #2
 19054 0180 9B18     		adds	r3, r3, r2
 19055 0182 A3F14103 		sub	r3, r3, #65
 19056 0186 4FF01F02 		mov	r2, #31
 19057 018a 02FA03F3 		lsl	r3, r2, r3
 19058 018e BB60     		str	r3, [r7, #8]
 668:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old SQx bits for the selected rank */
 669:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 19059              		.loc 1 669 0
 19060 0190 BB68     		ldr	r3, [r7, #8]
 19061 0192 6FEA0303 		mvn	r3, r3
 19062 0196 FA68     		ldr	r2, [r7, #12]
 19063 0198 02EA0303 		and	r3, r2, r3
 19064 019c FB60     		str	r3, [r7, #12]
 670:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 671:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 19065              		.loc 1 671 0
 19066 019e F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 19067 01a0 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 19068 01a2 1346     		mov	r3, r2
 19069 01a4 4FEA8303 		lsl	r3, r3, #2
 19070 01a8 9B18     		adds	r3, r3, r2
 19071 01aa A3F14103 		sub	r3, r3, #65
 19072 01ae 01FA03F3 		lsl	r3, r1, r3
 19073 01b2 BB60     		str	r3, [r7, #8]
 672:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the SQx bits for the selected rank */
 673:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 19074              		.loc 1 673 0
 19075 01b4 FA68     		ldr	r2, [r7, #12]
 19076 01b6 BB68     		ldr	r3, [r7, #8]
 19077 01b8 42EA0303 		orr	r3, r2, r3
 19078 01bc FB60     		str	r3, [r7, #12]
 674:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 675:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SQR1 = tmpreg1;
 19079              		.loc 1 675 0
 19080 01be 7B68     		ldr	r3, [r7, #4]
 19081 01c0 FA68     		ldr	r2, [r7, #12]
 19082 01c2 DA62     		str	r2, [r3, #44]
 19083              	.L38:
 676:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 677:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19084              		.loc 1 677 0
 19085 01c4 07F11407 		add	r7, r7, #20
 19086 01c8 BD46     		mov	sp, r7
 19087 01ca 80BC     		pop	{r7}
 19088 01cc 7047     		bx	lr
 19089              		.cfi_endproc
 19090              	.LFE43:
 19092 01ce 00BF     		.section	.text.ADC_ExternalTrigConvCmd,"ax",%progbits
 19093              		.align	2
 19094              		.global	ADC_ExternalTrigConvCmd
 19095              		.thumb
 19096              		.thumb_func
 19098              	ADC_ExternalTrigConvCmd:
 19099              	.LFB44:
 678:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 679:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 680:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the ADCx conversion through external trigger.
 681:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 682:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC external trigger start of conversion.
 683:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 684:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 685:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 686:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 687:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19100              		.loc 1 687 0
 19101              		.cfi_startproc
 19102              		@ args = 0, pretend = 0, frame = 8
 19103              		@ frame_needed = 1, uses_anonymous_args = 0
 19104              		@ link register save eliminated.
 19105 0000 80B4     		push	{r7}
 19106              	.LCFI45:
 19107              		.cfi_def_cfa_offset 4
 19108 0002 83B0     		sub	sp, sp, #12
 19109              	.LCFI46:
 19110              		.cfi_def_cfa_offset 16
 19111 0004 00AF     		add	r7, sp, #0
 19112              		.cfi_offset 7, -4
 19113              	.LCFI47:
 19114              		.cfi_def_cfa_register 7
 19115 0006 7860     		str	r0, [r7, #4]
 19116 0008 0B46     		mov	r3, r1
 19117 000a FB70     		strb	r3, [r7, #3]
 688:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 689:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 690:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 691:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 19118              		.loc 1 691 0
 19119 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19120 000e 002B     		cmp	r3, #0
 19121 0010 06D0     		beq	.L45
 692:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 693:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion on external event */
 694:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_EXTTRIG_Set;
 19122              		.loc 1 694 0
 19123 0012 7B68     		ldr	r3, [r7, #4]
 19124 0014 9B68     		ldr	r3, [r3, #8]
 19125 0016 43F48012 		orr	r2, r3, #1048576
 19126 001a 7B68     		ldr	r3, [r7, #4]
 19127 001c 9A60     		str	r2, [r3, #8]
 19128 001e 05E0     		b	.L44
 19129              	.L45:
 695:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 696:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 697:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 698:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event */
 699:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_EXTTRIG_Reset;
 19130              		.loc 1 699 0
 19131 0020 7B68     		ldr	r3, [r7, #4]
 19132 0022 9B68     		ldr	r3, [r3, #8]
 19133 0024 23F48012 		bic	r2, r3, #1048576
 19134 0028 7B68     		ldr	r3, [r7, #4]
 19135 002a 9A60     		str	r2, [r3, #8]
 19136              	.L44:
 700:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 701:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19137              		.loc 1 701 0
 19138 002c 07F10C07 		add	r7, r7, #12
 19139 0030 BD46     		mov	sp, r7
 19140 0032 80BC     		pop	{r7}
 19141 0034 7047     		bx	lr
 19142              		.cfi_endproc
 19143              	.LFE44:
 19145 0036 00BF     		.section	.text.ADC_GetConversionValue,"ax",%progbits
 19146              		.align	2
 19147              		.global	ADC_GetConversionValue
 19148              		.thumb
 19149              		.thumb_func
 19151              	ADC_GetConversionValue:
 19152              	.LFB45:
 702:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 703:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 704:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 705:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 706:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
 707:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 708:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 709:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19153              		.loc 1 709 0
 19154              		.cfi_startproc
 19155              		@ args = 0, pretend = 0, frame = 8
 19156              		@ frame_needed = 1, uses_anonymous_args = 0
 19157              		@ link register save eliminated.
 19158 0000 80B4     		push	{r7}
 19159              	.LCFI48:
 19160              		.cfi_def_cfa_offset 4
 19161 0002 83B0     		sub	sp, sp, #12
 19162              	.LCFI49:
 19163              		.cfi_def_cfa_offset 16
 19164 0004 00AF     		add	r7, sp, #0
 19165              		.cfi_offset 7, -4
 19166              	.LCFI50:
 19167              		.cfi_def_cfa_register 7
 19168 0006 7860     		str	r0, [r7, #4]
 710:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 711:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 712:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the selected ADC conversion value */
 713:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return (uint16_t) ADCx->DR;
 19169              		.loc 1 713 0
 19170 0008 7B68     		ldr	r3, [r7, #4]
 19171 000a DB6C     		ldr	r3, [r3, #76]
 19172 000c 9BB2     		uxth	r3, r3
 714:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19173              		.loc 1 714 0
 19174 000e 1846     		mov	r0, r3
 19175 0010 07F10C07 		add	r7, r7, #12
 19176 0014 BD46     		mov	sp, r7
 19177 0016 80BC     		pop	{r7}
 19178 0018 7047     		bx	lr
 19179              		.cfi_endproc
 19180              	.LFE45:
 19182 001a 00BF     		.section	.text.ADC_GetDualModeConversionValue,"ax",%progbits
 19183              		.align	2
 19184              		.global	ADC_GetDualModeConversionValue
 19185              		.thumb
 19186              		.thumb_func
 19188              	ADC_GetDualModeConversionValue:
 19189              	.LFB46:
 715:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 716:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 717:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
 718:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
 719:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 720:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint32_t ADC_GetDualModeConversionValue(void)
 721:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19190              		.loc 1 721 0
 19191              		.cfi_startproc
 19192              		@ args = 0, pretend = 0, frame = 0
 19193              		@ frame_needed = 1, uses_anonymous_args = 0
 19194              		@ link register save eliminated.
 19195 0000 80B4     		push	{r7}
 19196              	.LCFI51:
 19197              		.cfi_def_cfa_offset 4
 19198 0002 00AF     		add	r7, sp, #0
 19199              		.cfi_offset 7, -4
 19200              	.LCFI52:
 19201              		.cfi_def_cfa_register 7
 722:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the dual mode conversion value */
 723:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return (*(__IO uint32_t *) DR_ADDRESS);
 19202              		.loc 1 723 0
 19203 0004 024B     		ldr	r3, .L49
 19204 0006 1B68     		ldr	r3, [r3, #0]
 724:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19205              		.loc 1 724 0
 19206 0008 1846     		mov	r0, r3
 19207 000a BD46     		mov	sp, r7
 19208 000c 80BC     		pop	{r7}
 19209 000e 7047     		bx	lr
 19210              	.L50:
 19211              		.align	2
 19212              	.L49:
 19213 0010 4C240140 		.word	1073816652
 19214              		.cfi_endproc
 19215              	.LFE46:
 19217              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 19218              		.align	2
 19219              		.global	ADC_AutoInjectedConvCmd
 19220              		.thumb
 19221              		.thumb_func
 19223              	ADC_AutoInjectedConvCmd:
 19224              	.LFB47:
 725:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 726:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 727:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group
 728:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         conversion after regular one.
 729:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 730:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
 731:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 732:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 733:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 734:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 735:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19225              		.loc 1 735 0
 19226              		.cfi_startproc
 19227              		@ args = 0, pretend = 0, frame = 8
 19228              		@ frame_needed = 1, uses_anonymous_args = 0
 19229              		@ link register save eliminated.
 19230 0000 80B4     		push	{r7}
 19231              	.LCFI53:
 19232              		.cfi_def_cfa_offset 4
 19233 0002 83B0     		sub	sp, sp, #12
 19234              	.LCFI54:
 19235              		.cfi_def_cfa_offset 16
 19236 0004 00AF     		add	r7, sp, #0
 19237              		.cfi_offset 7, -4
 19238              	.LCFI55:
 19239              		.cfi_def_cfa_register 7
 19240 0006 7860     		str	r0, [r7, #4]
 19241 0008 0B46     		mov	r3, r1
 19242 000a FB70     		strb	r3, [r7, #3]
 736:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 737:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 738:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 739:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 19243              		.loc 1 739 0
 19244 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19245 000e 002B     		cmp	r3, #0
 19246 0010 06D0     		beq	.L52
 740:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 741:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
 742:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_JAUTO_Set;
 19247              		.loc 1 742 0
 19248 0012 7B68     		ldr	r3, [r7, #4]
 19249 0014 5B68     		ldr	r3, [r3, #4]
 19250 0016 43F48062 		orr	r2, r3, #1024
 19251 001a 7B68     		ldr	r3, [r7, #4]
 19252 001c 5A60     		str	r2, [r3, #4]
 19253 001e 05E0     		b	.L51
 19254              	.L52:
 743:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 744:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 745:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 746:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
 747:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_JAUTO_Reset;
 19255              		.loc 1 747 0
 19256 0020 7B68     		ldr	r3, [r7, #4]
 19257 0022 5B68     		ldr	r3, [r3, #4]
 19258 0024 23F48062 		bic	r2, r3, #1024
 19259 0028 7B68     		ldr	r3, [r7, #4]
 19260 002a 5A60     		str	r2, [r3, #4]
 19261              	.L51:
 748:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 749:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19262              		.loc 1 749 0
 19263 002c 07F10C07 		add	r7, r7, #12
 19264 0030 BD46     		mov	sp, r7
 19265 0032 80BC     		pop	{r7}
 19266 0034 7047     		bx	lr
 19267              		.cfi_endproc
 19268              	.LFE47:
 19270 0036 00BF     		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 19271              		.align	2
 19272              		.global	ADC_InjectedDiscModeCmd
 19273              		.thumb
 19274              		.thumb_func
 19276              	ADC_InjectedDiscModeCmd:
 19277              	.LFB48:
 750:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 751:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 752:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group
 753:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         channel for the specified ADC
 754:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 755:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode
 756:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         on injected group channel.
 757:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 758:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 759:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 760:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 761:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19278              		.loc 1 761 0
 19279              		.cfi_startproc
 19280              		@ args = 0, pretend = 0, frame = 8
 19281              		@ frame_needed = 1, uses_anonymous_args = 0
 19282              		@ link register save eliminated.
 19283 0000 80B4     		push	{r7}
 19284              	.LCFI56:
 19285              		.cfi_def_cfa_offset 4
 19286 0002 83B0     		sub	sp, sp, #12
 19287              	.LCFI57:
 19288              		.cfi_def_cfa_offset 16
 19289 0004 00AF     		add	r7, sp, #0
 19290              		.cfi_offset 7, -4
 19291              	.LCFI58:
 19292              		.cfi_def_cfa_register 7
 19293 0006 7860     		str	r0, [r7, #4]
 19294 0008 0B46     		mov	r3, r1
 19295 000a FB70     		strb	r3, [r7, #3]
 762:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 763:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 764:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 765:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 19296              		.loc 1 765 0
 19297 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19298 000e 002B     		cmp	r3, #0
 19299 0010 06D0     		beq	.L55
 766:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 767:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
 768:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 |= CR1_JDISCEN_Set;
 19300              		.loc 1 768 0
 19301 0012 7B68     		ldr	r3, [r7, #4]
 19302 0014 5B68     		ldr	r3, [r3, #4]
 19303 0016 43F48052 		orr	r2, r3, #4096
 19304 001a 7B68     		ldr	r3, [r7, #4]
 19305 001c 5A60     		str	r2, [r3, #4]
 19306 001e 05E0     		b	.L54
 19307              	.L55:
 769:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 770:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 771:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 772:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
 773:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR1 &= CR1_JDISCEN_Reset;
 19308              		.loc 1 773 0
 19309 0020 7B68     		ldr	r3, [r7, #4]
 19310 0022 5B68     		ldr	r3, [r3, #4]
 19311 0024 23F48052 		bic	r2, r3, #4096
 19312 0028 7B68     		ldr	r3, [r7, #4]
 19313 002a 5A60     		str	r2, [r3, #4]
 19314              	.L54:
 774:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 775:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19315              		.loc 1 775 0
 19316 002c 07F10C07 		add	r7, r7, #12
 19317 0030 BD46     		mov	sp, r7
 19318 0032 80BC     		pop	{r7}
 19319 0034 7047     		bx	lr
 19320              		.cfi_endproc
 19321              	.LFE48:
 19323 0036 00BF     		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 19324              		.align	2
 19325              		.global	ADC_ExternalTrigInjectedConvConfig
 19326              		.thumb
 19327              		.thumb_func
 19329              	ADC_ExternalTrigInjectedConvConfig:
 19330              	.LFB49:
 776:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 777:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 778:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
 779:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 780:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion. 
 781:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 782:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected (for ADC1, ADC2 and ADC3
 783:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected (for ADC1, ADC2 and
 784:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected (for ADC1 and ADC2)
 785:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected (for ADC1 and ADC2)
 786:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected (for ADC1 and ADC2)
 787:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected (for ADC1 and ADC2)
 788:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4: External interrupt line 15 or Timer8
 789:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *                                                       capture compare4 event selected (for ADC1
 790:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected (for ADC3 only)
 791:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected (for ADC3 only)    
 792:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected (for ADC3 only)
 793:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected (for ADC3 only)         
 794:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected (for ADC3 only)    
 795:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
 796:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *                                          by external trigger (for ADC1, ADC2 and ADC3)
 797:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 798:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 799:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
 800:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19331              		.loc 1 800 0
 19332              		.cfi_startproc
 19333              		@ args = 0, pretend = 0, frame = 16
 19334              		@ frame_needed = 1, uses_anonymous_args = 0
 19335              		@ link register save eliminated.
 19336 0000 80B4     		push	{r7}
 19337              	.LCFI59:
 19338              		.cfi_def_cfa_offset 4
 19339 0002 85B0     		sub	sp, sp, #20
 19340              	.LCFI60:
 19341              		.cfi_def_cfa_offset 24
 19342 0004 00AF     		add	r7, sp, #0
 19343              		.cfi_offset 7, -4
 19344              	.LCFI61:
 19345              		.cfi_def_cfa_register 7
 19346 0006 7860     		str	r0, [r7, #4]
 19347 0008 3960     		str	r1, [r7, #0]
 801:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 19348              		.loc 1 801 0
 19349 000a 4FF00003 		mov	r3, #0
 19350 000e FB60     		str	r3, [r7, #12]
 802:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 803:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 804:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
 805:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
 806:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR2;
 19351              		.loc 1 806 0
 19352 0010 7B68     		ldr	r3, [r7, #4]
 19353 0012 9B68     		ldr	r3, [r3, #8]
 19354 0014 FB60     		str	r3, [r7, #12]
 807:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old external event selection for injected group */
 808:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg &= CR2_JEXTSEL_Reset;
 19355              		.loc 1 808 0
 19356 0016 FB68     		ldr	r3, [r7, #12]
 19357 0018 23F4E043 		bic	r3, r3, #28672
 19358 001c FB60     		str	r3, [r7, #12]
 809:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the external event selection for injected group */
 810:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 19359              		.loc 1 810 0
 19360 001e FA68     		ldr	r2, [r7, #12]
 19361 0020 3B68     		ldr	r3, [r7, #0]
 19362 0022 42EA0303 		orr	r3, r2, r3
 19363 0026 FB60     		str	r3, [r7, #12]
 811:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
 812:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR2 = tmpreg;
 19364              		.loc 1 812 0
 19365 0028 7B68     		ldr	r3, [r7, #4]
 19366 002a FA68     		ldr	r2, [r7, #12]
 19367 002c 9A60     		str	r2, [r3, #8]
 813:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19368              		.loc 1 813 0
 19369 002e 07F11407 		add	r7, r7, #20
 19370 0032 BD46     		mov	sp, r7
 19371 0034 80BC     		pop	{r7}
 19372 0036 7047     		bx	lr
 19373              		.cfi_endproc
 19374              	.LFE49:
 19376              		.section	.text.ADC_ExternalTrigInjectedConvCmd,"ax",%progbits
 19377              		.align	2
 19378              		.global	ADC_ExternalTrigInjectedConvCmd
 19379              		.thumb
 19380              		.thumb_func
 19382              	ADC_ExternalTrigInjectedConvCmd:
 19383              	.LFB50:
 814:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 815:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 816:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the ADCx injected channels conversion through
 817:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         external trigger
 818:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 819:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC external trigger start of
 820:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         injected conversion.
 821:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 822:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 823:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 824:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 825:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19384              		.loc 1 825 0
 19385              		.cfi_startproc
 19386              		@ args = 0, pretend = 0, frame = 8
 19387              		@ frame_needed = 1, uses_anonymous_args = 0
 19388              		@ link register save eliminated.
 19389 0000 80B4     		push	{r7}
 19390              	.LCFI62:
 19391              		.cfi_def_cfa_offset 4
 19392 0002 83B0     		sub	sp, sp, #12
 19393              	.LCFI63:
 19394              		.cfi_def_cfa_offset 16
 19395 0004 00AF     		add	r7, sp, #0
 19396              		.cfi_offset 7, -4
 19397              	.LCFI64:
 19398              		.cfi_def_cfa_register 7
 19399 0006 7860     		str	r0, [r7, #4]
 19400 0008 0B46     		mov	r3, r1
 19401 000a FB70     		strb	r3, [r7, #3]
 826:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 827:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 828:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 829:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 19402              		.loc 1 829 0
 19403 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19404 000e 002B     		cmp	r3, #0
 19405 0010 06D0     		beq	.L59
 830:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 831:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC external event selection for injected group */
 832:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_JEXTTRIG_Set;
 19406              		.loc 1 832 0
 19407 0012 7B68     		ldr	r3, [r7, #4]
 19408 0014 9B68     		ldr	r3, [r3, #8]
 19409 0016 43F40042 		orr	r2, r3, #32768
 19410 001a 7B68     		ldr	r3, [r7, #4]
 19411 001c 9A60     		str	r2, [r3, #8]
 19412 001e 05E0     		b	.L58
 19413              	.L59:
 833:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 834:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 835:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 836:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC external event selection for injected group */
 837:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 19414              		.loc 1 837 0
 19415 0020 7B68     		ldr	r3, [r7, #4]
 19416 0022 9B68     		ldr	r3, [r3, #8]
 19417 0024 23F40042 		bic	r2, r3, #32768
 19418 0028 7B68     		ldr	r3, [r7, #4]
 19419 002a 9A60     		str	r2, [r3, #8]
 19420              	.L58:
 838:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 839:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19421              		.loc 1 839 0
 19422 002c 07F10C07 		add	r7, r7, #12
 19423 0030 BD46     		mov	sp, r7
 19424 0032 80BC     		pop	{r7}
 19425 0034 7047     		bx	lr
 19426              		.cfi_endproc
 19427              	.LFE50:
 19429 0036 00BF     		.section	.text.ADC_SoftwareStartInjectedConvCmd,"ax",%progbits
 19430              		.align	2
 19431              		.global	ADC_SoftwareStartInjectedConvCmd
 19432              		.thumb
 19433              		.thumb_func
 19435              	ADC_SoftwareStartInjectedConvCmd:
 19436              	.LFB51:
 840:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 841:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 842:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the selected ADC start of the injected 
 843:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         channels conversion.
 844:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 845:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the selected ADC software start injected conversion.
 846:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
 847:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 848:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 849:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 850:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19437              		.loc 1 850 0
 19438              		.cfi_startproc
 19439              		@ args = 0, pretend = 0, frame = 8
 19440              		@ frame_needed = 1, uses_anonymous_args = 0
 19441              		@ link register save eliminated.
 19442 0000 80B4     		push	{r7}
 19443              	.LCFI65:
 19444              		.cfi_def_cfa_offset 4
 19445 0002 83B0     		sub	sp, sp, #12
 19446              	.LCFI66:
 19447              		.cfi_def_cfa_offset 16
 19448 0004 00AF     		add	r7, sp, #0
 19449              		.cfi_offset 7, -4
 19450              	.LCFI67:
 19451              		.cfi_def_cfa_register 7
 19452 0006 7860     		str	r0, [r7, #4]
 19453 0008 0B46     		mov	r3, r1
 19454 000a FB70     		strb	r3, [r7, #3]
 851:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 852:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 853:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 854:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 19455              		.loc 1 854 0
 19456 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19457 000e 002B     		cmp	r3, #0
 19458 0010 06D0     		beq	.L62
 855:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 856:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the selected ADC conversion for injected group on external event and start the select
 857:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC injected conversion */
 858:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 19459              		.loc 1 858 0
 19460 0012 7B68     		ldr	r3, [r7, #4]
 19461 0014 9B68     		ldr	r3, [r3, #8]
 19462 0016 43F40212 		orr	r2, r3, #2129920
 19463 001a 7B68     		ldr	r3, [r7, #4]
 19464 001c 9A60     		str	r2, [r3, #8]
 19465 001e 05E0     		b	.L61
 19466              	.L62:
 859:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 860:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 861:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 862:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the selected ADC conversion on external event for injected group and stop the select
 863:../StdPeripheralDriver/src/stm32f10x_adc.c ****        ADC injected conversion */
 864:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 19467              		.loc 1 864 0
 19468 0020 7B68     		ldr	r3, [r7, #4]
 19469 0022 9B68     		ldr	r3, [r3, #8]
 19470 0024 23F40212 		bic	r2, r3, #2129920
 19471 0028 7B68     		ldr	r3, [r7, #4]
 19472 002a 9A60     		str	r2, [r3, #8]
 19473              	.L61:
 865:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 866:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19474              		.loc 1 866 0
 19475 002c 07F10C07 		add	r7, r7, #12
 19476 0030 BD46     		mov	sp, r7
 19477 0032 80BC     		pop	{r7}
 19478 0034 7047     		bx	lr
 19479              		.cfi_endproc
 19480              	.LFE51:
 19482 0036 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 19483              		.align	2
 19484              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 19485              		.thumb
 19486              		.thumb_func
 19488              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 19489              	.LFB52:
 867:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 868:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 869:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
 870:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 871:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
 872:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 873:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
 874:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19490              		.loc 1 874 0
 19491              		.cfi_startproc
 19492              		@ args = 0, pretend = 0, frame = 16
 19493              		@ frame_needed = 1, uses_anonymous_args = 0
 19494              		@ link register save eliminated.
 19495 0000 80B4     		push	{r7}
 19496              	.LCFI68:
 19497              		.cfi_def_cfa_offset 4
 19498 0002 85B0     		sub	sp, sp, #20
 19499              	.LCFI69:
 19500              		.cfi_def_cfa_offset 24
 19501 0004 00AF     		add	r7, sp, #0
 19502              		.cfi_offset 7, -4
 19503              	.LCFI70:
 19504              		.cfi_def_cfa_register 7
 19505 0006 7860     		str	r0, [r7, #4]
 875:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 19506              		.loc 1 875 0
 19507 0008 4FF00003 		mov	r3, #0
 19508 000c FB73     		strb	r3, [r7, #15]
 876:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 877:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 878:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of JSWSTART bit */
 879:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
 19509              		.loc 1 879 0
 19510 000e 7B68     		ldr	r3, [r7, #4]
 19511 0010 9B68     		ldr	r3, [r3, #8]
 19512 0012 03F40013 		and	r3, r3, #2097152
 19513 0016 002B     		cmp	r3, #0
 19514 0018 03D0     		beq	.L65
 880:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 881:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* JSWSTART bit is set */
 882:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 19515              		.loc 1 882 0
 19516 001a 4FF00103 		mov	r3, #1
 19517 001e FB73     		strb	r3, [r7, #15]
 19518 0020 02E0     		b	.L66
 19519              	.L65:
 883:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 884:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
 885:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 886:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* JSWSTART bit is reset */
 887:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 19520              		.loc 1 887 0
 19521 0022 4FF00003 		mov	r3, #0
 19522 0026 FB73     		strb	r3, [r7, #15]
 19523              	.L66:
 888:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 889:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the JSWSTART bit status */
 890:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 19524              		.loc 1 890 0
 19525 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 891:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19526              		.loc 1 891 0
 19527 002a 1846     		mov	r0, r3
 19528 002c 07F11407 		add	r7, r7, #20
 19529 0030 BD46     		mov	sp, r7
 19530 0032 80BC     		pop	{r7}
 19531 0034 7047     		bx	lr
 19532              		.cfi_endproc
 19533              	.LFE52:
 19535 0036 00BF     		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 19536              		.align	2
 19537              		.global	ADC_InjectedChannelConfig
 19538              		.thumb
 19539              		.thumb_func
 19541              	ADC_InjectedChannelConfig:
 19542              	.LFB53:
 892:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 893:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 894:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
 895:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         rank in the sequencer and its sample time.
 896:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 897:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 898:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 899:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
 900:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
 901:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
 902:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
 903:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
 904:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
 905:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
 906:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
 907:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
 908:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
 909:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
 910:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
 911:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
 912:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
 913:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
 914:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
 915:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
 916:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
 917:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Rank: The rank in the injected group sequencer. This parameter must be between 1 and 4.
 918:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 919:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
 920:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles
 921:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles
 922:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles
 923:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles	
 924:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles	
 925:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles	
 926:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
 927:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
 928:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 929:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 930:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
 931:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19543              		.loc 1 931 0
 19544              		.cfi_startproc
 19545              		@ args = 0, pretend = 0, frame = 24
 19546              		@ frame_needed = 1, uses_anonymous_args = 0
 19547              		@ link register save eliminated.
 19548 0000 80B4     		push	{r7}
 19549              	.LCFI71:
 19550              		.cfi_def_cfa_offset 4
 19551 0002 87B0     		sub	sp, sp, #28
 19552              	.LCFI72:
 19553              		.cfi_def_cfa_offset 32
 19554 0004 00AF     		add	r7, sp, #0
 19555              		.cfi_offset 7, -4
 19556              	.LCFI73:
 19557              		.cfi_def_cfa_register 7
 19558 0006 7860     		str	r0, [r7, #4]
 19559 0008 F970     		strb	r1, [r7, #3]
 19560 000a BA70     		strb	r2, [r7, #2]
 19561 000c 7B70     		strb	r3, [r7, #1]
 932:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 19562              		.loc 1 932 0
 19563 000e 4FF00003 		mov	r3, #0
 19564 0012 7B61     		str	r3, [r7, #20]
 19565 0014 4FF00003 		mov	r3, #0
 19566 0018 3B61     		str	r3, [r7, #16]
 19567 001a 4FF00003 		mov	r3, #0
 19568 001e FB60     		str	r3, [r7, #12]
 933:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 934:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 935:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 936:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
 937:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 938:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
 939:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 19569              		.loc 1 939 0
 19570 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19571 0022 092B     		cmp	r3, #9
 19572 0024 29D9     		bls	.L68
 940:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 941:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 942:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR1;
 19573              		.loc 1 942 0
 19574 0026 7B68     		ldr	r3, [r7, #4]
 19575 0028 DB68     		ldr	r3, [r3, #12]
 19576 002a 7B61     		str	r3, [r7, #20]
 943:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 944:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 19577              		.loc 1 944 0
 19578 002c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19579 002e 1346     		mov	r3, r2
 19580 0030 4FEA4303 		lsl	r3, r3, #1
 19581 0034 9B18     		adds	r3, r3, r2
 19582 0036 A3F11E03 		sub	r3, r3, #30
 19583 003a 4FF00702 		mov	r2, #7
 19584 003e 02FA03F3 		lsl	r3, r2, r3
 19585 0042 3B61     		str	r3, [r7, #16]
 945:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 946:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 19586              		.loc 1 946 0
 19587 0044 3B69     		ldr	r3, [r7, #16]
 19588 0046 6FEA0303 		mvn	r3, r3
 19589 004a 7A69     		ldr	r2, [r7, #20]
 19590 004c 02EA0303 		and	r3, r2, r3
 19591 0050 7B61     		str	r3, [r7, #20]
 947:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 948:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 19592              		.loc 1 948 0
 19593 0052 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 19594 0054 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19595 0056 1346     		mov	r3, r2
 19596 0058 4FEA4303 		lsl	r3, r3, #1
 19597 005c 9B18     		adds	r3, r3, r2
 19598 005e A3F11E03 		sub	r3, r3, #30
 19599 0062 01FA03F3 		lsl	r3, r1, r3
 19600 0066 3B61     		str	r3, [r7, #16]
 949:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 950:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 19601              		.loc 1 950 0
 19602 0068 7A69     		ldr	r2, [r7, #20]
 19603 006a 3B69     		ldr	r3, [r7, #16]
 19604 006c 42EA0303 		orr	r3, r2, r3
 19605 0070 7B61     		str	r3, [r7, #20]
 951:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 952:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR1 = tmpreg1;
 19606              		.loc 1 952 0
 19607 0072 7B68     		ldr	r3, [r7, #4]
 19608 0074 7A69     		ldr	r2, [r7, #20]
 19609 0076 DA60     		str	r2, [r3, #12]
 19610 0078 24E0     		b	.L69
 19611              	.L68:
 953:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 954:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 955:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
 956:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Get the old register value */
 957:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 = ADCx->SMPR2;
 19612              		.loc 1 957 0
 19613 007a 7B68     		ldr	r3, [r7, #4]
 19614 007c 1B69     		ldr	r3, [r3, #16]
 19615 007e 7B61     		str	r3, [r7, #20]
 958:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to clear */
 959:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 19616              		.loc 1 959 0
 19617 0080 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19618 0082 1346     		mov	r3, r2
 19619 0084 4FEA4303 		lsl	r3, r3, #1
 19620 0088 9B18     		adds	r3, r3, r2
 19621 008a 4FF00702 		mov	r2, #7
 19622 008e 02FA03F3 		lsl	r3, r2, r3
 19623 0092 3B61     		str	r3, [r7, #16]
 960:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Clear the old channel sample time */
 961:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 &= ~tmpreg2;
 19624              		.loc 1 961 0
 19625 0094 3B69     		ldr	r3, [r7, #16]
 19626 0096 6FEA0303 		mvn	r3, r3
 19627 009a 7A69     		ldr	r2, [r7, #20]
 19628 009c 02EA0303 		and	r3, r2, r3
 19629 00a0 7B61     		str	r3, [r7, #20]
 962:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Calculate the mask to set */
 963:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 19630              		.loc 1 963 0
 19631 00a2 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 19632 00a4 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19633 00a6 1346     		mov	r3, r2
 19634 00a8 4FEA4303 		lsl	r3, r3, #1
 19635 00ac 9B18     		adds	r3, r3, r2
 19636 00ae 01FA03F3 		lsl	r3, r1, r3
 19637 00b2 3B61     		str	r3, [r7, #16]
 964:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Set the new channel sample time */
 965:../StdPeripheralDriver/src/stm32f10x_adc.c ****     tmpreg1 |= tmpreg2;
 19638              		.loc 1 965 0
 19639 00b4 7A69     		ldr	r2, [r7, #20]
 19640 00b6 3B69     		ldr	r3, [r7, #16]
 19641 00b8 42EA0303 		orr	r3, r2, r3
 19642 00bc 7B61     		str	r3, [r7, #20]
 966:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Store the new register value */
 967:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADCx->SMPR2 = tmpreg1;
 19643              		.loc 1 967 0
 19644 00be 7B68     		ldr	r3, [r7, #4]
 19645 00c0 7A69     		ldr	r2, [r7, #20]
 19646 00c2 1A61     		str	r2, [r3, #16]
 19647              	.L69:
 968:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
 969:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Rank configuration */
 970:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
 971:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->JSQR;
 19648              		.loc 1 971 0
 19649 00c4 7B68     		ldr	r3, [r7, #4]
 19650 00c6 9B6B     		ldr	r3, [r3, #56]
 19651 00c8 7B61     		str	r3, [r7, #20]
 972:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get JL value: Number = JL+1 */
 973:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
 19652              		.loc 1 973 0
 19653 00ca 7B69     		ldr	r3, [r7, #20]
 19654 00cc 03F44013 		and	r3, r3, #3145728
 19655 00d0 4FEA1353 		lsr	r3, r3, #20
 19656 00d4 FB60     		str	r3, [r7, #12]
 974:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
 975:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 19657              		.loc 1 975 0
 19658 00d6 FB68     		ldr	r3, [r7, #12]
 19659 00d8 DBB2     		uxtb	r3, r3
 19660 00da 6FEA0303 		mvn	r3, r3
 19661 00de DAB2     		uxtb	r2, r3
 19662 00e0 BB78     		ldrb	r3, [r7, #2]
 19663 00e2 D318     		adds	r3, r2, r3
 19664 00e4 DBB2     		uxtb	r3, r3
 19665 00e6 03F10303 		add	r3, r3, #3
 19666 00ea DBB2     		uxtb	r3, r3
 19667 00ec 1A46     		mov	r2, r3
 19668 00ee 1346     		mov	r3, r2
 19669 00f0 4FEA8303 		lsl	r3, r3, #2
 19670 00f4 9B18     		adds	r3, r3, r2
 19671 00f6 4FF01F02 		mov	r2, #31
 19672 00fa 02FA03F3 		lsl	r3, r2, r3
 19673 00fe 3B61     		str	r3, [r7, #16]
 976:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old JSQx bits for the selected rank */
 977:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= ~tmpreg2;
 19674              		.loc 1 977 0
 19675 0100 3B69     		ldr	r3, [r7, #16]
 19676 0102 6FEA0303 		mvn	r3, r3
 19677 0106 7A69     		ldr	r2, [r7, #20]
 19678 0108 02EA0303 		and	r3, r2, r3
 19679 010c 7B61     		str	r3, [r7, #20]
 978:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
 979:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 19680              		.loc 1 979 0
 19681 010e F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 19682 0110 FB68     		ldr	r3, [r7, #12]
 19683 0112 DBB2     		uxtb	r3, r3
 19684 0114 6FEA0303 		mvn	r3, r3
 19685 0118 DAB2     		uxtb	r2, r3
 19686 011a BB78     		ldrb	r3, [r7, #2]
 19687 011c D318     		adds	r3, r2, r3
 19688 011e DBB2     		uxtb	r3, r3
 19689 0120 03F10303 		add	r3, r3, #3
 19690 0124 DBB2     		uxtb	r3, r3
 19691 0126 1A46     		mov	r2, r3
 19692 0128 1346     		mov	r3, r2
 19693 012a 4FEA8303 		lsl	r3, r3, #2
 19694 012e 9B18     		adds	r3, r3, r2
 19695 0130 01FA03F3 		lsl	r3, r1, r3
 19696 0134 3B61     		str	r3, [r7, #16]
 980:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the JSQx bits for the selected rank */
 981:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2;
 19697              		.loc 1 981 0
 19698 0136 7A69     		ldr	r2, [r7, #20]
 19699 0138 3B69     		ldr	r3, [r7, #16]
 19700 013a 42EA0303 		orr	r3, r2, r3
 19701 013e 7B61     		str	r3, [r7, #20]
 982:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
 983:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->JSQR = tmpreg1;
 19702              		.loc 1 983 0
 19703 0140 7B68     		ldr	r3, [r7, #4]
 19704 0142 7A69     		ldr	r2, [r7, #20]
 19705 0144 9A63     		str	r2, [r3, #56]
 984:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19706              		.loc 1 984 0
 19707 0146 07F11C07 		add	r7, r7, #28
 19708 014a BD46     		mov	sp, r7
 19709 014c 80BC     		pop	{r7}
 19710 014e 7047     		bx	lr
 19711              		.cfi_endproc
 19712              	.LFE53:
 19714              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 19715              		.align	2
 19716              		.global	ADC_InjectedSequencerLengthConfig
 19717              		.thumb
 19718              		.thumb_func
 19720              	ADC_InjectedSequencerLengthConfig:
 19721              	.LFB54:
 985:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
 986:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
 987:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the sequencer length for injected channels
 988:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 989:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Length: The sequencer length. 
 990:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a number between 1 to 4.
 991:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
 992:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
 993:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
 994:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19722              		.loc 1 994 0
 19723              		.cfi_startproc
 19724              		@ args = 0, pretend = 0, frame = 16
 19725              		@ frame_needed = 1, uses_anonymous_args = 0
 19726              		@ link register save eliminated.
 19727 0000 80B4     		push	{r7}
 19728              	.LCFI74:
 19729              		.cfi_def_cfa_offset 4
 19730 0002 85B0     		sub	sp, sp, #20
 19731              	.LCFI75:
 19732              		.cfi_def_cfa_offset 24
 19733 0004 00AF     		add	r7, sp, #0
 19734              		.cfi_offset 7, -4
 19735              	.LCFI76:
 19736              		.cfi_def_cfa_register 7
 19737 0006 7860     		str	r0, [r7, #4]
 19738 0008 0B46     		mov	r3, r1
 19739 000a FB70     		strb	r3, [r7, #3]
 995:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg1 = 0;
 19740              		.loc 1 995 0
 19741 000c 4FF00003 		mov	r3, #0
 19742 0010 FB60     		str	r3, [r7, #12]
 996:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg2 = 0;
 19743              		.loc 1 996 0
 19744 0012 4FF00003 		mov	r3, #0
 19745 0016 BB60     		str	r3, [r7, #8]
 997:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
 998:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 999:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1000:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1001:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
1002:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 = ADCx->JSQR;
 19746              		.loc 1 1002 0
 19747 0018 7B68     		ldr	r3, [r7, #4]
 19748 001a 9B6B     		ldr	r3, [r3, #56]
 19749 001c FB60     		str	r3, [r7, #12]
1003:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the old injected sequnence lenght JL bits */
1004:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 &= JSQR_JL_Reset;
 19750              		.loc 1 1004 0
 19751 001e FB68     		ldr	r3, [r7, #12]
 19752 0020 23F44013 		bic	r3, r3, #3145728
 19753 0024 FB60     		str	r3, [r7, #12]
1005:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the injected sequnence lenght JL bits */
1006:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg2 = Length - 1; 
 19754              		.loc 1 1006 0
 19755 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19756 0028 03F1FF33 		add	r3, r3, #-1
 19757 002c BB60     		str	r3, [r7, #8]
1007:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 19758              		.loc 1 1007 0
 19759 002e BB68     		ldr	r3, [r7, #8]
 19760 0030 4FEA0353 		lsl	r3, r3, #20
 19761 0034 FA68     		ldr	r2, [r7, #12]
 19762 0036 42EA0303 		orr	r3, r2, r3
 19763 003a FB60     		str	r3, [r7, #12]
1008:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
1009:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->JSQR = tmpreg1;
 19764              		.loc 1 1009 0
 19765 003c 7B68     		ldr	r3, [r7, #4]
 19766 003e FA68     		ldr	r2, [r7, #12]
 19767 0040 9A63     		str	r2, [r3, #56]
1010:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19768              		.loc 1 1010 0
 19769 0042 07F11407 		add	r7, r7, #20
 19770 0046 BD46     		mov	sp, r7
 19771 0048 80BC     		pop	{r7}
 19772 004a 7047     		bx	lr
 19773              		.cfi_endproc
 19774              	.LFE54:
 19776              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 19777              		.align	2
 19778              		.global	ADC_SetInjectedOffset
 19779              		.thumb
 19780              		.thumb_func
 19782              	ADC_SetInjectedOffset:
 19783              	.LFB55:
1011:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1012:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1013:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Set the injected channels conversion value offset
1014:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1015:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1016:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1017:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_1: Injected Channel1 selected
1018:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_2: Injected Channel2 selected
1019:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
1020:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
1021:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1022:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1023:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1024:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1025:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1026:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19784              		.loc 1 1026 0
 19785              		.cfi_startproc
 19786              		@ args = 0, pretend = 0, frame = 16
 19787              		@ frame_needed = 1, uses_anonymous_args = 0
 19788              		@ link register save eliminated.
 19789 0000 80B4     		push	{r7}
 19790              	.LCFI77:
 19791              		.cfi_def_cfa_offset 4
 19792 0002 85B0     		sub	sp, sp, #20
 19793              	.LCFI78:
 19794              		.cfi_def_cfa_offset 24
 19795 0004 00AF     		add	r7, sp, #0
 19796              		.cfi_offset 7, -4
 19797              	.LCFI79:
 19798              		.cfi_def_cfa_register 7
 19799 0006 7860     		str	r0, [r7, #4]
 19800 0008 1346     		mov	r3, r2
 19801 000a 0A46     		mov	r2, r1
 19802 000c FA70     		strb	r2, [r7, #3]
 19803 000e 3B80     		strh	r3, [r7, #0]	@ movhi
1027:../StdPeripheralDriver/src/stm32f10x_adc.c ****   __IO uint32_t tmp = 0;
 19804              		.loc 1 1027 0
 19805 0010 4FF00003 		mov	r3, #0
 19806 0014 FB60     		str	r3, [r7, #12]
1028:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1029:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1030:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1031:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1032:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));  
1033:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1034:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp = (uint32_t)ADCx;
 19807              		.loc 1 1034 0
 19808 0016 7B68     		ldr	r3, [r7, #4]
 19809 0018 FB60     		str	r3, [r7, #12]
1035:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp += ADC_InjectedChannel;
 19810              		.loc 1 1035 0
 19811 001a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19812 001c FB68     		ldr	r3, [r7, #12]
 19813 001e D318     		adds	r3, r2, r3
 19814 0020 FB60     		str	r3, [r7, #12]
1036:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1037:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the selected injected channel data offset */
1038:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *(__IO uint32_t *) tmp = (uint32_t)Offset;
 19815              		.loc 1 1038 0
 19816 0022 FB68     		ldr	r3, [r7, #12]
 19817 0024 3A88     		ldrh	r2, [r7, #0]
 19818 0026 1A60     		str	r2, [r3, #0]
1039:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19819              		.loc 1 1039 0
 19820 0028 07F11407 		add	r7, r7, #20
 19821 002c BD46     		mov	sp, r7
 19822 002e 80BC     		pop	{r7}
 19823 0030 7047     		bx	lr
 19824              		.cfi_endproc
 19825              	.LFE55:
 19827 0032 00BF     		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 19828              		.align	2
 19829              		.global	ADC_GetInjectedConversionValue
 19830              		.thumb
 19831              		.thumb_func
 19833              	ADC_GetInjectedConversionValue:
 19834              	.LFB56:
1040:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1041:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1042:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1043:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1045:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1046:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_1: Injected Channel1 selected
1047:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_2: Injected Channel2 selected
1048:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
1049:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
1050:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The Data conversion value.
1051:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1052:../StdPeripheralDriver/src/stm32f10x_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1053:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19835              		.loc 1 1053 0
 19836              		.cfi_startproc
 19837              		@ args = 0, pretend = 0, frame = 16
 19838              		@ frame_needed = 1, uses_anonymous_args = 0
 19839              		@ link register save eliminated.
 19840 0000 80B4     		push	{r7}
 19841              	.LCFI80:
 19842              		.cfi_def_cfa_offset 4
 19843 0002 85B0     		sub	sp, sp, #20
 19844              	.LCFI81:
 19845              		.cfi_def_cfa_offset 24
 19846 0004 00AF     		add	r7, sp, #0
 19847              		.cfi_offset 7, -4
 19848              	.LCFI82:
 19849              		.cfi_def_cfa_register 7
 19850 0006 7860     		str	r0, [r7, #4]
 19851 0008 0B46     		mov	r3, r1
 19852 000a FB70     		strb	r3, [r7, #3]
1054:../StdPeripheralDriver/src/stm32f10x_adc.c ****   __IO uint32_t tmp = 0;
 19853              		.loc 1 1054 0
 19854 000c 4FF00003 		mov	r3, #0
 19855 0010 FB60     		str	r3, [r7, #12]
1055:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1056:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1057:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1058:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1059:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1060:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp = (uint32_t)ADCx;
 19856              		.loc 1 1060 0
 19857 0012 7B68     		ldr	r3, [r7, #4]
 19858 0014 FB60     		str	r3, [r7, #12]
1061:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmp += ADC_InjectedChannel + JDR_Offset;
 19859              		.loc 1 1061 0
 19860 0016 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 19861 0018 FB68     		ldr	r3, [r7, #12]
 19862 001a D318     		adds	r3, r2, r3
 19863 001c 03F12803 		add	r3, r3, #40
 19864 0020 FB60     		str	r3, [r7, #12]
1062:../StdPeripheralDriver/src/stm32f10x_adc.c ****   
1063:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Returns the selected injected channel conversion data value */
1064:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp);   
 19865              		.loc 1 1064 0
 19866 0022 FB68     		ldr	r3, [r7, #12]
 19867 0024 1B68     		ldr	r3, [r3, #0]
 19868 0026 9BB2     		uxth	r3, r3
1065:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19869              		.loc 1 1065 0
 19870 0028 1846     		mov	r0, r3
 19871 002a 07F11407 		add	r7, r7, #20
 19872 002e BD46     		mov	sp, r7
 19873 0030 80BC     		pop	{r7}
 19874 0032 7047     		bx	lr
 19875              		.cfi_endproc
 19876              	.LFE56:
 19878              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 19879              		.align	2
 19880              		.global	ADC_AnalogWatchdogCmd
 19881              		.thumb
 19882              		.thumb_func
 19884              	ADC_AnalogWatchdogCmd:
 19885              	.LFB57:
1066:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1067:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1068:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular
1069:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *         or injected channels
1070:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1071:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
1072:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1073:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
1074:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected channel
1075:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular or inje
1076:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on  all regular channel
1077:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on  all injected channel
1078:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected c
1079:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
1080:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None	  
1081:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1082:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
1083:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19886              		.loc 1 1083 0
 19887              		.cfi_startproc
 19888              		@ args = 0, pretend = 0, frame = 16
 19889              		@ frame_needed = 1, uses_anonymous_args = 0
 19890              		@ link register save eliminated.
 19891 0000 80B4     		push	{r7}
 19892              	.LCFI83:
 19893              		.cfi_def_cfa_offset 4
 19894 0002 85B0     		sub	sp, sp, #20
 19895              	.LCFI84:
 19896              		.cfi_def_cfa_offset 24
 19897 0004 00AF     		add	r7, sp, #0
 19898              		.cfi_offset 7, -4
 19899              	.LCFI85:
 19900              		.cfi_def_cfa_register 7
 19901 0006 7860     		str	r0, [r7, #4]
 19902 0008 3960     		str	r1, [r7, #0]
1084:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 19903              		.loc 1 1084 0
 19904 000a 4FF00003 		mov	r3, #0
 19905 000e FB60     		str	r3, [r7, #12]
1085:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1086:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1087:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
1088:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
1089:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR1;
 19906              		.loc 1 1089 0
 19907 0010 7B68     		ldr	r3, [r7, #4]
 19908 0012 5B68     		ldr	r3, [r3, #4]
 19909 0014 FB60     		str	r3, [r7, #12]
1090:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear AWDEN, AWDENJ and AWDSGL bits */
1091:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg &= CR1_AWDMode_Reset;
 19910              		.loc 1 1091 0
 19911 0016 FB68     		ldr	r3, [r7, #12]
 19912 0018 23F44003 		bic	r3, r3, #12582912
 19913 001c 23F40073 		bic	r3, r3, #512
 19914 0020 FB60     		str	r3, [r7, #12]
1092:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the analog watchdog enable mode */
1093:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 19915              		.loc 1 1093 0
 19916 0022 FA68     		ldr	r2, [r7, #12]
 19917 0024 3B68     		ldr	r3, [r7, #0]
 19918 0026 42EA0303 		orr	r3, r2, r3
 19919 002a FB60     		str	r3, [r7, #12]
1094:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
1095:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg;
 19920              		.loc 1 1095 0
 19921 002c 7B68     		ldr	r3, [r7, #4]
 19922 002e FA68     		ldr	r2, [r7, #12]
 19923 0030 5A60     		str	r2, [r3, #4]
1096:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19924              		.loc 1 1096 0
 19925 0032 07F11407 		add	r7, r7, #20
 19926 0036 BD46     		mov	sp, r7
 19927 0038 80BC     		pop	{r7}
 19928 003a 7047     		bx	lr
 19929              		.cfi_endproc
 19930              	.LFE57:
 19932              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 19933              		.align	2
 19934              		.global	ADC_AnalogWatchdogThresholdsConfig
 19935              		.thumb
 19936              		.thumb_func
 19938              	ADC_AnalogWatchdogThresholdsConfig:
 19939              	.LFB58:
1097:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1098:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1099:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
1100:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1101:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
1102:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1103:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  LowThreshold: the ADC analog watchdog Low threshold value.
1104:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter must be a 12bit value.
1105:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1106:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1107:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
1108:../StdPeripheralDriver/src/stm32f10x_adc.c ****                                         uint16_t LowThreshold)
1109:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19940              		.loc 1 1109 0
 19941              		.cfi_startproc
 19942              		@ args = 0, pretend = 0, frame = 8
 19943              		@ frame_needed = 1, uses_anonymous_args = 0
 19944              		@ link register save eliminated.
 19945 0000 80B4     		push	{r7}
 19946              	.LCFI86:
 19947              		.cfi_def_cfa_offset 4
 19948 0002 83B0     		sub	sp, sp, #12
 19949              	.LCFI87:
 19950              		.cfi_def_cfa_offset 16
 19951 0004 00AF     		add	r7, sp, #0
 19952              		.cfi_offset 7, -4
 19953              	.LCFI88:
 19954              		.cfi_def_cfa_register 7
 19955 0006 7860     		str	r0, [r7, #4]
 19956 0008 1346     		mov	r3, r2
 19957 000a 0A46     		mov	r2, r1	@ movhi
 19958 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 19959 000e 3B80     		strh	r3, [r7, #0]	@ movhi
1110:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1111:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1112:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
1113:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
1114:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the ADCx high threshold */
1115:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->HTR = HighThreshold;
 19960              		.loc 1 1115 0
 19961 0010 7A88     		ldrh	r2, [r7, #2]
 19962 0012 7B68     		ldr	r3, [r7, #4]
 19963 0014 5A62     		str	r2, [r3, #36]
1116:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the ADCx low threshold */
1117:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->LTR = LowThreshold;
 19964              		.loc 1 1117 0
 19965 0016 3A88     		ldrh	r2, [r7, #0]
 19966 0018 7B68     		ldr	r3, [r7, #4]
 19967 001a 9A62     		str	r2, [r3, #40]
1118:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 19968              		.loc 1 1118 0
 19969 001c 07F10C07 		add	r7, r7, #12
 19970 0020 BD46     		mov	sp, r7
 19971 0022 80BC     		pop	{r7}
 19972 0024 7047     		bx	lr
 19973              		.cfi_endproc
 19974              	.LFE58:
 19976 0026 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 19977              		.align	2
 19978              		.global	ADC_AnalogWatchdogSingleChannelConfig
 19979              		.thumb
 19980              		.thumb_func
 19982              	ADC_AnalogWatchdogSingleChannelConfig:
 19983              	.LFB59:
1119:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1120:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1121:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
1122:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1123:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
1124:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1125:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_0: ADC Channel0 selected
1126:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_1: ADC Channel1 selected
1127:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_2: ADC Channel2 selected
1128:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_3: ADC Channel3 selected
1129:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_4: ADC Channel4 selected
1130:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_5: ADC Channel5 selected
1131:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_6: ADC Channel6 selected
1132:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_7: ADC Channel7 selected
1133:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_8: ADC Channel8 selected
1134:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_9: ADC Channel9 selected
1135:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_10: ADC Channel10 selected
1136:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_11: ADC Channel11 selected
1137:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_12: ADC Channel12 selected
1138:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_13: ADC Channel13 selected
1139:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_14: ADC Channel14 selected
1140:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_15: ADC Channel15 selected
1141:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_16: ADC Channel16 selected
1142:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_Channel_17: ADC Channel17 selected
1143:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1144:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1145:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
1146:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 19984              		.loc 1 1146 0
 19985              		.cfi_startproc
 19986              		@ args = 0, pretend = 0, frame = 16
 19987              		@ frame_needed = 1, uses_anonymous_args = 0
 19988              		@ link register save eliminated.
 19989 0000 80B4     		push	{r7}
 19990              	.LCFI89:
 19991              		.cfi_def_cfa_offset 4
 19992 0002 85B0     		sub	sp, sp, #20
 19993              	.LCFI90:
 19994              		.cfi_def_cfa_offset 24
 19995 0004 00AF     		add	r7, sp, #0
 19996              		.cfi_offset 7, -4
 19997              	.LCFI91:
 19998              		.cfi_def_cfa_register 7
 19999 0006 7860     		str	r0, [r7, #4]
 20000 0008 0B46     		mov	r3, r1
 20001 000a FB70     		strb	r3, [r7, #3]
1147:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t tmpreg = 0;
 20002              		.loc 1 1147 0
 20003 000c 4FF00003 		mov	r3, #0
 20004 0010 FB60     		str	r3, [r7, #12]
1148:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1149:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1150:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1151:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the old register value */
1152:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg = ADCx->CR1;
 20005              		.loc 1 1152 0
 20006 0012 7B68     		ldr	r3, [r7, #4]
 20007 0014 5B68     		ldr	r3, [r3, #4]
 20008 0016 FB60     		str	r3, [r7, #12]
1153:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the Analog watchdog channel select bits */
1154:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg &= CR1_AWDCH_Reset;
 20009              		.loc 1 1154 0
 20010 0018 FB68     		ldr	r3, [r7, #12]
 20011 001a 23F01F03 		bic	r3, r3, #31
 20012 001e FB60     		str	r3, [r7, #12]
1155:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Set the Analog watchdog channel */
1156:../StdPeripheralDriver/src/stm32f10x_adc.c ****   tmpreg |= ADC_Channel;
 20013              		.loc 1 1156 0
 20014 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 20015 0022 FA68     		ldr	r2, [r7, #12]
 20016 0024 42EA0303 		orr	r3, r2, r3
 20017 0028 FB60     		str	r3, [r7, #12]
1157:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Store the new register value */
1158:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->CR1 = tmpreg;
 20018              		.loc 1 1158 0
 20019 002a 7B68     		ldr	r3, [r7, #4]
 20020 002c FA68     		ldr	r2, [r7, #12]
 20021 002e 5A60     		str	r2, [r3, #4]
1159:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20022              		.loc 1 1159 0
 20023 0030 07F11407 		add	r7, r7, #20
 20024 0034 BD46     		mov	sp, r7
 20025 0036 80BC     		pop	{r7}
 20026 0038 7047     		bx	lr
 20027              		.cfi_endproc
 20028              	.LFE59:
 20030 003a 00BF     		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 20031              		.align	2
 20032              		.global	ADC_TempSensorVrefintCmd
 20033              		.thumb
 20034              		.thumb_func
 20036              	ADC_TempSensorVrefintCmd:
 20037              	.LFB60:
1160:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1161:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1162:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channel.
1163:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  NewState: new state of the temperature sensor.
1164:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be: ENABLE or DISABLE.
1165:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1166:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1167:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)
1168:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20038              		.loc 1 1168 0
 20039              		.cfi_startproc
 20040              		@ args = 0, pretend = 0, frame = 8
 20041              		@ frame_needed = 1, uses_anonymous_args = 0
 20042              		@ link register save eliminated.
 20043 0000 80B4     		push	{r7}
 20044              	.LCFI92:
 20045              		.cfi_def_cfa_offset 4
 20046 0002 83B0     		sub	sp, sp, #12
 20047              	.LCFI93:
 20048              		.cfi_def_cfa_offset 16
 20049 0004 00AF     		add	r7, sp, #0
 20050              		.cfi_offset 7, -4
 20051              	.LCFI94:
 20052              		.cfi_def_cfa_register 7
 20053 0006 0346     		mov	r3, r0
 20054 0008 FB71     		strb	r3, [r7, #7]
1169:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1170:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1171:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (NewState != DISABLE)
 20055              		.loc 1 1171 0
 20056 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 20057 000c 002B     		cmp	r3, #0
 20058 000e 06D0     		beq	.L77
1172:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1173:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
1174:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADC1->CR2 |= CR2_TSVREFE_Set;
 20059              		.loc 1 1174 0
 20060 0010 084B     		ldr	r3, .L79
 20061 0012 084A     		ldr	r2, .L79
 20062 0014 9268     		ldr	r2, [r2, #8]
 20063 0016 42F40002 		orr	r2, r2, #8388608
 20064 001a 9A60     		str	r2, [r3, #8]
 20065 001c 05E0     		b	.L76
 20066              	.L77:
1175:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1176:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
1177:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1178:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
1179:../StdPeripheralDriver/src/stm32f10x_adc.c ****     ADC1->CR2 &= CR2_TSVREFE_Reset;
 20067              		.loc 1 1179 0
 20068 001e 054B     		ldr	r3, .L79
 20069 0020 044A     		ldr	r2, .L79
 20070 0022 9268     		ldr	r2, [r2, #8]
 20071 0024 22F40002 		bic	r2, r2, #8388608
 20072 0028 9A60     		str	r2, [r3, #8]
 20073              	.L76:
1180:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1181:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20074              		.loc 1 1181 0
 20075 002a 07F10C07 		add	r7, r7, #12
 20076 002e BD46     		mov	sp, r7
 20077 0030 80BC     		pop	{r7}
 20078 0032 7047     		bx	lr
 20079              	.L80:
 20080              		.align	2
 20081              	.L79:
 20082 0034 00240140 		.word	1073816576
 20083              		.cfi_endproc
 20084              	.LFE60:
 20086              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 20087              		.align	2
 20088              		.global	ADC_GetFlagStatus
 20089              		.thumb
 20090              		.thumb_func
 20092              	ADC_GetFlagStatus:
 20093              	.LFB61:
1182:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1183:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1184:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1185:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1186:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1187:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1188:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_AWD: Analog watchdog flag
1189:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_EOC: End of conversion flag
1190:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JEOC: End of injected group conversion flag
1191:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1192:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
1193:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1194:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1195:../StdPeripheralDriver/src/stm32f10x_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1196:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20094              		.loc 1 1196 0
 20095              		.cfi_startproc
 20096              		@ args = 0, pretend = 0, frame = 16
 20097              		@ frame_needed = 1, uses_anonymous_args = 0
 20098              		@ link register save eliminated.
 20099 0000 80B4     		push	{r7}
 20100              	.LCFI95:
 20101              		.cfi_def_cfa_offset 4
 20102 0002 85B0     		sub	sp, sp, #20
 20103              	.LCFI96:
 20104              		.cfi_def_cfa_offset 24
 20105 0004 00AF     		add	r7, sp, #0
 20106              		.cfi_offset 7, -4
 20107              	.LCFI97:
 20108              		.cfi_def_cfa_register 7
 20109 0006 7860     		str	r0, [r7, #4]
 20110 0008 0B46     		mov	r3, r1
 20111 000a FB70     		strb	r3, [r7, #3]
1197:../StdPeripheralDriver/src/stm32f10x_adc.c ****   FlagStatus bitstatus = RESET;
 20112              		.loc 1 1197 0
 20113 000c 4FF00003 		mov	r3, #0
 20114 0010 FB73     		strb	r3, [r7, #15]
1198:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1199:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1200:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1201:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of the specified ADC flag */
1202:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 20115              		.loc 1 1202 0
 20116 0012 7B68     		ldr	r3, [r7, #4]
 20117 0014 1A68     		ldr	r2, [r3, #0]
 20118 0016 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 20119 0018 02EA0303 		and	r3, r2, r3
 20120 001c 002B     		cmp	r3, #0
 20121 001e 03D0     		beq	.L82
1203:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1204:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_FLAG is set */
1205:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 20122              		.loc 1 1205 0
 20123 0020 4FF00103 		mov	r3, #1
 20124 0024 FB73     		strb	r3, [r7, #15]
 20125 0026 02E0     		b	.L83
 20126              	.L82:
1206:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1207:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
1208:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1209:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_FLAG is reset */
1210:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 20127              		.loc 1 1210 0
 20128 0028 4FF00003 		mov	r3, #0
 20129 002c FB73     		strb	r3, [r7, #15]
 20130              	.L83:
1211:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1212:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the ADC_FLAG status */
1213:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 20131              		.loc 1 1213 0
 20132 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1214:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20133              		.loc 1 1214 0
 20134 0030 1846     		mov	r0, r3
 20135 0032 07F11407 		add	r7, r7, #20
 20136 0036 BD46     		mov	sp, r7
 20137 0038 80BC     		pop	{r7}
 20138 003a 7047     		bx	lr
 20139              		.cfi_endproc
 20140              	.LFE61:
 20142              		.section	.text.ADC_ClearFlag,"ax",%progbits
 20143              		.align	2
 20144              		.global	ADC_ClearFlag
 20145              		.thumb
 20146              		.thumb_func
 20148              	ADC_ClearFlag:
 20149              	.LFB62:
1215:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1216:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1217:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Clears the ADCx's pending flags.
1218:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1219:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1220:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
1221:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_AWD: Analog watchdog flag
1222:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_EOC: End of conversion flag
1223:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JEOC: End of injected group conversion flag
1224:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1225:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
1226:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1227:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1228:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1229:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20150              		.loc 1 1229 0
 20151              		.cfi_startproc
 20152              		@ args = 0, pretend = 0, frame = 8
 20153              		@ frame_needed = 1, uses_anonymous_args = 0
 20154              		@ link register save eliminated.
 20155 0000 80B4     		push	{r7}
 20156              	.LCFI98:
 20157              		.cfi_def_cfa_offset 4
 20158 0002 83B0     		sub	sp, sp, #12
 20159              	.LCFI99:
 20160              		.cfi_def_cfa_offset 16
 20161 0004 00AF     		add	r7, sp, #0
 20162              		.cfi_offset 7, -4
 20163              	.LCFI100:
 20164              		.cfi_def_cfa_register 7
 20165 0006 7860     		str	r0, [r7, #4]
 20166 0008 0B46     		mov	r3, r1
 20167 000a FB70     		strb	r3, [r7, #3]
1230:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1231:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1232:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1233:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the selected ADC flags */
1234:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 20168              		.loc 1 1234 0
 20169 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 20170 000e 6FEA0302 		mvn	r2, r3
 20171 0012 7B68     		ldr	r3, [r7, #4]
 20172 0014 1A60     		str	r2, [r3, #0]
1235:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20173              		.loc 1 1235 0
 20174 0016 07F10C07 		add	r7, r7, #12
 20175 001a BD46     		mov	sp, r7
 20176 001c 80BC     		pop	{r7}
 20177 001e 7047     		bx	lr
 20178              		.cfi_endproc
 20179              	.LFE62:
 20181              		.section	.text.ADC_GetITStatus,"ax",%progbits
 20182              		.align	2
 20183              		.global	ADC_GetITStatus
 20184              		.thumb
 20185              		.thumb_func
 20187              	ADC_GetITStatus:
 20188              	.LFB63:
1236:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1237:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1238:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1239:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1240:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1241:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be one of the following values:
1242:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
1243:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
1244:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1245:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1246:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1247:../StdPeripheralDriver/src/stm32f10x_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1248:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20189              		.loc 1 1248 0
 20190              		.cfi_startproc
 20191              		@ args = 0, pretend = 0, frame = 24
 20192              		@ frame_needed = 1, uses_anonymous_args = 0
 20193              		@ link register save eliminated.
 20194 0000 80B4     		push	{r7}
 20195              	.LCFI101:
 20196              		.cfi_def_cfa_offset 4
 20197 0002 87B0     		sub	sp, sp, #28
 20198              	.LCFI102:
 20199              		.cfi_def_cfa_offset 32
 20200 0004 00AF     		add	r7, sp, #0
 20201              		.cfi_offset 7, -4
 20202              	.LCFI103:
 20203              		.cfi_def_cfa_register 7
 20204 0006 7860     		str	r0, [r7, #4]
 20205 0008 0B46     		mov	r3, r1
 20206 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1249:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ITStatus bitstatus = RESET;
 20207              		.loc 1 1249 0
 20208 000c 4FF00003 		mov	r3, #0
 20209 0010 FB75     		strb	r3, [r7, #23]
1250:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 20210              		.loc 1 1250 0
 20211 0012 4FF00003 		mov	r3, #0
 20212 0016 3B61     		str	r3, [r7, #16]
 20213 0018 4FF00003 		mov	r3, #0
 20214 001c FB60     		str	r3, [r7, #12]
1251:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1252:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1253:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_GET_IT(ADC_IT));
1254:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
1255:../StdPeripheralDriver/src/stm32f10x_adc.c ****   itmask = ADC_IT >> 8;
 20215              		.loc 1 1255 0
 20216 001e 7B88     		ldrh	r3, [r7, #2]
 20217 0020 4FEA1323 		lsr	r3, r3, #8
 20218 0024 9BB2     		uxth	r3, r3
 20219 0026 3B61     		str	r3, [r7, #16]
1256:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC_IT enable bit status */
1257:../StdPeripheralDriver/src/stm32f10x_adc.c ****   enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
 20220              		.loc 1 1257 0
 20221 0028 7B68     		ldr	r3, [r7, #4]
 20222 002a 5A68     		ldr	r2, [r3, #4]
 20223 002c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 20224 002e DBB2     		uxtb	r3, r3
 20225 0030 02EA0303 		and	r3, r2, r3
 20226 0034 FB60     		str	r3, [r7, #12]
1258:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the status of the specified ADC interrupt */
1259:../StdPeripheralDriver/src/stm32f10x_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 20227              		.loc 1 1259 0
 20228 0036 7B68     		ldr	r3, [r7, #4]
 20229 0038 1A68     		ldr	r2, [r3, #0]
 20230 003a 3B69     		ldr	r3, [r7, #16]
 20231 003c 02EA0303 		and	r3, r2, r3
 20232 0040 002B     		cmp	r3, #0
 20233 0042 06D0     		beq	.L86
 20234              		.loc 1 1259 0 is_stmt 0 discriminator 1
 20235 0044 FB68     		ldr	r3, [r7, #12]
 20236 0046 002B     		cmp	r3, #0
 20237 0048 03D0     		beq	.L86
1260:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1261:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_IT is set */
1262:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = SET;
 20238              		.loc 1 1262 0 is_stmt 1
 20239 004a 4FF00103 		mov	r3, #1
 20240 004e FB75     		strb	r3, [r7, #23]
 20241 0050 02E0     		b	.L87
 20242              	.L86:
1263:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1264:../StdPeripheralDriver/src/stm32f10x_adc.c ****   else
1265:../StdPeripheralDriver/src/stm32f10x_adc.c ****   {
1266:../StdPeripheralDriver/src/stm32f10x_adc.c ****     /* ADC_IT is reset */
1267:../StdPeripheralDriver/src/stm32f10x_adc.c ****     bitstatus = RESET;
 20243              		.loc 1 1267 0
 20244 0052 4FF00003 		mov	r3, #0
 20245 0056 FB75     		strb	r3, [r7, #23]
 20246              	.L87:
1268:../StdPeripheralDriver/src/stm32f10x_adc.c ****   }
1269:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Return the ADC_IT status */
1270:../StdPeripheralDriver/src/stm32f10x_adc.c ****   return  bitstatus;
 20247              		.loc 1 1270 0
 20248 0058 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1271:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20249              		.loc 1 1271 0
 20250 005a 1846     		mov	r0, r3
 20251 005c 07F11C07 		add	r7, r7, #28
 20252 0060 BD46     		mov	sp, r7
 20253 0062 80BC     		pop	{r7}
 20254 0064 7047     		bx	lr
 20255              		.cfi_endproc
 20256              	.LFE63:
 20258 0066 00BF     		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 20259              		.align	2
 20260              		.global	ADC_ClearITPendingBit
 20261              		.thumb
 20262              		.thumb_func
 20264              	ADC_ClearITPendingBit:
 20265              	.LFB64:
1272:../StdPeripheralDriver/src/stm32f10x_adc.c **** 
1273:../StdPeripheralDriver/src/stm32f10x_adc.c **** /**
1274:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1275:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1276:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1277:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *   This parameter can be any combination of the following values:
1278:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_EOC: End of conversion interrupt mask
1279:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
1280:../StdPeripheralDriver/src/stm32f10x_adc.c ****   *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1281:../StdPeripheralDriver/src/stm32f10x_adc.c ****   * @retval None
1282:../StdPeripheralDriver/src/stm32f10x_adc.c ****   */
1283:../StdPeripheralDriver/src/stm32f10x_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1284:../StdPeripheralDriver/src/stm32f10x_adc.c **** {
 20266              		.loc 1 1284 0
 20267              		.cfi_startproc
 20268              		@ args = 0, pretend = 0, frame = 16
 20269              		@ frame_needed = 1, uses_anonymous_args = 0
 20270              		@ link register save eliminated.
 20271 0000 80B4     		push	{r7}
 20272              	.LCFI104:
 20273              		.cfi_def_cfa_offset 4
 20274 0002 85B0     		sub	sp, sp, #20
 20275              	.LCFI105:
 20276              		.cfi_def_cfa_offset 24
 20277 0004 00AF     		add	r7, sp, #0
 20278              		.cfi_offset 7, -4
 20279              	.LCFI106:
 20280              		.cfi_def_cfa_register 7
 20281 0006 7860     		str	r0, [r7, #4]
 20282 0008 0B46     		mov	r3, r1
 20283 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1285:../StdPeripheralDriver/src/stm32f10x_adc.c ****   uint8_t itmask = 0;
 20284              		.loc 1 1285 0
 20285 000c 4FF00003 		mov	r3, #0
 20286 0010 FB73     		strb	r3, [r7, #15]
1286:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Check the parameters */
1287:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1288:../StdPeripheralDriver/src/stm32f10x_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1289:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Get the ADC IT index */
1290:../StdPeripheralDriver/src/stm32f10x_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 20287              		.loc 1 1290 0
 20288 0012 7B88     		ldrh	r3, [r7, #2]
 20289 0014 4FEA1323 		lsr	r3, r3, #8
 20290 0018 9BB2     		uxth	r3, r3
 20291 001a FB73     		strb	r3, [r7, #15]
1291:../StdPeripheralDriver/src/stm32f10x_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1292:../StdPeripheralDriver/src/stm32f10x_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 20292              		.loc 1 1292 0
 20293 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 20294 001e 6FEA0302 		mvn	r2, r3
 20295 0022 7B68     		ldr	r3, [r7, #4]
 20296 0024 1A60     		str	r2, [r3, #0]
1293:../StdPeripheralDriver/src/stm32f10x_adc.c **** }
 20297              		.loc 1 1293 0
 20298 0026 07F11407 		add	r7, r7, #20
 20299 002a BD46     		mov	sp, r7
 20300 002c 80BC     		pop	{r7}
 20301 002e 7047     		bx	lr
 20302              		.cfi_endproc
 20303              	.LFE64:
 20305              		.text
 20306              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_adc.c
     /tmp/cclkJyce.s:18020  .text.ADC_DeInit:00000000 $t
     /tmp/cclkJyce.s:18025  .text.ADC_DeInit:00000000 ADC_DeInit
     /tmp/cclkJyce.s:18094  .text.ADC_DeInit:00000074 $d
     /tmp/cclkJyce.s:18101  .text.ADC_Init:00000000 $t
     /tmp/cclkJyce.s:18106  .text.ADC_Init:00000000 ADC_Init
     /tmp/cclkJyce.s:18216  .text.ADC_Init:000000b8 $d
     /tmp/cclkJyce.s:18221  .text.ADC_StructInit:00000000 $t
     /tmp/cclkJyce.s:18226  .text.ADC_StructInit:00000000 ADC_StructInit
     /tmp/cclkJyce.s:18277  .text.ADC_Cmd:00000000 $t
     /tmp/cclkJyce.s:18282  .text.ADC_Cmd:00000000 ADC_Cmd
     /tmp/cclkJyce.s:18330  .text.ADC_DMACmd:00000000 $t
     /tmp/cclkJyce.s:18335  .text.ADC_DMACmd:00000000 ADC_DMACmd
     /tmp/cclkJyce.s:18383  .text.ADC_ITConfig:00000000 $t
     /tmp/cclkJyce.s:18388  .text.ADC_ITConfig:00000000 ADC_ITConfig
     /tmp/cclkJyce.s:18447  .text.ADC_ResetCalibration:00000000 $t
     /tmp/cclkJyce.s:18452  .text.ADC_ResetCalibration:00000000 ADC_ResetCalibration
     /tmp/cclkJyce.s:18485  .text.ADC_GetResetCalibrationStatus:00000000 $t
     /tmp/cclkJyce.s:18490  .text.ADC_GetResetCalibrationStatus:00000000 ADC_GetResetCalibrationStatus
     /tmp/cclkJyce.s:18538  .text.ADC_StartCalibration:00000000 $t
     /tmp/cclkJyce.s:18543  .text.ADC_StartCalibration:00000000 ADC_StartCalibration
     /tmp/cclkJyce.s:18576  .text.ADC_GetCalibrationStatus:00000000 $t
     /tmp/cclkJyce.s:18581  .text.ADC_GetCalibrationStatus:00000000 ADC_GetCalibrationStatus
     /tmp/cclkJyce.s:18629  .text.ADC_SoftwareStartConvCmd:00000000 $t
     /tmp/cclkJyce.s:18634  .text.ADC_SoftwareStartConvCmd:00000000 ADC_SoftwareStartConvCmd
     /tmp/cclkJyce.s:18682  .text.ADC_GetSoftwareStartConvStatus:00000000 $t
     /tmp/cclkJyce.s:18687  .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
     /tmp/cclkJyce.s:18735  .text.ADC_DiscModeChannelCountConfig:00000000 $t
     /tmp/cclkJyce.s:18740  .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
     /tmp/cclkJyce.s:18797  .text.ADC_DiscModeCmd:00000000 $t
     /tmp/cclkJyce.s:18802  .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
     /tmp/cclkJyce.s:18850  .text.ADC_RegularChannelConfig:00000000 $t
     /tmp/cclkJyce.s:18855  .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
     /tmp/cclkJyce.s:19093  .text.ADC_ExternalTrigConvCmd:00000000 $t
     /tmp/cclkJyce.s:19098  .text.ADC_ExternalTrigConvCmd:00000000 ADC_ExternalTrigConvCmd
     /tmp/cclkJyce.s:19146  .text.ADC_GetConversionValue:00000000 $t
     /tmp/cclkJyce.s:19151  .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
     /tmp/cclkJyce.s:19183  .text.ADC_GetDualModeConversionValue:00000000 $t
     /tmp/cclkJyce.s:19188  .text.ADC_GetDualModeConversionValue:00000000 ADC_GetDualModeConversionValue
     /tmp/cclkJyce.s:19213  .text.ADC_GetDualModeConversionValue:00000010 $d
     /tmp/cclkJyce.s:19218  .text.ADC_AutoInjectedConvCmd:00000000 $t
     /tmp/cclkJyce.s:19223  .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
     /tmp/cclkJyce.s:19271  .text.ADC_InjectedDiscModeCmd:00000000 $t
     /tmp/cclkJyce.s:19276  .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
     /tmp/cclkJyce.s:19324  .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
     /tmp/cclkJyce.s:19329  .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/cclkJyce.s:19377  .text.ADC_ExternalTrigInjectedConvCmd:00000000 $t
     /tmp/cclkJyce.s:19382  .text.ADC_ExternalTrigInjectedConvCmd:00000000 ADC_ExternalTrigInjectedConvCmd
     /tmp/cclkJyce.s:19430  .text.ADC_SoftwareStartInjectedConvCmd:00000000 $t
     /tmp/cclkJyce.s:19435  .text.ADC_SoftwareStartInjectedConvCmd:00000000 ADC_SoftwareStartInjectedConvCmd
     /tmp/cclkJyce.s:19483  .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
     /tmp/cclkJyce.s:19488  .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/cclkJyce.s:19536  .text.ADC_InjectedChannelConfig:00000000 $t
     /tmp/cclkJyce.s:19541  .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
     /tmp/cclkJyce.s:19715  .text.ADC_InjectedSequencerLengthConfig:00000000 $t
     /tmp/cclkJyce.s:19720  .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
     /tmp/cclkJyce.s:19777  .text.ADC_SetInjectedOffset:00000000 $t
     /tmp/cclkJyce.s:19782  .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
     /tmp/cclkJyce.s:19828  .text.ADC_GetInjectedConversionValue:00000000 $t
     /tmp/cclkJyce.s:19833  .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
     /tmp/cclkJyce.s:19879  .text.ADC_AnalogWatchdogCmd:00000000 $t
     /tmp/cclkJyce.s:19884  .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
     /tmp/cclkJyce.s:19933  .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
     /tmp/cclkJyce.s:19938  .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/cclkJyce.s:19977  .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
     /tmp/cclkJyce.s:19982  .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/cclkJyce.s:20031  .text.ADC_TempSensorVrefintCmd:00000000 $t
     /tmp/cclkJyce.s:20036  .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
     /tmp/cclkJyce.s:20082  .text.ADC_TempSensorVrefintCmd:00000034 $d
     /tmp/cclkJyce.s:20087  .text.ADC_GetFlagStatus:00000000 $t
     /tmp/cclkJyce.s:20092  .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
     /tmp/cclkJyce.s:20143  .text.ADC_ClearFlag:00000000 $t
     /tmp/cclkJyce.s:20148  .text.ADC_ClearFlag:00000000 ADC_ClearFlag
     /tmp/cclkJyce.s:20182  .text.ADC_GetITStatus:00000000 $t
     /tmp/cclkJyce.s:20187  .text.ADC_GetITStatus:00000000 ADC_GetITStatus
     /tmp/cclkJyce.s:20259  .text.ADC_ClearITPendingBit:00000000 $t
     /tmp/cclkJyce.s:20264  .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
