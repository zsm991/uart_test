   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f10x_rcc.c"
  23              	.Ltext0:
  24              		.file 1 "../StdPeripheralDriver/src/stm32f10x_rcc.c"
 16872              		.align	2
 16875              	APBAHBPrescTable:
 16876 0000 00       		.byte	0
 16877 0001 00       		.byte	0
 16878 0002 00       		.byte	0
 16879 0003 00       		.byte	0
 16880 0004 01       		.byte	1
 16881 0005 02       		.byte	2
 16882 0006 03       		.byte	3
 16883 0007 04       		.byte	4
 16884 0008 01       		.byte	1
 16885 0009 02       		.byte	2
 16886 000a 03       		.byte	3
 16887 000b 04       		.byte	4
 16888 000c 06       		.byte	6
 16889 000d 07       		.byte	7
 16890 000e 08       		.byte	8
 16891 000f 09       		.byte	9
 16892              		.section	.data.ADCPrescTable,"aw",%progbits
 16893              		.align	2
 16896              	ADCPrescTable:
 16897 0000 02       		.byte	2
 16898 0001 04       		.byte	4
 16899 0002 06       		.byte	6
 16900 0003 08       		.byte	8
 16901              		.section	.text.RCC_DeInit,"ax",%progbits
 16902              		.align	2
 16903              		.global	RCC_DeInit
 16904              		.thumb
 16905              		.thumb_func
 16907              	RCC_DeInit:
 16908              	.LFB29:
   1:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
   2:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
   3:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
   4:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @version V3.5.0
   6:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
   9:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @attention
  10:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *
  11:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *
  18:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
  20:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  21:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  22:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  25:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  27:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  28:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  29:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC 
  30:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief RCC driver modules
  31:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  32:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
  33:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  34:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  35:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  36:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  37:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  38:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
  39:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
  40:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  41:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  42:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  43:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  44:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  45:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  46:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  47:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  48:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  49:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CR Register ---*/
  50:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  51:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  52:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  53:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  54:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  55:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  56:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  57:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  58:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  59:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  60:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  61:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  62:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  63:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  64:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  65:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  66:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  67:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  68:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  69:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  70:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  71:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  72:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  73:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  74:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  75:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  76:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  77:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  78:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  79:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  80:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  81:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  82:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
  83:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  84:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  85:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  86:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  87:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  88:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  89:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  90:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  91:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  92:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  93:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  94:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  95:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  96:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  97:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  98:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CSR Register ---*/
  99:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 100:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 101:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 102:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 103:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 104:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 105:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 106:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 107:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 108:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 109:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 110:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 111:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 112:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 113:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 114:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 115:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 116:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 117:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 118:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 119:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 120:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CR register bit mask */
 121:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 122:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 123:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 124:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 125:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 126:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 127:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR register bit mask */
 128:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 129:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 130:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 131:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 132:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 133:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 134:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 135:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 136:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 137:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 138:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 139:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 140:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 141:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 142:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 143:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 144:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 145:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 146:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 147:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 148:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CSR register bit mask */
 149:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 150:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 151:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 152:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 153:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 154:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 155:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 156:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 157:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 158:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 159:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 160:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 161:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 162:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* RCC Flag Mask */
 163:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 164:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 165:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 166:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 167:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 168:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 169:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 170:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 171:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 172:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 173:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 174:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* BDCR register base address */
 175:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 176:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 177:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 178:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 179:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 180:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 181:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 182:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 183:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 184:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 185:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 186:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 187:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 188:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 189:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 190:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 191:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 192:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 193:../StdPeripheralDriver/src/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 194:../StdPeripheralDriver/src/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 195:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 196:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 197:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 198:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 199:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 200:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 201:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 202:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 203:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 204:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 205:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 206:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 207:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 208:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 209:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 210:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 211:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 212:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 213:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 214:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 215:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 216:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 217:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_DeInit(void)
 218:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 16909              		.loc 1 218 0
 16910              		.cfi_startproc
 16911              		@ args = 0, pretend = 0, frame = 0
 16912              		@ frame_needed = 1, uses_anonymous_args = 0
 16913              		@ link register save eliminated.
 16914 0000 80B4     		push	{r7}
 16915              	.LCFI0:
 16916              		.cfi_def_cfa_offset 4
 16917 0002 00AF     		add	r7, sp, #0
 16918              		.cfi_offset 7, -4
 16919              	.LCFI1:
 16920              		.cfi_def_cfa_register 7
 219:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set HSION bit */
 220:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
 16921              		.loc 1 220 0
 16922 0004 154B     		ldr	r3, .L2
 16923 0006 154A     		ldr	r2, .L2
 16924 0008 1268     		ldr	r2, [r2, #0]
 16925 000a 42F00102 		orr	r2, r2, #1
 16926 000e 1A60     		str	r2, [r3, #0]
 221:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 222:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 223:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 224:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
 16927              		.loc 1 224 0
 16928 0010 124A     		ldr	r2, .L2
 16929 0012 124B     		ldr	r3, .L2
 16930 0014 5968     		ldr	r1, [r3, #4]
 16931 0016 124B     		ldr	r3, .L2+4
 16932 0018 01EA0303 		and	r3, r1, r3
 16933 001c 5360     		str	r3, [r2, #4]
 225:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 226:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 227:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 228:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 229:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 230:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
 16934              		.loc 1 230 0
 16935 001e 0F4A     		ldr	r2, .L2
 16936 0020 0E4B     		ldr	r3, .L2
 16937 0022 1B68     		ldr	r3, [r3, #0]
 16938 0024 23F08473 		bic	r3, r3, #17301504
 16939 0028 23F48033 		bic	r3, r3, #65536
 16940 002c 1360     		str	r3, [r2, #0]
 231:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 232:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 233:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 16941              		.loc 1 233 0
 16942 002e 0B4B     		ldr	r3, .L2
 16943 0030 0A4A     		ldr	r2, .L2
 16944 0032 1268     		ldr	r2, [r2, #0]
 16945 0034 22F48022 		bic	r2, r2, #262144
 16946 0038 1A60     		str	r2, [r3, #0]
 234:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 235:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 236:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
 16947              		.loc 1 236 0
 16948 003a 084B     		ldr	r3, .L2
 16949 003c 074A     		ldr	r2, .L2
 16950 003e 5268     		ldr	r2, [r2, #4]
 16951 0040 22F4FE02 		bic	r2, r2, #8323072
 16952 0044 5A60     		str	r2, [r3, #4]
 237:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 238:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 239:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 240:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 241:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 242:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 243:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 244:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 245:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 246:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 247:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 248:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 249:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 16953              		.loc 1 249 0
 16954 0046 054B     		ldr	r3, .L2
 16955 0048 4FF41F02 		mov	r2, #10420224
 16956 004c 9A60     		str	r2, [r3, #8]
 250:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 251:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 252:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 16957              		.loc 1 252 0
 16958 004e 034B     		ldr	r3, .L2
 16959 0050 4FF00002 		mov	r2, #0
 16960 0054 DA62     		str	r2, [r3, #44]
 253:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 254:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 255:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 256:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 257:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 258:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 16961              		.loc 1 258 0
 16962 0056 BD46     		mov	sp, r7
 16963 0058 80BC     		pop	{r7}
 16964 005a 7047     		bx	lr
 16965              	.L3:
 16966              		.align	2
 16967              	.L2:
 16968 005c 00100240 		.word	1073876992
 16969 0060 0000FFF8 		.word	-117506048
 16970              		.cfi_endproc
 16971              	.LFE29:
 16973              		.section	.text.RCC_HSEConfig,"ax",%progbits
 16974              		.align	2
 16975              		.global	RCC_HSEConfig
 16976              		.thumb
 16977              		.thumb_func
 16979              	RCC_HSEConfig:
 16980              	.LFB30:
 259:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 260:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 261:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 262:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 263:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 264:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 265:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 266:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 267:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 268:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 269:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 270:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 271:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 16981              		.loc 1 271 0
 16982              		.cfi_startproc
 16983              		@ args = 0, pretend = 0, frame = 8
 16984              		@ frame_needed = 1, uses_anonymous_args = 0
 16985              		@ link register save eliminated.
 16986 0000 80B4     		push	{r7}
 16987              	.LCFI2:
 16988              		.cfi_def_cfa_offset 4
 16989 0002 83B0     		sub	sp, sp, #12
 16990              	.LCFI3:
 16991              		.cfi_def_cfa_offset 16
 16992 0004 00AF     		add	r7, sp, #0
 16993              		.cfi_offset 7, -4
 16994              	.LCFI4:
 16995              		.cfi_def_cfa_register 7
 16996 0006 7860     		str	r0, [r7, #4]
 272:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 273:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 274:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 275:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 276:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
 16997              		.loc 1 276 0
 16998 0008 134B     		ldr	r3, .L9
 16999 000a 134A     		ldr	r2, .L9
 17000 000c 1268     		ldr	r2, [r2, #0]
 17001 000e 22F48032 		bic	r2, r2, #65536
 17002 0012 1A60     		str	r2, [r3, #0]
 277:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 278:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 17003              		.loc 1 278 0
 17004 0014 104B     		ldr	r3, .L9
 17005 0016 104A     		ldr	r2, .L9
 17006 0018 1268     		ldr	r2, [r2, #0]
 17007 001a 22F48022 		bic	r2, r2, #262144
 17008 001e 1A60     		str	r2, [r3, #0]
 279:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 280:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch(RCC_HSE)
 17009              		.loc 1 280 0
 17010 0020 7B68     		ldr	r3, [r7, #4]
 17011 0022 B3F5803F 		cmp	r3, #65536
 17012 0026 03D0     		beq	.L6
 17013 0028 B3F5802F 		cmp	r3, #262144
 17014 002c 07D0     		beq	.L7
 281:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 282:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 283:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set HSEON bit */
 284:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 285:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 286:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 287:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 288:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 289:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 290:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 291:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 292:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
 293:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 17015              		.loc 1 293 0
 17016 002e 0DE0     		b	.L4
 17017              	.L6:
 284:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 17018              		.loc 1 284 0
 17019 0030 094B     		ldr	r3, .L9
 17020 0032 094A     		ldr	r2, .L9
 17021 0034 1268     		ldr	r2, [r2, #0]
 17022 0036 42F48032 		orr	r2, r2, #65536
 17023 003a 1A60     		str	r2, [r3, #0]
 285:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 17024              		.loc 1 285 0
 17025 003c 06E0     		b	.L4
 17026              	.L7:
 289:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 17027              		.loc 1 289 0
 17028 003e 064B     		ldr	r3, .L9
 17029 0040 054A     		ldr	r2, .L9
 17030 0042 1268     		ldr	r2, [r2, #0]
 17031 0044 42F4A022 		orr	r2, r2, #327680
 17032 0048 1A60     		str	r2, [r3, #0]
 290:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 17033              		.loc 1 290 0
 17034 004a 00BF     		nop
 17035              	.L4:
 294:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 295:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17036              		.loc 1 295 0
 17037 004c 07F10C07 		add	r7, r7, #12
 17038 0050 BD46     		mov	sp, r7
 17039 0052 80BC     		pop	{r7}
 17040 0054 7047     		bx	lr
 17041              	.L10:
 17042 0056 00BF     		.align	2
 17043              	.L9:
 17044 0058 00100240 		.word	1073876992
 17045              		.cfi_endproc
 17046              	.LFE30:
 17048              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 17049              		.align	2
 17050              		.global	RCC_WaitForHSEStartUp
 17051              		.thumb
 17052              		.thumb_func
 17054              	RCC_WaitForHSEStartUp:
 17055              	.LFB31:
 296:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 297:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 298:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 299:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 300:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 301:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 302:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 303:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 304:../StdPeripheralDriver/src/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 305:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17056              		.loc 1 305 0
 17057              		.cfi_startproc
 17058              		@ args = 0, pretend = 0, frame = 8
 17059              		@ frame_needed = 1, uses_anonymous_args = 0
 17060 0000 80B5     		push	{r7, lr}
 17061              	.LCFI5:
 17062              		.cfi_def_cfa_offset 8
 17063 0002 82B0     		sub	sp, sp, #8
 17064              	.LCFI6:
 17065              		.cfi_def_cfa_offset 16
 17066 0004 00AF     		add	r7, sp, #0
 17067              		.cfi_offset 14, -4
 17068              		.cfi_offset 7, -8
 17069              	.LCFI7:
 17070              		.cfi_def_cfa_register 7
 306:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 17071              		.loc 1 306 0
 17072 0006 4FF00003 		mov	r3, #0
 17073 000a 3B60     		str	r3, [r7, #0]
 307:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 17074              		.loc 1 307 0
 17075 000c 4FF00003 		mov	r3, #0
 17076 0010 FB71     		strb	r3, [r7, #7]
 308:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 17077              		.loc 1 308 0
 17078 0012 4FF00003 		mov	r3, #0
 17079 0016 BB71     		strb	r3, [r7, #6]
 17080              	.L13:
 309:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 310:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 311:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   do
 312:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 313:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 17081              		.loc 1 313 0 discriminator 1
 17082 0018 4FF03100 		mov	r0, #49
 17083 001c FFF7FEFF 		bl	RCC_GetFlagStatus
 17084 0020 0346     		mov	r3, r0
 17085 0022 BB71     		strb	r3, [r7, #6]
 314:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     StartUpCounter++;  
 17086              		.loc 1 314 0 discriminator 1
 17087 0024 3B68     		ldr	r3, [r7, #0]
 17088 0026 03F10103 		add	r3, r3, #1
 17089 002a 3B60     		str	r3, [r7, #0]
 315:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 17090              		.loc 1 315 0 discriminator 1
 17091 002c 3B68     		ldr	r3, [r7, #0]
 17092 002e B3F5A06F 		cmp	r3, #1280
 17093 0032 02D0     		beq	.L12
 17094 0034 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 17095 0036 002B     		cmp	r3, #0
 17096 0038 EED0     		beq	.L13
 17097              	.L12:
 316:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 317:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 17098              		.loc 1 317 0
 17099 003a 4FF03100 		mov	r0, #49
 17100 003e FFF7FEFF 		bl	RCC_GetFlagStatus
 17101 0042 0346     		mov	r3, r0
 17102 0044 002B     		cmp	r3, #0
 17103 0046 03D0     		beq	.L14
 318:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 319:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     status = SUCCESS;
 17104              		.loc 1 319 0
 17105 0048 4FF00103 		mov	r3, #1
 17106 004c FB71     		strb	r3, [r7, #7]
 17107 004e 02E0     		b	.L15
 17108              	.L14:
 320:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 321:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
 322:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 323:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     status = ERROR;
 17109              		.loc 1 323 0
 17110 0050 4FF00003 		mov	r3, #0
 17111 0054 FB71     		strb	r3, [r7, #7]
 17112              	.L15:
 324:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }  
 325:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return (status);
 17113              		.loc 1 325 0
 17114 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 326:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17115              		.loc 1 326 0
 17116 0058 1846     		mov	r0, r3
 17117 005a 07F10807 		add	r7, r7, #8
 17118 005e BD46     		mov	sp, r7
 17119 0060 80BD     		pop	{r7, pc}
 17120              		.cfi_endproc
 17121              	.LFE31:
 17123 0062 00BF     		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 17124              		.align	2
 17125              		.global	RCC_AdjustHSICalibrationValue
 17126              		.thumb
 17127              		.thumb_func
 17129              	RCC_AdjustHSICalibrationValue:
 17130              	.LFB32:
 327:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 328:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 329:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 330:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 331:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 332:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 333:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 334:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 335:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17131              		.loc 1 335 0
 17132              		.cfi_startproc
 17133              		@ args = 0, pretend = 0, frame = 16
 17134              		@ frame_needed = 1, uses_anonymous_args = 0
 17135              		@ link register save eliminated.
 17136 0000 80B4     		push	{r7}
 17137              	.LCFI8:
 17138              		.cfi_def_cfa_offset 4
 17139 0002 85B0     		sub	sp, sp, #20
 17140              	.LCFI9:
 17141              		.cfi_def_cfa_offset 24
 17142 0004 00AF     		add	r7, sp, #0
 17143              		.cfi_offset 7, -4
 17144              	.LCFI10:
 17145              		.cfi_def_cfa_register 7
 17146 0006 0346     		mov	r3, r0
 17147 0008 FB71     		strb	r3, [r7, #7]
 336:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 17148              		.loc 1 336 0
 17149 000a 4FF00003 		mov	r3, #0
 17150 000e FB60     		str	r3, [r7, #12]
 337:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 338:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 339:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 17151              		.loc 1 339 0
 17152 0010 0A4B     		ldr	r3, .L17
 17153 0012 1B68     		ldr	r3, [r3, #0]
 17154 0014 FB60     		str	r3, [r7, #12]
 340:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 17155              		.loc 1 341 0
 17156 0016 FB68     		ldr	r3, [r7, #12]
 17157 0018 23F0F803 		bic	r3, r3, #248
 17158 001c FB60     		str	r3, [r7, #12]
 342:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 343:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 17159              		.loc 1 343 0
 17160 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 17161 0020 4FEAC303 		lsl	r3, r3, #3
 17162 0024 FA68     		ldr	r2, [r7, #12]
 17163 0026 42EA0303 		orr	r3, r2, r3
 17164 002a FB60     		str	r3, [r7, #12]
 344:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 345:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 17165              		.loc 1 345 0
 17166 002c 034B     		ldr	r3, .L17
 17167 002e FA68     		ldr	r2, [r7, #12]
 17168 0030 1A60     		str	r2, [r3, #0]
 346:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17169              		.loc 1 346 0
 17170 0032 07F11407 		add	r7, r7, #20
 17171 0036 BD46     		mov	sp, r7
 17172 0038 80BC     		pop	{r7}
 17173 003a 7047     		bx	lr
 17174              	.L18:
 17175              		.align	2
 17176              	.L17:
 17177 003c 00100240 		.word	1073876992
 17178              		.cfi_endproc
 17179              	.LFE32:
 17181              		.section	.text.RCC_HSICmd,"ax",%progbits
 17182              		.align	2
 17183              		.global	RCC_HSICmd
 17184              		.thumb
 17185              		.thumb_func
 17187              	RCC_HSICmd:
 17188              	.LFB33:
 347:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 348:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 349:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 350:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 351:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 352:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 353:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 354:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17189              		.loc 1 355 0
 17190              		.cfi_startproc
 17191              		@ args = 0, pretend = 0, frame = 8
 17192              		@ frame_needed = 1, uses_anonymous_args = 0
 17193              		@ link register save eliminated.
 17194 0000 80B4     		push	{r7}
 17195              	.LCFI11:
 17196              		.cfi_def_cfa_offset 4
 17197 0002 83B0     		sub	sp, sp, #12
 17198              	.LCFI12:
 17199              		.cfi_def_cfa_offset 16
 17200 0004 00AF     		add	r7, sp, #0
 17201              		.cfi_offset 7, -4
 17202              	.LCFI13:
 17203              		.cfi_def_cfa_register 7
 17204 0006 0346     		mov	r3, r0
 17205 0008 FB71     		strb	r3, [r7, #7]
 356:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 357:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 358:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 17206              		.loc 1 358 0
 17207 000a 044B     		ldr	r3, .L20
 17208 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 17209 000e 1A60     		str	r2, [r3, #0]
 359:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17210              		.loc 1 359 0
 17211 0010 07F10C07 		add	r7, r7, #12
 17212 0014 BD46     		mov	sp, r7
 17213 0016 80BC     		pop	{r7}
 17214 0018 7047     		bx	lr
 17215              	.L21:
 17216 001a 00BF     		.align	2
 17217              	.L20:
 17218 001c 00004242 		.word	1111621632
 17219              		.cfi_endproc
 17220              	.LFE33:
 17222              		.section	.text.RCC_PLLConfig,"ax",%progbits
 17223              		.align	2
 17224              		.global	RCC_PLLConfig
 17225              		.thumb
 17226              		.thumb_func
 17228              	RCC_PLLConfig:
 17229              	.LFB34:
 360:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 361:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 362:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 363:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 364:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 365:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 366:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 367:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 368:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 369:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 370:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 371:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 372:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 373:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 374:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 375:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 376:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 377:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 378:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 379:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17230              		.loc 1 379 0
 17231              		.cfi_startproc
 17232              		@ args = 0, pretend = 0, frame = 16
 17233              		@ frame_needed = 1, uses_anonymous_args = 0
 17234              		@ link register save eliminated.
 17235 0000 80B4     		push	{r7}
 17236              	.LCFI14:
 17237              		.cfi_def_cfa_offset 4
 17238 0002 85B0     		sub	sp, sp, #20
 17239              	.LCFI15:
 17240              		.cfi_def_cfa_offset 24
 17241 0004 00AF     		add	r7, sp, #0
 17242              		.cfi_offset 7, -4
 17243              	.LCFI16:
 17244              		.cfi_def_cfa_register 7
 17245 0006 7860     		str	r0, [r7, #4]
 17246 0008 3960     		str	r1, [r7, #0]
 380:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 17247              		.loc 1 380 0
 17248 000a 4FF00003 		mov	r3, #0
 17249 000e FB60     		str	r3, [r7, #12]
 381:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 382:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 383:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 384:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 385:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 386:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 17250              		.loc 1 386 0
 17251 0010 0B4B     		ldr	r3, .L23
 17252 0012 5B68     		ldr	r3, [r3, #4]
 17253 0014 FB60     		str	r3, [r7, #12]
 387:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 388:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 17254              		.loc 1 388 0
 17255 0016 FB68     		ldr	r3, [r7, #12]
 17256 0018 23F47413 		bic	r3, r3, #3997696
 17257 001c FB60     		str	r3, [r7, #12]
 389:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 390:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 17258              		.loc 1 390 0
 17259 001e 7A68     		ldr	r2, [r7, #4]
 17260 0020 3B68     		ldr	r3, [r7, #0]
 17261 0022 42EA0303 		orr	r3, r2, r3
 17262 0026 FA68     		ldr	r2, [r7, #12]
 17263 0028 42EA0303 		orr	r3, r2, r3
 17264 002c FB60     		str	r3, [r7, #12]
 391:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 392:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 17265              		.loc 1 392 0
 17266 002e 044B     		ldr	r3, .L23
 17267 0030 FA68     		ldr	r2, [r7, #12]
 17268 0032 5A60     		str	r2, [r3, #4]
 393:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17269              		.loc 1 393 0
 17270 0034 07F11407 		add	r7, r7, #20
 17271 0038 BD46     		mov	sp, r7
 17272 003a 80BC     		pop	{r7}
 17273 003c 7047     		bx	lr
 17274              	.L24:
 17275 003e 00BF     		.align	2
 17276              	.L23:
 17277 0040 00100240 		.word	1073876992
 17278              		.cfi_endproc
 17279              	.LFE34:
 17281              		.section	.text.RCC_PLLCmd,"ax",%progbits
 17282              		.align	2
 17283              		.global	RCC_PLLCmd
 17284              		.thumb
 17285              		.thumb_func
 17287              	RCC_PLLCmd:
 17288              	.LFB35:
 394:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 395:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 396:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 397:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 398:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
 399:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 400:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 401:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 402:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17289              		.loc 1 402 0
 17290              		.cfi_startproc
 17291              		@ args = 0, pretend = 0, frame = 8
 17292              		@ frame_needed = 1, uses_anonymous_args = 0
 17293              		@ link register save eliminated.
 17294 0000 80B4     		push	{r7}
 17295              	.LCFI17:
 17296              		.cfi_def_cfa_offset 4
 17297 0002 83B0     		sub	sp, sp, #12
 17298              	.LCFI18:
 17299              		.cfi_def_cfa_offset 16
 17300 0004 00AF     		add	r7, sp, #0
 17301              		.cfi_offset 7, -4
 17302              	.LCFI19:
 17303              		.cfi_def_cfa_register 7
 17304 0006 0346     		mov	r3, r0
 17305 0008 FB71     		strb	r3, [r7, #7]
 403:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 404:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 405:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 406:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 17306              		.loc 1 406 0
 17307 000a 044B     		ldr	r3, .L26
 17308 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 17309 000e 1A60     		str	r2, [r3, #0]
 407:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17310              		.loc 1 407 0
 17311 0010 07F10C07 		add	r7, r7, #12
 17312 0014 BD46     		mov	sp, r7
 17313 0016 80BC     		pop	{r7}
 17314 0018 7047     		bx	lr
 17315              	.L27:
 17316 001a 00BF     		.align	2
 17317              	.L26:
 17318 001c 60004242 		.word	1111621728
 17319              		.cfi_endproc
 17320              	.LFE35:
 17322              		.section	.text.RCC_PREDIV1Config,"ax",%progbits
 17323              		.align	2
 17324              		.global	RCC_PREDIV1Config
 17325              		.thumb
 17326              		.thumb_func
 17328              	RCC_PREDIV1Config:
 17329              	.LFB36:
 408:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 409:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 410:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 411:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 412:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 413:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 414:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 415:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     devices.
 416:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 417:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 418:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 419:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 420:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 421:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 422:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 423:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 424:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 425:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 426:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 427:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17330              		.loc 1 427 0
 17331              		.cfi_startproc
 17332              		@ args = 0, pretend = 0, frame = 16
 17333              		@ frame_needed = 1, uses_anonymous_args = 0
 17334              		@ link register save eliminated.
 17335 0000 80B4     		push	{r7}
 17336              	.LCFI20:
 17337              		.cfi_def_cfa_offset 4
 17338 0002 85B0     		sub	sp, sp, #20
 17339              	.LCFI21:
 17340              		.cfi_def_cfa_offset 24
 17341 0004 00AF     		add	r7, sp, #0
 17342              		.cfi_offset 7, -4
 17343              	.LCFI22:
 17344              		.cfi_def_cfa_register 7
 17345 0006 7860     		str	r0, [r7, #4]
 17346 0008 3960     		str	r1, [r7, #0]
 428:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 17347              		.loc 1 428 0
 17348 000a 4FF00003 		mov	r3, #0
 17349 000e FB60     		str	r3, [r7, #12]
 429:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 430:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 431:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 432:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 433:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 434:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 17350              		.loc 1 434 0
 17351 0010 0C4B     		ldr	r3, .L29
 17352 0012 DB6A     		ldr	r3, [r3, #44]
 17353 0014 FB60     		str	r3, [r7, #12]
 435:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 436:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 17354              		.loc 1 436 0
 17355 0016 FB68     		ldr	r3, [r7, #12]
 17356 0018 23F48033 		bic	r3, r3, #65536
 17357 001c 23F00F03 		bic	r3, r3, #15
 17358 0020 FB60     		str	r3, [r7, #12]
 437:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 438:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 17359              		.loc 1 438 0
 17360 0022 7A68     		ldr	r2, [r7, #4]
 17361 0024 3B68     		ldr	r3, [r7, #0]
 17362 0026 42EA0303 		orr	r3, r2, r3
 17363 002a FA68     		ldr	r2, [r7, #12]
 17364 002c 42EA0303 		orr	r3, r2, r3
 17365 0030 FB60     		str	r3, [r7, #12]
 439:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 440:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 17366              		.loc 1 440 0
 17367 0032 044B     		ldr	r3, .L29
 17368 0034 FA68     		ldr	r2, [r7, #12]
 17369 0036 DA62     		str	r2, [r3, #44]
 441:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17370              		.loc 1 441 0
 17371 0038 07F11407 		add	r7, r7, #20
 17372 003c BD46     		mov	sp, r7
 17373 003e 80BC     		pop	{r7}
 17374 0040 7047     		bx	lr
 17375              	.L30:
 17376 0042 00BF     		.align	2
 17377              	.L29:
 17378 0044 00100240 		.word	1073876992
 17379              		.cfi_endproc
 17380              	.LFE36:
 17382              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 17383              		.align	2
 17384              		.global	RCC_SYSCLKConfig
 17385              		.thumb
 17386              		.thumb_func
 17388              	RCC_SYSCLKConfig:
 17389              	.LFB37:
 442:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 443:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 444:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 445:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 446:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 447:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 448:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 449:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 450:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 451:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 452:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 453:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 454:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 455:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 456:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 457:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 458:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 459:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 460:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 461:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 462:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 463:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 464:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 465:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 466:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 467:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 468:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 469:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 470:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 471:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 472:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 473:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 474:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 475:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 476:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 477:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 478:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 479:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 480:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 481:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 482:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 483:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 484:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 485:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 486:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 487:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 488:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 489:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 490:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 491:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 492:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 493:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 494:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 495:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 496:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 497:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 498:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 499:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 500:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 501:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 502:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 503:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 504:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 505:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 506:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 507:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 508:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 509:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 510:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 511:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 512:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 513:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 514:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 515:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 516:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 517:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 518:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 519:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 520:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 521:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 522:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 523:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 524:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 525:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 526:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 527:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 528:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 529:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 530:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 531:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 532:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 533:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 534:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 535:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 536:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 537:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 538:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 539:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 540:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 541:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 542:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 543:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 544:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 545:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 546:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 547:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 548:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 549:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 550:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 551:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 552:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 553:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 554:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 555:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 556:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 557:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 558:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 559:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 560:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 561:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 562:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 563:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 564:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 565:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17390              		.loc 1 565 0
 17391              		.cfi_startproc
 17392              		@ args = 0, pretend = 0, frame = 16
 17393              		@ frame_needed = 1, uses_anonymous_args = 0
 17394              		@ link register save eliminated.
 17395 0000 80B4     		push	{r7}
 17396              	.LCFI23:
 17397              		.cfi_def_cfa_offset 4
 17398 0002 85B0     		sub	sp, sp, #20
 17399              	.LCFI24:
 17400              		.cfi_def_cfa_offset 24
 17401 0004 00AF     		add	r7, sp, #0
 17402              		.cfi_offset 7, -4
 17403              	.LCFI25:
 17404              		.cfi_def_cfa_register 7
 17405 0006 7860     		str	r0, [r7, #4]
 566:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 17406              		.loc 1 566 0
 17407 0008 4FF00003 		mov	r3, #0
 17408 000c FB60     		str	r3, [r7, #12]
 567:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 568:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 569:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 17409              		.loc 1 569 0
 17410 000e 0A4B     		ldr	r3, .L32
 17411 0010 5B68     		ldr	r3, [r3, #4]
 17412 0012 FB60     		str	r3, [r7, #12]
 570:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 571:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 17413              		.loc 1 571 0
 17414 0014 FB68     		ldr	r3, [r7, #12]
 17415 0016 23F00303 		bic	r3, r3, #3
 17416 001a FB60     		str	r3, [r7, #12]
 572:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 573:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 17417              		.loc 1 573 0
 17418 001c FA68     		ldr	r2, [r7, #12]
 17419 001e 7B68     		ldr	r3, [r7, #4]
 17420 0020 42EA0303 		orr	r3, r2, r3
 17421 0024 FB60     		str	r3, [r7, #12]
 574:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 575:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 17422              		.loc 1 575 0
 17423 0026 044B     		ldr	r3, .L32
 17424 0028 FA68     		ldr	r2, [r7, #12]
 17425 002a 5A60     		str	r2, [r3, #4]
 576:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17426              		.loc 1 576 0
 17427 002c 07F11407 		add	r7, r7, #20
 17428 0030 BD46     		mov	sp, r7
 17429 0032 80BC     		pop	{r7}
 17430 0034 7047     		bx	lr
 17431              	.L33:
 17432 0036 00BF     		.align	2
 17433              	.L32:
 17434 0038 00100240 		.word	1073876992
 17435              		.cfi_endproc
 17436              	.LFE37:
 17438              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 17439              		.align	2
 17440              		.global	RCC_GetSYSCLKSource
 17441              		.thumb
 17442              		.thumb_func
 17444              	RCC_GetSYSCLKSource:
 17445              	.LFB38:
 577:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 578:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 579:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 580:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 581:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 582:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   be one of the following:
 583:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 584:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 585:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 586:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 587:../StdPeripheralDriver/src/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 588:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17446              		.loc 1 588 0
 17447              		.cfi_startproc
 17448              		@ args = 0, pretend = 0, frame = 0
 17449              		@ frame_needed = 1, uses_anonymous_args = 0
 17450              		@ link register save eliminated.
 17451 0000 80B4     		push	{r7}
 17452              	.LCFI26:
 17453              		.cfi_def_cfa_offset 4
 17454 0002 00AF     		add	r7, sp, #0
 17455              		.cfi_offset 7, -4
 17456              	.LCFI27:
 17457              		.cfi_def_cfa_register 7
 589:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 17458              		.loc 1 589 0
 17459 0004 044B     		ldr	r3, .L35
 17460 0006 5B68     		ldr	r3, [r3, #4]
 17461 0008 DBB2     		uxtb	r3, r3
 17462 000a 03F00C03 		and	r3, r3, #12
 17463 000e DBB2     		uxtb	r3, r3
 590:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17464              		.loc 1 590 0
 17465 0010 1846     		mov	r0, r3
 17466 0012 BD46     		mov	sp, r7
 17467 0014 80BC     		pop	{r7}
 17468 0016 7047     		bx	lr
 17469              	.L36:
 17470              		.align	2
 17471              	.L35:
 17472 0018 00100240 		.word	1073876992
 17473              		.cfi_endproc
 17474              	.LFE38:
 17476              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 17477              		.align	2
 17478              		.global	RCC_HCLKConfig
 17479              		.thumb
 17480              		.thumb_func
 17482              	RCC_HCLKConfig:
 17483              	.LFB39:
 591:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 592:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 593:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 594:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 595:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 596:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 597:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 598:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 599:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 600:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 601:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 602:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 603:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 604:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 605:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 606:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 607:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 608:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 609:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17484              		.loc 1 609 0
 17485              		.cfi_startproc
 17486              		@ args = 0, pretend = 0, frame = 16
 17487              		@ frame_needed = 1, uses_anonymous_args = 0
 17488              		@ link register save eliminated.
 17489 0000 80B4     		push	{r7}
 17490              	.LCFI28:
 17491              		.cfi_def_cfa_offset 4
 17492 0002 85B0     		sub	sp, sp, #20
 17493              	.LCFI29:
 17494              		.cfi_def_cfa_offset 24
 17495 0004 00AF     		add	r7, sp, #0
 17496              		.cfi_offset 7, -4
 17497              	.LCFI30:
 17498              		.cfi_def_cfa_register 7
 17499 0006 7860     		str	r0, [r7, #4]
 610:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 17500              		.loc 1 610 0
 17501 0008 4FF00003 		mov	r3, #0
 17502 000c FB60     		str	r3, [r7, #12]
 611:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 612:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 613:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 17503              		.loc 1 613 0
 17504 000e 0A4B     		ldr	r3, .L38
 17505 0010 5B68     		ldr	r3, [r3, #4]
 17506 0012 FB60     		str	r3, [r7, #12]
 614:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 615:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 17507              		.loc 1 615 0
 17508 0014 FB68     		ldr	r3, [r7, #12]
 17509 0016 23F0F003 		bic	r3, r3, #240
 17510 001a FB60     		str	r3, [r7, #12]
 616:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 617:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 17511              		.loc 1 617 0
 17512 001c FA68     		ldr	r2, [r7, #12]
 17513 001e 7B68     		ldr	r3, [r7, #4]
 17514 0020 42EA0303 		orr	r3, r2, r3
 17515 0024 FB60     		str	r3, [r7, #12]
 618:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 619:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 17516              		.loc 1 619 0
 17517 0026 044B     		ldr	r3, .L38
 17518 0028 FA68     		ldr	r2, [r7, #12]
 17519 002a 5A60     		str	r2, [r3, #4]
 620:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17520              		.loc 1 620 0
 17521 002c 07F11407 		add	r7, r7, #20
 17522 0030 BD46     		mov	sp, r7
 17523 0032 80BC     		pop	{r7}
 17524 0034 7047     		bx	lr
 17525              	.L39:
 17526 0036 00BF     		.align	2
 17527              	.L38:
 17528 0038 00100240 		.word	1073876992
 17529              		.cfi_endproc
 17530              	.LFE39:
 17532              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 17533              		.align	2
 17534              		.global	RCC_PCLK1Config
 17535              		.thumb
 17536              		.thumb_func
 17538              	RCC_PCLK1Config:
 17539              	.LFB40:
 621:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 622:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 623:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 624:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 625:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 626:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 627:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 628:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 629:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 630:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 631:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 632:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 633:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 634:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 635:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17540              		.loc 1 635 0
 17541              		.cfi_startproc
 17542              		@ args = 0, pretend = 0, frame = 16
 17543              		@ frame_needed = 1, uses_anonymous_args = 0
 17544              		@ link register save eliminated.
 17545 0000 80B4     		push	{r7}
 17546              	.LCFI31:
 17547              		.cfi_def_cfa_offset 4
 17548 0002 85B0     		sub	sp, sp, #20
 17549              	.LCFI32:
 17550              		.cfi_def_cfa_offset 24
 17551 0004 00AF     		add	r7, sp, #0
 17552              		.cfi_offset 7, -4
 17553              	.LCFI33:
 17554              		.cfi_def_cfa_register 7
 17555 0006 7860     		str	r0, [r7, #4]
 636:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 17556              		.loc 1 636 0
 17557 0008 4FF00003 		mov	r3, #0
 17558 000c FB60     		str	r3, [r7, #12]
 637:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 638:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 639:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 17559              		.loc 1 639 0
 17560 000e 0A4B     		ldr	r3, .L41
 17561 0010 5B68     		ldr	r3, [r3, #4]
 17562 0012 FB60     		str	r3, [r7, #12]
 640:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 641:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 17563              		.loc 1 641 0
 17564 0014 FB68     		ldr	r3, [r7, #12]
 17565 0016 23F4E063 		bic	r3, r3, #1792
 17566 001a FB60     		str	r3, [r7, #12]
 642:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 643:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 17567              		.loc 1 643 0
 17568 001c FA68     		ldr	r2, [r7, #12]
 17569 001e 7B68     		ldr	r3, [r7, #4]
 17570 0020 42EA0303 		orr	r3, r2, r3
 17571 0024 FB60     		str	r3, [r7, #12]
 644:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 645:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 17572              		.loc 1 645 0
 17573 0026 044B     		ldr	r3, .L41
 17574 0028 FA68     		ldr	r2, [r7, #12]
 17575 002a 5A60     		str	r2, [r3, #4]
 646:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17576              		.loc 1 646 0
 17577 002c 07F11407 		add	r7, r7, #20
 17578 0030 BD46     		mov	sp, r7
 17579 0032 80BC     		pop	{r7}
 17580 0034 7047     		bx	lr
 17581              	.L42:
 17582 0036 00BF     		.align	2
 17583              	.L41:
 17584 0038 00100240 		.word	1073876992
 17585              		.cfi_endproc
 17586              	.LFE40:
 17588              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 17589              		.align	2
 17590              		.global	RCC_PCLK2Config
 17591              		.thumb
 17592              		.thumb_func
 17594              	RCC_PCLK2Config:
 17595              	.LFB41:
 647:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 648:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 649:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 650:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 651:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 652:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 653:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 654:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 655:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 656:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 657:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 658:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 659:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 660:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 661:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17596              		.loc 1 661 0
 17597              		.cfi_startproc
 17598              		@ args = 0, pretend = 0, frame = 16
 17599              		@ frame_needed = 1, uses_anonymous_args = 0
 17600              		@ link register save eliminated.
 17601 0000 80B4     		push	{r7}
 17602              	.LCFI34:
 17603              		.cfi_def_cfa_offset 4
 17604 0002 85B0     		sub	sp, sp, #20
 17605              	.LCFI35:
 17606              		.cfi_def_cfa_offset 24
 17607 0004 00AF     		add	r7, sp, #0
 17608              		.cfi_offset 7, -4
 17609              	.LCFI36:
 17610              		.cfi_def_cfa_register 7
 17611 0006 7860     		str	r0, [r7, #4]
 662:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 17612              		.loc 1 662 0
 17613 0008 4FF00003 		mov	r3, #0
 17614 000c FB60     		str	r3, [r7, #12]
 663:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 664:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 665:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 17615              		.loc 1 665 0
 17616 000e 0B4B     		ldr	r3, .L44
 17617 0010 5B68     		ldr	r3, [r3, #4]
 17618 0012 FB60     		str	r3, [r7, #12]
 666:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 667:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 17619              		.loc 1 667 0
 17620 0014 FB68     		ldr	r3, [r7, #12]
 17621 0016 23F46053 		bic	r3, r3, #14336
 17622 001a FB60     		str	r3, [r7, #12]
 668:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 669:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 17623              		.loc 1 669 0
 17624 001c 7B68     		ldr	r3, [r7, #4]
 17625 001e 4FEAC303 		lsl	r3, r3, #3
 17626 0022 FA68     		ldr	r2, [r7, #12]
 17627 0024 42EA0303 		orr	r3, r2, r3
 17628 0028 FB60     		str	r3, [r7, #12]
 670:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 671:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 17629              		.loc 1 671 0
 17630 002a 044B     		ldr	r3, .L44
 17631 002c FA68     		ldr	r2, [r7, #12]
 17632 002e 5A60     		str	r2, [r3, #4]
 672:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17633              		.loc 1 672 0
 17634 0030 07F11407 		add	r7, r7, #20
 17635 0034 BD46     		mov	sp, r7
 17636 0036 80BC     		pop	{r7}
 17637 0038 7047     		bx	lr
 17638              	.L45:
 17639 003a 00BF     		.align	2
 17640              	.L44:
 17641 003c 00100240 		.word	1073876992
 17642              		.cfi_endproc
 17643              	.LFE41:
 17645              		.section	.text.RCC_ITConfig,"ax",%progbits
 17646              		.align	2
 17647              		.global	RCC_ITConfig
 17648              		.thumb
 17649              		.thumb_func
 17651              	RCC_ITConfig:
 17652              	.LFB42:
 673:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 674:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 675:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 676:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 677:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
 678:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 679:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values        
 680:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 681:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 682:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 683:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 684:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 685:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 686:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 687:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
 688:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 689:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values        
 690:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 691:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 692:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 693:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 694:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 695:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *       
 696:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 697:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 698:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 699:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 700:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 701:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17653              		.loc 1 701 0
 17654              		.cfi_startproc
 17655              		@ args = 0, pretend = 0, frame = 8
 17656              		@ frame_needed = 1, uses_anonymous_args = 0
 17657              		@ link register save eliminated.
 17658 0000 80B4     		push	{r7}
 17659              	.LCFI37:
 17660              		.cfi_def_cfa_offset 4
 17661 0002 83B0     		sub	sp, sp, #12
 17662              	.LCFI38:
 17663              		.cfi_def_cfa_offset 16
 17664 0004 00AF     		add	r7, sp, #0
 17665              		.cfi_offset 7, -4
 17666              	.LCFI39:
 17667              		.cfi_def_cfa_register 7
 17668 0006 0246     		mov	r2, r0
 17669 0008 0B46     		mov	r3, r1
 17670 000a FA71     		strb	r2, [r7, #7]
 17671 000c BB71     		strb	r3, [r7, #6]
 702:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 703:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 704:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 705:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 17672              		.loc 1 705 0
 17673 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 17674 0010 002B     		cmp	r3, #0
 17675 0012 09D0     		beq	.L47
 706:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 707:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 708:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 17676              		.loc 1 708 0
 17677 0014 0D4B     		ldr	r3, .L49
 17678 0016 0D4A     		ldr	r2, .L49
 17679 0018 1278     		ldrb	r2, [r2, #0]
 17680 001a D1B2     		uxtb	r1, r2
 17681 001c FA79     		ldrb	r2, [r7, #7]
 17682 001e 41EA0202 		orr	r2, r1, r2
 17683 0022 D2B2     		uxtb	r2, r2
 17684 0024 1A70     		strb	r2, [r3, #0]
 17685 0026 0BE0     		b	.L46
 17686              	.L47:
 709:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 710:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
 711:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 712:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 713:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 17687              		.loc 1 713 0
 17688 0028 084B     		ldr	r3, .L49
 17689 002a 084A     		ldr	r2, .L49
 17690 002c 1278     		ldrb	r2, [r2, #0]
 17691 002e D1B2     		uxtb	r1, r2
 17692 0030 FA79     		ldrb	r2, [r7, #7]
 17693 0032 6FEA0202 		mvn	r2, r2
 17694 0036 D2B2     		uxtb	r2, r2
 17695 0038 01EA0202 		and	r2, r1, r2
 17696 003c D2B2     		uxtb	r2, r2
 17697 003e 1A70     		strb	r2, [r3, #0]
 17698              	.L46:
 714:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 715:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17699              		.loc 1 715 0
 17700 0040 07F10C07 		add	r7, r7, #12
 17701 0044 BD46     		mov	sp, r7
 17702 0046 80BC     		pop	{r7}
 17703 0048 7047     		bx	lr
 17704              	.L50:
 17705 004a 00BF     		.align	2
 17706              	.L49:
 17707 004c 09100240 		.word	1073877001
 17708              		.cfi_endproc
 17709              	.LFE42:
 17711              		.section	.text.RCC_USBCLKConfig,"ax",%progbits
 17712              		.align	2
 17713              		.global	RCC_USBCLKConfig
 17714              		.thumb
 17715              		.thumb_func
 17717              	RCC_USBCLKConfig:
 17718              	.LFB43:
 716:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 717:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 718:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 719:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 720:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 721:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   derived from the PLL output.
 722:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 723:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 724:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *                                     clock source
 725:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 726:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 727:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 728:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 729:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17719              		.loc 1 729 0
 17720              		.cfi_startproc
 17721              		@ args = 0, pretend = 0, frame = 8
 17722              		@ frame_needed = 1, uses_anonymous_args = 0
 17723              		@ link register save eliminated.
 17724 0000 80B4     		push	{r7}
 17725              	.LCFI40:
 17726              		.cfi_def_cfa_offset 4
 17727 0002 83B0     		sub	sp, sp, #12
 17728              	.LCFI41:
 17729              		.cfi_def_cfa_offset 16
 17730 0004 00AF     		add	r7, sp, #0
 17731              		.cfi_offset 7, -4
 17732              	.LCFI42:
 17733              		.cfi_def_cfa_register 7
 17734 0006 7860     		str	r0, [r7, #4]
 730:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 731:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 732:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 733:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 17735              		.loc 1 733 0
 17736 0008 034B     		ldr	r3, .L52
 17737 000a 7A68     		ldr	r2, [r7, #4]
 17738 000c 1A60     		str	r2, [r3, #0]
 734:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17739              		.loc 1 734 0
 17740 000e 07F10C07 		add	r7, r7, #12
 17741 0012 BD46     		mov	sp, r7
 17742 0014 80BC     		pop	{r7}
 17743 0016 7047     		bx	lr
 17744              	.L53:
 17745              		.align	2
 17746              	.L52:
 17747 0018 D8004242 		.word	1111621848
 17748              		.cfi_endproc
 17749              	.LFE43:
 17751              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 17752              		.align	2
 17753              		.global	RCC_ADCCLKConfig
 17754              		.thumb
 17755              		.thumb_func
 17757              	RCC_ADCCLKConfig:
 17758              	.LFB44:
 735:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 736:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 737:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 738:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 739:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 740:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 741:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 742:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 743:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 745:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 746:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 747:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 748:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 749:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 750:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 751:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 752:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 753:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 754:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 755:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 756:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 757:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 758:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 759:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 760:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 761:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 762:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 763:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 764:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 765:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 766:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 767:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17759              		.loc 1 767 0
 17760              		.cfi_startproc
 17761              		@ args = 0, pretend = 0, frame = 16
 17762              		@ frame_needed = 1, uses_anonymous_args = 0
 17763              		@ link register save eliminated.
 17764 0000 80B4     		push	{r7}
 17765              	.LCFI43:
 17766              		.cfi_def_cfa_offset 4
 17767 0002 85B0     		sub	sp, sp, #20
 17768              	.LCFI44:
 17769              		.cfi_def_cfa_offset 24
 17770 0004 00AF     		add	r7, sp, #0
 17771              		.cfi_offset 7, -4
 17772              	.LCFI45:
 17773              		.cfi_def_cfa_register 7
 17774 0006 7860     		str	r0, [r7, #4]
 768:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 17775              		.loc 1 768 0
 17776 0008 4FF00003 		mov	r3, #0
 17777 000c FB60     		str	r3, [r7, #12]
 769:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 770:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 771:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 17778              		.loc 1 771 0
 17779 000e 0A4B     		ldr	r3, .L55
 17780 0010 5B68     		ldr	r3, [r3, #4]
 17781 0012 FB60     		str	r3, [r7, #12]
 772:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 773:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 17782              		.loc 1 773 0
 17783 0014 FB68     		ldr	r3, [r7, #12]
 17784 0016 23F44043 		bic	r3, r3, #49152
 17785 001a FB60     		str	r3, [r7, #12]
 774:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 775:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 17786              		.loc 1 775 0
 17787 001c FA68     		ldr	r2, [r7, #12]
 17788 001e 7B68     		ldr	r3, [r7, #4]
 17789 0020 42EA0303 		orr	r3, r2, r3
 17790 0024 FB60     		str	r3, [r7, #12]
 776:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 777:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 17791              		.loc 1 777 0
 17792 0026 044B     		ldr	r3, .L55
 17793 0028 FA68     		ldr	r2, [r7, #12]
 17794 002a 5A60     		str	r2, [r3, #4]
 778:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17795              		.loc 1 778 0
 17796 002c 07F11407 		add	r7, r7, #20
 17797 0030 BD46     		mov	sp, r7
 17798 0032 80BC     		pop	{r7}
 17799 0034 7047     		bx	lr
 17800              	.L56:
 17801 0036 00BF     		.align	2
 17802              	.L55:
 17803 0038 00100240 		.word	1073876992
 17804              		.cfi_endproc
 17805              	.LFE44:
 17807              		.section	.text.RCC_LSEConfig,"ax",%progbits
 17808              		.align	2
 17809              		.global	RCC_LSEConfig
 17810              		.thumb
 17811              		.thumb_func
 17813              	RCC_LSEConfig:
 17814              	.LFB45:
 779:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 780:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 781:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 782:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 783:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 784:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 785:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 786:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 787:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 788:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 789:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 790:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 791:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 792:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 793:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 794:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 795:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 796:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 797:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 798:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 799:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 800:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 801:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 802:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 803:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 804:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 805:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 806:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 807:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 808:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 809:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 810:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 811:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 812:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 813:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 814:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 815:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 816:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 817:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 818:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 819:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 820:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 821:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 822:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 823:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 824:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 825:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 826:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 827:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 828:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 829:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 830:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17815              		.loc 1 830 0
 17816              		.cfi_startproc
 17817              		@ args = 0, pretend = 0, frame = 8
 17818              		@ frame_needed = 1, uses_anonymous_args = 0
 17819              		@ link register save eliminated.
 17820 0000 80B4     		push	{r7}
 17821              	.LCFI46:
 17822              		.cfi_def_cfa_offset 4
 17823 0002 83B0     		sub	sp, sp, #12
 17824              	.LCFI47:
 17825              		.cfi_def_cfa_offset 16
 17826 0004 00AF     		add	r7, sp, #0
 17827              		.cfi_offset 7, -4
 17828              	.LCFI48:
 17829              		.cfi_def_cfa_register 7
 17830 0006 0346     		mov	r3, r0
 17831 0008 FB71     		strb	r3, [r7, #7]
 831:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 832:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 833:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 834:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 835:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 17832              		.loc 1 835 0
 17833 000a 0E4B     		ldr	r3, .L62
 17834 000c 4FF00002 		mov	r2, #0
 17835 0010 1A70     		strb	r2, [r3, #0]
 836:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 837:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 17836              		.loc 1 837 0
 17837 0012 0C4B     		ldr	r3, .L62
 17838 0014 4FF00002 		mov	r2, #0
 17839 0018 1A70     		strb	r2, [r3, #0]
 838:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 839:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch(RCC_LSE)
 17840              		.loc 1 839 0
 17841 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 17842 001c 012B     		cmp	r3, #1
 17843 001e 02D0     		beq	.L59
 17844 0020 042B     		cmp	r3, #4
 17845 0022 05D0     		beq	.L60
 840:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 841:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 842:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set LSEON bit */
 843:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 844:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 845:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 846:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 847:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 848:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 849:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;            
 850:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 851:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
 852:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;      
 17846              		.loc 1 852 0
 17847 0024 09E0     		b	.L57
 17848              	.L59:
 843:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 17849              		.loc 1 843 0
 17850 0026 074B     		ldr	r3, .L62
 17851 0028 4FF00102 		mov	r2, #1
 17852 002c 1A70     		strb	r2, [r3, #0]
 844:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 17853              		.loc 1 844 0
 17854 002e 04E0     		b	.L57
 17855              	.L60:
 848:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 17856              		.loc 1 848 0
 17857 0030 044B     		ldr	r3, .L62
 17858 0032 4FF00502 		mov	r2, #5
 17859 0036 1A70     		strb	r2, [r3, #0]
 849:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;            
 17860              		.loc 1 849 0
 17861 0038 00BF     		nop
 17862              	.L57:
 853:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 854:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17863              		.loc 1 854 0
 17864 003a 07F10C07 		add	r7, r7, #12
 17865 003e BD46     		mov	sp, r7
 17866 0040 80BC     		pop	{r7}
 17867 0042 7047     		bx	lr
 17868              	.L63:
 17869              		.align	2
 17870              	.L62:
 17871 0044 20100240 		.word	1073877024
 17872              		.cfi_endproc
 17873              	.LFE45:
 17875              		.section	.text.RCC_LSICmd,"ax",%progbits
 17876              		.align	2
 17877              		.global	RCC_LSICmd
 17878              		.thumb
 17879              		.thumb_func
 17881              	RCC_LSICmd:
 17882              	.LFB46:
 855:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 856:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 857:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 858:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 859:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 860:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 861:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 862:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 863:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17883              		.loc 1 863 0
 17884              		.cfi_startproc
 17885              		@ args = 0, pretend = 0, frame = 8
 17886              		@ frame_needed = 1, uses_anonymous_args = 0
 17887              		@ link register save eliminated.
 17888 0000 80B4     		push	{r7}
 17889              	.LCFI49:
 17890              		.cfi_def_cfa_offset 4
 17891 0002 83B0     		sub	sp, sp, #12
 17892              	.LCFI50:
 17893              		.cfi_def_cfa_offset 16
 17894 0004 00AF     		add	r7, sp, #0
 17895              		.cfi_offset 7, -4
 17896              	.LCFI51:
 17897              		.cfi_def_cfa_register 7
 17898 0006 0346     		mov	r3, r0
 17899 0008 FB71     		strb	r3, [r7, #7]
 864:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 865:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 866:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 17900              		.loc 1 866 0
 17901 000a 044B     		ldr	r3, .L65
 17902 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 17903 000e 1A60     		str	r2, [r3, #0]
 867:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17904              		.loc 1 867 0
 17905 0010 07F10C07 		add	r7, r7, #12
 17906 0014 BD46     		mov	sp, r7
 17907 0016 80BC     		pop	{r7}
 17908 0018 7047     		bx	lr
 17909              	.L66:
 17910 001a 00BF     		.align	2
 17911              	.L65:
 17912 001c 80044242 		.word	1111622784
 17913              		.cfi_endproc
 17914              	.LFE46:
 17916              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 17917              		.align	2
 17918              		.global	RCC_RTCCLKConfig
 17919              		.thumb
 17920              		.thumb_func
 17922              	RCC_RTCCLKConfig:
 17923              	.LFB47:
 868:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 869:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 870:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 871:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 872:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 873:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 874:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 875:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 876:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 877:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 878:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 879:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 880:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17924              		.loc 1 880 0
 17925              		.cfi_startproc
 17926              		@ args = 0, pretend = 0, frame = 8
 17927              		@ frame_needed = 1, uses_anonymous_args = 0
 17928              		@ link register save eliminated.
 17929 0000 80B4     		push	{r7}
 17930              	.LCFI52:
 17931              		.cfi_def_cfa_offset 4
 17932 0002 83B0     		sub	sp, sp, #12
 17933              	.LCFI53:
 17934              		.cfi_def_cfa_offset 16
 17935 0004 00AF     		add	r7, sp, #0
 17936              		.cfi_offset 7, -4
 17937              	.LCFI54:
 17938              		.cfi_def_cfa_register 7
 17939 0006 7860     		str	r0, [r7, #4]
 881:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 882:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 883:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 884:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 17940              		.loc 1 884 0
 17941 0008 054B     		ldr	r3, .L68
 17942 000a 054A     		ldr	r2, .L68
 17943 000c 116A     		ldr	r1, [r2, #32]
 17944 000e 7A68     		ldr	r2, [r7, #4]
 17945 0010 41EA0202 		orr	r2, r1, r2
 17946 0014 1A62     		str	r2, [r3, #32]
 885:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17947              		.loc 1 885 0
 17948 0016 07F10C07 		add	r7, r7, #12
 17949 001a BD46     		mov	sp, r7
 17950 001c 80BC     		pop	{r7}
 17951 001e 7047     		bx	lr
 17952              	.L69:
 17953              		.align	2
 17954              	.L68:
 17955 0020 00100240 		.word	1073876992
 17956              		.cfi_endproc
 17957              	.LFE47:
 17959              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 17960              		.align	2
 17961              		.global	RCC_RTCCLKCmd
 17962              		.thumb
 17963              		.thumb_func
 17965              	RCC_RTCCLKCmd:
 17966              	.LFB48:
 886:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 887:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 888:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 889:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 890:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 891:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 892:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 893:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 894:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17967              		.loc 1 894 0
 17968              		.cfi_startproc
 17969              		@ args = 0, pretend = 0, frame = 8
 17970              		@ frame_needed = 1, uses_anonymous_args = 0
 17971              		@ link register save eliminated.
 17972 0000 80B4     		push	{r7}
 17973              	.LCFI55:
 17974              		.cfi_def_cfa_offset 4
 17975 0002 83B0     		sub	sp, sp, #12
 17976              	.LCFI56:
 17977              		.cfi_def_cfa_offset 16
 17978 0004 00AF     		add	r7, sp, #0
 17979              		.cfi_offset 7, -4
 17980              	.LCFI57:
 17981              		.cfi_def_cfa_register 7
 17982 0006 0346     		mov	r3, r0
 17983 0008 FB71     		strb	r3, [r7, #7]
 895:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 896:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 897:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 17984              		.loc 1 897 0
 17985 000a 044B     		ldr	r3, .L71
 17986 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 17987 000e 1A60     		str	r2, [r3, #0]
 898:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17988              		.loc 1 898 0
 17989 0010 07F10C07 		add	r7, r7, #12
 17990 0014 BD46     		mov	sp, r7
 17991 0016 80BC     		pop	{r7}
 17992 0018 7047     		bx	lr
 17993              	.L72:
 17994 001a 00BF     		.align	2
 17995              	.L71:
 17996 001c 3C044242 		.word	1111622716
 17997              		.cfi_endproc
 17998              	.LFE48:
 18000              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 18001              		.align	2
 18002              		.global	RCC_GetClocksFreq
 18003              		.thumb
 18004              		.thumb_func
 18006              	RCC_GetClocksFreq:
 18007              	.LFB49:
 899:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 900:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 901:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 902:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 903:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *         the clocks frequencies.
 904:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 905:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 906:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 907:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 908:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 909:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18008              		.loc 1 909 0
 18009              		.cfi_startproc
 18010              		@ args = 0, pretend = 0, frame = 32
 18011              		@ frame_needed = 1, uses_anonymous_args = 0
 18012              		@ link register save eliminated.
 18013 0000 80B4     		push	{r7}
 18014              	.LCFI58:
 18015              		.cfi_def_cfa_offset 4
 18016 0002 89B0     		sub	sp, sp, #36
 18017              	.LCFI59:
 18018              		.cfi_def_cfa_offset 40
 18019 0004 00AF     		add	r7, sp, #0
 18020              		.cfi_offset 7, -4
 18021              	.LCFI60:
 18022              		.cfi_def_cfa_register 7
 18023 0006 7860     		str	r0, [r7, #4]
 910:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 18024              		.loc 1 910 0
 18025 0008 4FF00003 		mov	r3, #0
 18026 000c FB61     		str	r3, [r7, #28]
 18027 000e 4FF00003 		mov	r3, #0
 18028 0012 BB61     		str	r3, [r7, #24]
 18029 0014 4FF00003 		mov	r3, #0
 18030 0018 7B61     		str	r3, [r7, #20]
 18031 001a 4FF00003 		mov	r3, #0
 18032 001e 3B61     		str	r3, [r7, #16]
 911:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 912:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 913:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 914:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 915:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 916:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 917:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 18033              		.loc 1 917 0
 18034 0020 4FF00003 		mov	r3, #0
 18035 0024 FB60     		str	r3, [r7, #12]
 918:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 919:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     
 920:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 921:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 18036              		.loc 1 921 0
 18037 0026 504B     		ldr	r3, .L82
 18038 0028 5B68     		ldr	r3, [r3, #4]
 18039 002a 03F00C03 		and	r3, r3, #12
 18040 002e FB61     		str	r3, [r7, #28]
 922:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 923:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch (tmp)
 18041              		.loc 1 923 0
 18042 0030 FB69     		ldr	r3, [r7, #28]
 18043 0032 042B     		cmp	r3, #4
 18044 0034 07D0     		beq	.L76
 18045 0036 082B     		cmp	r3, #8
 18046 0038 09D0     		beq	.L77
 18047 003a 002B     		cmp	r3, #0
 18048 003c 32D1     		bne	.L81
 18049              	.L75:
 924:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 925:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 926:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 18050              		.loc 1 926 0
 18051 003e 7B68     		ldr	r3, [r7, #4]
 18052 0040 4A4A     		ldr	r2, .L82+4
 18053 0042 1A60     		str	r2, [r3, #0]
 927:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18054              		.loc 1 927 0
 18055 0044 32E0     		b	.L78
 18056              	.L76:
 928:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 929:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 18057              		.loc 1 929 0
 18058 0046 7B68     		ldr	r3, [r7, #4]
 18059 0048 484A     		ldr	r2, .L82+4
 18060 004a 1A60     		str	r2, [r3, #0]
 930:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18061              		.loc 1 930 0
 18062 004c 2EE0     		b	.L78
 18063              	.L77:
 931:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 932:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 933:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 934:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 18064              		.loc 1 934 0
 18065 004e 464B     		ldr	r3, .L82
 18066 0050 5B68     		ldr	r3, [r3, #4]
 18067 0052 03F47013 		and	r3, r3, #3932160
 18068 0056 BB61     		str	r3, [r7, #24]
 935:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 18069              		.loc 1 935 0
 18070 0058 434B     		ldr	r3, .L82
 18071 005a 5B68     		ldr	r3, [r3, #4]
 18072 005c 03F48033 		and	r3, r3, #65536
 18073 0060 7B61     		str	r3, [r7, #20]
 936:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 937:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 938:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 18074              		.loc 1 938 0
 18075 0062 BB69     		ldr	r3, [r7, #24]
 18076 0064 4FEA9343 		lsr	r3, r3, #18
 18077 0068 03F10203 		add	r3, r3, #2
 18078 006c BB61     		str	r3, [r7, #24]
 939:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 940:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 18079              		.loc 1 940 0
 18080 006e 7B69     		ldr	r3, [r7, #20]
 18081 0070 002B     		cmp	r3, #0
 18082 0072 06D1     		bne	.L79
 941:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 942:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 18083              		.loc 1 942 0
 18084 0074 BB69     		ldr	r3, [r7, #24]
 18085 0076 3E4A     		ldr	r2, .L82+8
 18086 0078 02FB03F2 		mul	r2, r2, r3
 18087 007c 7B68     		ldr	r3, [r7, #4]
 18088 007e 1A60     		str	r2, [r3, #0]
 943:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 944:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 945:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {
 946:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 947:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 948:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 949:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 950:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #else
 951:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 952:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 953:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 954:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 955:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 956:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         else
 957:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {
 958:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 959:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 960:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #endif
 961:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 962:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 963:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 964:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 965:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 966:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {
 967:../StdPeripheralDriver/src/stm32f10x_rcc.c ****          pllmull += 2;
 968:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 969:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 970:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 971:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 972:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 973:../StdPeripheralDriver/src/stm32f10x_rcc.c ****             
 974:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 975:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 976:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 977:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 978:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 979:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 980:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         
 981:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 982:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 983:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 984:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         
 985:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         if (prediv1source == 0)
 986:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 987:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 988:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 989:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         else
 990:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 991:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           
 992:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 993:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 994:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 995:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 996:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 997:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 998:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 999:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18089              		.loc 1 999 0
 18090 0080 14E0     		b	.L78
 18091              	.L79:
 947:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 18092              		.loc 1 947 0
 18093 0082 394B     		ldr	r3, .L82
 18094 0084 DB6A     		ldr	r3, [r3, #44]
 18095 0086 03F00F03 		and	r3, r3, #15
 18096 008a 03F10103 		add	r3, r3, #1
 18097 008e FB60     		str	r3, [r7, #12]
 949:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 18098              		.loc 1 949 0
 18099 0090 364A     		ldr	r2, .L82+4
 18100 0092 FB68     		ldr	r3, [r7, #12]
 18101 0094 B2FBF3F3 		udiv	r3, r2, r3
 18102 0098 BA69     		ldr	r2, [r7, #24]
 18103 009a 02FB03F2 		mul	r2, r2, r3
 18104 009e 7B68     		ldr	r3, [r7, #4]
 18105 00a0 1A60     		str	r2, [r3, #0]
 18106              		.loc 1 999 0
 18107 00a2 03E0     		b	.L78
 18108              	.L81:
1000:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1001:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
1002:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 18109              		.loc 1 1002 0
 18110 00a4 7B68     		ldr	r3, [r7, #4]
 18111 00a6 314A     		ldr	r2, .L82+4
 18112 00a8 1A60     		str	r2, [r3, #0]
1003:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18113              		.loc 1 1003 0
 18114 00aa 00BF     		nop
 18115              	.L78:
1004:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1005:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1006:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1007:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1008:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 18116              		.loc 1 1008 0
 18117 00ac 2E4B     		ldr	r3, .L82
 18118 00ae 5B68     		ldr	r3, [r3, #4]
 18119 00b0 03F0F003 		and	r3, r3, #240
 18120 00b4 FB61     		str	r3, [r7, #28]
1009:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 18121              		.loc 1 1009 0
 18122 00b6 FB69     		ldr	r3, [r7, #28]
 18123 00b8 4FEA1313 		lsr	r3, r3, #4
 18124 00bc FB61     		str	r3, [r7, #28]
1010:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 18125              		.loc 1 1010 0
 18126 00be 2D4A     		ldr	r2, .L82+12
 18127 00c0 FB69     		ldr	r3, [r7, #28]
 18128 00c2 D318     		adds	r3, r2, r3
 18129 00c4 1B78     		ldrb	r3, [r3, #0]
 18130 00c6 DBB2     		uxtb	r3, r3
 18131 00c8 3B61     		str	r3, [r7, #16]
1011:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1012:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 18132              		.loc 1 1012 0
 18133 00ca 7B68     		ldr	r3, [r7, #4]
 18134 00cc 1A68     		ldr	r2, [r3, #0]
 18135 00ce 3B69     		ldr	r3, [r7, #16]
 18136 00d0 22FA03F2 		lsr	r2, r2, r3
 18137 00d4 7B68     		ldr	r3, [r7, #4]
 18138 00d6 5A60     		str	r2, [r3, #4]
1013:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1014:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 18139              		.loc 1 1014 0
 18140 00d8 234B     		ldr	r3, .L82
 18141 00da 5B68     		ldr	r3, [r3, #4]
 18142 00dc 03F4E063 		and	r3, r3, #1792
 18143 00e0 FB61     		str	r3, [r7, #28]
1015:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 18144              		.loc 1 1015 0
 18145 00e2 FB69     		ldr	r3, [r7, #28]
 18146 00e4 4FEA1323 		lsr	r3, r3, #8
 18147 00e8 FB61     		str	r3, [r7, #28]
1016:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 18148              		.loc 1 1016 0
 18149 00ea 224A     		ldr	r2, .L82+12
 18150 00ec FB69     		ldr	r3, [r7, #28]
 18151 00ee D318     		adds	r3, r2, r3
 18152 00f0 1B78     		ldrb	r3, [r3, #0]
 18153 00f2 DBB2     		uxtb	r3, r3
 18154 00f4 3B61     		str	r3, [r7, #16]
1017:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1018:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 18155              		.loc 1 1018 0
 18156 00f6 7B68     		ldr	r3, [r7, #4]
 18157 00f8 5A68     		ldr	r2, [r3, #4]
 18158 00fa 3B69     		ldr	r3, [r7, #16]
 18159 00fc 22FA03F2 		lsr	r2, r2, r3
 18160 0100 7B68     		ldr	r3, [r7, #4]
 18161 0102 9A60     		str	r2, [r3, #8]
1019:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1020:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 18162              		.loc 1 1020 0
 18163 0104 184B     		ldr	r3, .L82
 18164 0106 5B68     		ldr	r3, [r3, #4]
 18165 0108 03F46053 		and	r3, r3, #14336
 18166 010c FB61     		str	r3, [r7, #28]
1021:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 18167              		.loc 1 1021 0
 18168 010e FB69     		ldr	r3, [r7, #28]
 18169 0110 4FEAD323 		lsr	r3, r3, #11
 18170 0114 FB61     		str	r3, [r7, #28]
1022:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 18171              		.loc 1 1022 0
 18172 0116 174A     		ldr	r2, .L82+12
 18173 0118 FB69     		ldr	r3, [r7, #28]
 18174 011a D318     		adds	r3, r2, r3
 18175 011c 1B78     		ldrb	r3, [r3, #0]
 18176 011e DBB2     		uxtb	r3, r3
 18177 0120 3B61     		str	r3, [r7, #16]
1023:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1024:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 18178              		.loc 1 1024 0
 18179 0122 7B68     		ldr	r3, [r7, #4]
 18180 0124 5A68     		ldr	r2, [r3, #4]
 18181 0126 3B69     		ldr	r3, [r7, #16]
 18182 0128 22FA03F2 		lsr	r2, r2, r3
 18183 012c 7B68     		ldr	r3, [r7, #4]
 18184 012e DA60     		str	r2, [r3, #12]
1025:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1026:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 18185              		.loc 1 1026 0
 18186 0130 0D4B     		ldr	r3, .L82
 18187 0132 5B68     		ldr	r3, [r3, #4]
 18188 0134 03F44043 		and	r3, r3, #49152
 18189 0138 FB61     		str	r3, [r7, #28]
1027:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 18190              		.loc 1 1027 0
 18191 013a FB69     		ldr	r3, [r7, #28]
 18192 013c 4FEA9333 		lsr	r3, r3, #14
 18193 0140 FB61     		str	r3, [r7, #28]
1028:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 18194              		.loc 1 1028 0
 18195 0142 0D4A     		ldr	r2, .L82+16
 18196 0144 FB69     		ldr	r3, [r7, #28]
 18197 0146 D318     		adds	r3, r2, r3
 18198 0148 1B78     		ldrb	r3, [r3, #0]
 18199 014a DBB2     		uxtb	r3, r3
 18200 014c 3B61     		str	r3, [r7, #16]
1029:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1030:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 18201              		.loc 1 1030 0
 18202 014e 7B68     		ldr	r3, [r7, #4]
 18203 0150 DA68     		ldr	r2, [r3, #12]
 18204 0152 3B69     		ldr	r3, [r7, #16]
 18205 0154 B2FBF3F2 		udiv	r2, r2, r3
 18206 0158 7B68     		ldr	r3, [r7, #4]
 18207 015a 1A61     		str	r2, [r3, #16]
1031:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18208              		.loc 1 1031 0
 18209 015c 07F12407 		add	r7, r7, #36
 18210 0160 BD46     		mov	sp, r7
 18211 0162 80BC     		pop	{r7}
 18212 0164 7047     		bx	lr
 18213              	.L83:
 18214 0166 00BF     		.align	2
 18215              	.L82:
 18216 0168 00100240 		.word	1073876992
 18217 016c 00127A00 		.word	8000000
 18218 0170 00093D00 		.word	4000000
 18219 0174 00000000 		.word	APBAHBPrescTable
 18220 0178 00000000 		.word	ADCPrescTable
 18221              		.cfi_endproc
 18222              	.LFE49:
 18224              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 18225              		.align	2
 18226              		.global	RCC_AHBPeriphClockCmd
 18227              		.thumb
 18228              		.thumb_func
 18230              	RCC_AHBPeriphClockCmd:
 18231              	.LFB50:
1032:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1033:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1034:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1035:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1036:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1037:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1038:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values:        
1039:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1040:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1041:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1042:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1043:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1044:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1045:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1046:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1047:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1048:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1049:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1050:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:        
1051:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1052:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1053:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1054:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1055:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1056:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1057:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1058:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1059:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1060:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1061:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1062:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1063:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1064:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1065:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18232              		.loc 1 1065 0
 18233              		.cfi_startproc
 18234              		@ args = 0, pretend = 0, frame = 8
 18235              		@ frame_needed = 1, uses_anonymous_args = 0
 18236              		@ link register save eliminated.
 18237 0000 80B4     		push	{r7}
 18238              	.LCFI61:
 18239              		.cfi_def_cfa_offset 4
 18240 0002 83B0     		sub	sp, sp, #12
 18241              	.LCFI62:
 18242              		.cfi_def_cfa_offset 16
 18243 0004 00AF     		add	r7, sp, #0
 18244              		.cfi_offset 7, -4
 18245              	.LCFI63:
 18246              		.cfi_def_cfa_register 7
 18247 0006 7860     		str	r0, [r7, #4]
 18248 0008 0B46     		mov	r3, r1
 18249 000a FB70     		strb	r3, [r7, #3]
1066:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1067:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1068:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1069:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1070:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 18250              		.loc 1 1070 0
 18251 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18252 000e 002B     		cmp	r3, #0
 18253 0010 07D0     		beq	.L85
1071:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1072:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 18254              		.loc 1 1072 0
 18255 0012 0B4B     		ldr	r3, .L87
 18256 0014 0A4A     		ldr	r2, .L87
 18257 0016 5169     		ldr	r1, [r2, #20]
 18258 0018 7A68     		ldr	r2, [r7, #4]
 18259 001a 41EA0202 		orr	r2, r1, r2
 18260 001e 5A61     		str	r2, [r3, #20]
 18261 0020 08E0     		b	.L84
 18262              	.L85:
1073:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1074:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1075:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1076:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 18263              		.loc 1 1076 0
 18264 0022 074B     		ldr	r3, .L87
 18265 0024 064A     		ldr	r2, .L87
 18266 0026 5169     		ldr	r1, [r2, #20]
 18267 0028 7A68     		ldr	r2, [r7, #4]
 18268 002a 6FEA0202 		mvn	r2, r2
 18269 002e 01EA0202 		and	r2, r1, r2
 18270 0032 5A61     		str	r2, [r3, #20]
 18271              	.L84:
1077:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1078:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18272              		.loc 1 1078 0
 18273 0034 07F10C07 		add	r7, r7, #12
 18274 0038 BD46     		mov	sp, r7
 18275 003a 80BC     		pop	{r7}
 18276 003c 7047     		bx	lr
 18277              	.L88:
 18278 003e 00BF     		.align	2
 18279              	.L87:
 18280 0040 00100240 		.word	1073876992
 18281              		.cfi_endproc
 18282              	.LFE50:
 18284              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 18285              		.align	2
 18286              		.global	RCC_APB2PeriphClockCmd
 18287              		.thumb
 18288              		.thumb_func
 18290              	RCC_APB2PeriphClockCmd:
 18291              	.LFB51:
1079:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1080:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1081:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1082:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1083:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1084:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1085:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1086:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1087:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1088:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1089:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1090:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1091:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1092:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1093:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1094:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1095:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1096:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18292              		.loc 1 1096 0
 18293              		.cfi_startproc
 18294              		@ args = 0, pretend = 0, frame = 8
 18295              		@ frame_needed = 1, uses_anonymous_args = 0
 18296              		@ link register save eliminated.
 18297 0000 80B4     		push	{r7}
 18298              	.LCFI64:
 18299              		.cfi_def_cfa_offset 4
 18300 0002 83B0     		sub	sp, sp, #12
 18301              	.LCFI65:
 18302              		.cfi_def_cfa_offset 16
 18303 0004 00AF     		add	r7, sp, #0
 18304              		.cfi_offset 7, -4
 18305              	.LCFI66:
 18306              		.cfi_def_cfa_register 7
 18307 0006 7860     		str	r0, [r7, #4]
 18308 0008 0B46     		mov	r3, r1
 18309 000a FB70     		strb	r3, [r7, #3]
1097:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1098:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1099:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1100:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 18310              		.loc 1 1100 0
 18311 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18312 000e 002B     		cmp	r3, #0
 18313 0010 07D0     		beq	.L90
1101:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1102:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 18314              		.loc 1 1102 0
 18315 0012 0B4B     		ldr	r3, .L92
 18316 0014 0A4A     		ldr	r2, .L92
 18317 0016 9169     		ldr	r1, [r2, #24]
 18318 0018 7A68     		ldr	r2, [r7, #4]
 18319 001a 41EA0202 		orr	r2, r1, r2
 18320 001e 9A61     		str	r2, [r3, #24]
 18321 0020 08E0     		b	.L89
 18322              	.L90:
1103:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1104:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1105:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1106:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 18323              		.loc 1 1106 0
 18324 0022 074B     		ldr	r3, .L92
 18325 0024 064A     		ldr	r2, .L92
 18326 0026 9169     		ldr	r1, [r2, #24]
 18327 0028 7A68     		ldr	r2, [r7, #4]
 18328 002a 6FEA0202 		mvn	r2, r2
 18329 002e 01EA0202 		and	r2, r1, r2
 18330 0032 9A61     		str	r2, [r3, #24]
 18331              	.L89:
1107:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1108:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18332              		.loc 1 1108 0
 18333 0034 07F10C07 		add	r7, r7, #12
 18334 0038 BD46     		mov	sp, r7
 18335 003a 80BC     		pop	{r7}
 18336 003c 7047     		bx	lr
 18337              	.L93:
 18338 003e 00BF     		.align	2
 18339              	.L92:
 18340 0040 00100240 		.word	1073876992
 18341              		.cfi_endproc
 18342              	.LFE51:
 18344              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 18345              		.align	2
 18346              		.global	RCC_APB1PeriphClockCmd
 18347              		.thumb
 18348              		.thumb_func
 18350              	RCC_APB1PeriphClockCmd:
 18351              	.LFB52:
1109:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1110:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1111:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1112:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1113:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1114:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1115:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1116:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1117:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1118:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1119:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1120:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1121:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1122:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1123:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1124:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1125:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1126:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1127:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18352              		.loc 1 1127 0
 18353              		.cfi_startproc
 18354              		@ args = 0, pretend = 0, frame = 8
 18355              		@ frame_needed = 1, uses_anonymous_args = 0
 18356              		@ link register save eliminated.
 18357 0000 80B4     		push	{r7}
 18358              	.LCFI67:
 18359              		.cfi_def_cfa_offset 4
 18360 0002 83B0     		sub	sp, sp, #12
 18361              	.LCFI68:
 18362              		.cfi_def_cfa_offset 16
 18363 0004 00AF     		add	r7, sp, #0
 18364              		.cfi_offset 7, -4
 18365              	.LCFI69:
 18366              		.cfi_def_cfa_register 7
 18367 0006 7860     		str	r0, [r7, #4]
 18368 0008 0B46     		mov	r3, r1
 18369 000a FB70     		strb	r3, [r7, #3]
1128:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1129:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1130:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1131:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 18370              		.loc 1 1131 0
 18371 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18372 000e 002B     		cmp	r3, #0
 18373 0010 07D0     		beq	.L95
1132:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1133:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 18374              		.loc 1 1133 0
 18375 0012 0B4B     		ldr	r3, .L97
 18376 0014 0A4A     		ldr	r2, .L97
 18377 0016 D169     		ldr	r1, [r2, #28]
 18378 0018 7A68     		ldr	r2, [r7, #4]
 18379 001a 41EA0202 		orr	r2, r1, r2
 18380 001e DA61     		str	r2, [r3, #28]
 18381 0020 08E0     		b	.L94
 18382              	.L95:
1134:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1135:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1136:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1137:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 18383              		.loc 1 1137 0
 18384 0022 074B     		ldr	r3, .L97
 18385 0024 064A     		ldr	r2, .L97
 18386 0026 D169     		ldr	r1, [r2, #28]
 18387 0028 7A68     		ldr	r2, [r7, #4]
 18388 002a 6FEA0202 		mvn	r2, r2
 18389 002e 01EA0202 		and	r2, r1, r2
 18390 0032 DA61     		str	r2, [r3, #28]
 18391              	.L94:
1138:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1139:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18392              		.loc 1 1139 0
 18393 0034 07F10C07 		add	r7, r7, #12
 18394 0038 BD46     		mov	sp, r7
 18395 003a 80BC     		pop	{r7}
 18396 003c 7047     		bx	lr
 18397              	.L98:
 18398 003e 00BF     		.align	2
 18399              	.L97:
 18400 0040 00100240 		.word	1073876992
 18401              		.cfi_endproc
 18402              	.LFE52:
 18404              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 18405              		.align	2
 18406              		.global	RCC_APB2PeriphResetCmd
 18407              		.thumb
 18408              		.thumb_func
 18410              	RCC_APB2PeriphResetCmd:
 18411              	.LFB53:
1140:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1141:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1142:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1143:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1144:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1145:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1146:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1147:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1148:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1149:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1150:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1151:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1152:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1153:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1154:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
1155:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1156:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1157:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1158:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1159:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1160:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1161:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1162:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1163:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1164:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1165:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1166:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1167:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
1168:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1169:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1170:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1171:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1172:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1173:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1174:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1175:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1176:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1177:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1178:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1179:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1180:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1181:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1182:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1183:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1184:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1185:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1186:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18412              		.loc 1 1186 0
 18413              		.cfi_startproc
 18414              		@ args = 0, pretend = 0, frame = 8
 18415              		@ frame_needed = 1, uses_anonymous_args = 0
 18416              		@ link register save eliminated.
 18417 0000 80B4     		push	{r7}
 18418              	.LCFI70:
 18419              		.cfi_def_cfa_offset 4
 18420 0002 83B0     		sub	sp, sp, #12
 18421              	.LCFI71:
 18422              		.cfi_def_cfa_offset 16
 18423 0004 00AF     		add	r7, sp, #0
 18424              		.cfi_offset 7, -4
 18425              	.LCFI72:
 18426              		.cfi_def_cfa_register 7
 18427 0006 7860     		str	r0, [r7, #4]
 18428 0008 0B46     		mov	r3, r1
 18429 000a FB70     		strb	r3, [r7, #3]
1187:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1188:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1189:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1190:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 18430              		.loc 1 1190 0
 18431 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18432 000e 002B     		cmp	r3, #0
 18433 0010 07D0     		beq	.L100
1191:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1192:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 18434              		.loc 1 1192 0
 18435 0012 0B4B     		ldr	r3, .L102
 18436 0014 0A4A     		ldr	r2, .L102
 18437 0016 D168     		ldr	r1, [r2, #12]
 18438 0018 7A68     		ldr	r2, [r7, #4]
 18439 001a 41EA0202 		orr	r2, r1, r2
 18440 001e DA60     		str	r2, [r3, #12]
 18441 0020 08E0     		b	.L99
 18442              	.L100:
1193:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1194:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1195:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1196:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 18443              		.loc 1 1196 0
 18444 0022 074B     		ldr	r3, .L102
 18445 0024 064A     		ldr	r2, .L102
 18446 0026 D168     		ldr	r1, [r2, #12]
 18447 0028 7A68     		ldr	r2, [r7, #4]
 18448 002a 6FEA0202 		mvn	r2, r2
 18449 002e 01EA0202 		and	r2, r1, r2
 18450 0032 DA60     		str	r2, [r3, #12]
 18451              	.L99:
1197:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1198:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18452              		.loc 1 1198 0
 18453 0034 07F10C07 		add	r7, r7, #12
 18454 0038 BD46     		mov	sp, r7
 18455 003a 80BC     		pop	{r7}
 18456 003c 7047     		bx	lr
 18457              	.L103:
 18458 003e 00BF     		.align	2
 18459              	.L102:
 18460 0040 00100240 		.word	1073876992
 18461              		.cfi_endproc
 18462              	.LFE53:
 18464              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 18465              		.align	2
 18466              		.global	RCC_APB1PeriphResetCmd
 18467              		.thumb
 18468              		.thumb_func
 18470              	RCC_APB1PeriphResetCmd:
 18471              	.LFB54:
1199:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1200:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1201:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1202:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1203:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1204:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1205:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1206:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1207:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1208:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1209:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1210:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1211:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1212:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1213:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1214:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1215:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1216:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1217:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18472              		.loc 1 1217 0
 18473              		.cfi_startproc
 18474              		@ args = 0, pretend = 0, frame = 8
 18475              		@ frame_needed = 1, uses_anonymous_args = 0
 18476              		@ link register save eliminated.
 18477 0000 80B4     		push	{r7}
 18478              	.LCFI73:
 18479              		.cfi_def_cfa_offset 4
 18480 0002 83B0     		sub	sp, sp, #12
 18481              	.LCFI74:
 18482              		.cfi_def_cfa_offset 16
 18483 0004 00AF     		add	r7, sp, #0
 18484              		.cfi_offset 7, -4
 18485              	.LCFI75:
 18486              		.cfi_def_cfa_register 7
 18487 0006 7860     		str	r0, [r7, #4]
 18488 0008 0B46     		mov	r3, r1
 18489 000a FB70     		strb	r3, [r7, #3]
1218:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1219:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1220:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1221:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 18490              		.loc 1 1221 0
 18491 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18492 000e 002B     		cmp	r3, #0
 18493 0010 07D0     		beq	.L105
1222:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1223:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 18494              		.loc 1 1223 0
 18495 0012 0B4B     		ldr	r3, .L107
 18496 0014 0A4A     		ldr	r2, .L107
 18497 0016 1169     		ldr	r1, [r2, #16]
 18498 0018 7A68     		ldr	r2, [r7, #4]
 18499 001a 41EA0202 		orr	r2, r1, r2
 18500 001e 1A61     		str	r2, [r3, #16]
 18501 0020 08E0     		b	.L104
 18502              	.L105:
1224:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1225:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1226:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1227:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 18503              		.loc 1 1227 0
 18504 0022 074B     		ldr	r3, .L107
 18505 0024 064A     		ldr	r2, .L107
 18506 0026 1169     		ldr	r1, [r2, #16]
 18507 0028 7A68     		ldr	r2, [r7, #4]
 18508 002a 6FEA0202 		mvn	r2, r2
 18509 002e 01EA0202 		and	r2, r1, r2
 18510 0032 1A61     		str	r2, [r3, #16]
 18511              	.L104:
1228:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1229:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18512              		.loc 1 1229 0
 18513 0034 07F10C07 		add	r7, r7, #12
 18514 0038 BD46     		mov	sp, r7
 18515 003a 80BC     		pop	{r7}
 18516 003c 7047     		bx	lr
 18517              	.L108:
 18518 003e 00BF     		.align	2
 18519              	.L107:
 18520 0040 00100240 		.word	1073876992
 18521              		.cfi_endproc
 18522              	.LFE54:
 18524              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 18525              		.align	2
 18526              		.global	RCC_BackupResetCmd
 18527              		.thumb
 18528              		.thumb_func
 18530              	RCC_BackupResetCmd:
 18531              	.LFB55:
1230:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1231:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1232:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1233:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1234:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1236:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1237:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1238:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18532              		.loc 1 1238 0
 18533              		.cfi_startproc
 18534              		@ args = 0, pretend = 0, frame = 8
 18535              		@ frame_needed = 1, uses_anonymous_args = 0
 18536              		@ link register save eliminated.
 18537 0000 80B4     		push	{r7}
 18538              	.LCFI76:
 18539              		.cfi_def_cfa_offset 4
 18540 0002 83B0     		sub	sp, sp, #12
 18541              	.LCFI77:
 18542              		.cfi_def_cfa_offset 16
 18543 0004 00AF     		add	r7, sp, #0
 18544              		.cfi_offset 7, -4
 18545              	.LCFI78:
 18546              		.cfi_def_cfa_register 7
 18547 0006 0346     		mov	r3, r0
 18548 0008 FB71     		strb	r3, [r7, #7]
1239:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1240:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1241:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 18549              		.loc 1 1241 0
 18550 000a 044B     		ldr	r3, .L110
 18551 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 18552 000e 1A60     		str	r2, [r3, #0]
1242:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18553              		.loc 1 1242 0
 18554 0010 07F10C07 		add	r7, r7, #12
 18555 0014 BD46     		mov	sp, r7
 18556 0016 80BC     		pop	{r7}
 18557 0018 7047     		bx	lr
 18558              	.L111:
 18559 001a 00BF     		.align	2
 18560              	.L110:
 18561 001c 40044242 		.word	1111622720
 18562              		.cfi_endproc
 18563              	.LFE55:
 18565              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 18566              		.align	2
 18567              		.global	RCC_ClockSecuritySystemCmd
 18568              		.thumb
 18569              		.thumb_func
 18571              	RCC_ClockSecuritySystemCmd:
 18572              	.LFB56:
1243:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1244:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1245:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1246:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1247:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1248:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1249:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1250:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1251:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18573              		.loc 1 1251 0
 18574              		.cfi_startproc
 18575              		@ args = 0, pretend = 0, frame = 8
 18576              		@ frame_needed = 1, uses_anonymous_args = 0
 18577              		@ link register save eliminated.
 18578 0000 80B4     		push	{r7}
 18579              	.LCFI79:
 18580              		.cfi_def_cfa_offset 4
 18581 0002 83B0     		sub	sp, sp, #12
 18582              	.LCFI80:
 18583              		.cfi_def_cfa_offset 16
 18584 0004 00AF     		add	r7, sp, #0
 18585              		.cfi_offset 7, -4
 18586              	.LCFI81:
 18587              		.cfi_def_cfa_register 7
 18588 0006 0346     		mov	r3, r0
 18589 0008 FB71     		strb	r3, [r7, #7]
1252:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1253:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1254:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 18590              		.loc 1 1254 0
 18591 000a 044B     		ldr	r3, .L113
 18592 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 18593 000e 1A60     		str	r2, [r3, #0]
1255:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18594              		.loc 1 1255 0
 18595 0010 07F10C07 		add	r7, r7, #12
 18596 0014 BD46     		mov	sp, r7
 18597 0016 80BC     		pop	{r7}
 18598 0018 7047     		bx	lr
 18599              	.L114:
 18600 001a 00BF     		.align	2
 18601              	.L113:
 18602 001c 4C004242 		.word	1111621708
 18603              		.cfi_endproc
 18604              	.LFE56:
 18606              		.section	.text.RCC_MCOConfig,"ax",%progbits
 18607              		.align	2
 18608              		.global	RCC_MCOConfig
 18609              		.thumb
 18610              		.thumb_func
 18612              	RCC_MCOConfig:
 18613              	.LFB57:
1256:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1257:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1258:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1259:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1260:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1261:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1262:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:       
1263:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1264:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1265:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1266:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1267:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1268:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1269:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1270:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1271:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1272:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1273:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1274:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1275:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1276:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1277:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1278:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1279:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1280:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1281:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1282:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1283:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18614              		.loc 1 1283 0
 18615              		.cfi_startproc
 18616              		@ args = 0, pretend = 0, frame = 8
 18617              		@ frame_needed = 1, uses_anonymous_args = 0
 18618              		@ link register save eliminated.
 18619 0000 80B4     		push	{r7}
 18620              	.LCFI82:
 18621              		.cfi_def_cfa_offset 4
 18622 0002 83B0     		sub	sp, sp, #12
 18623              	.LCFI83:
 18624              		.cfi_def_cfa_offset 16
 18625 0004 00AF     		add	r7, sp, #0
 18626              		.cfi_offset 7, -4
 18627              	.LCFI84:
 18628              		.cfi_def_cfa_register 7
 18629 0006 0346     		mov	r3, r0
 18630 0008 FB71     		strb	r3, [r7, #7]
1284:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1285:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
1286:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1287:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1288:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 18631              		.loc 1 1288 0
 18632 000a 044B     		ldr	r3, .L116
 18633 000c FA79     		ldrb	r2, [r7, #7]
 18634 000e 1A70     		strb	r2, [r3, #0]
1289:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18635              		.loc 1 1289 0
 18636 0010 07F10C07 		add	r7, r7, #12
 18637 0014 BD46     		mov	sp, r7
 18638 0016 80BC     		pop	{r7}
 18639 0018 7047     		bx	lr
 18640              	.L117:
 18641 001a 00BF     		.align	2
 18642              	.L116:
 18643 001c 07100240 		.word	1073876999
 18644              		.cfi_endproc
 18645              	.LFE57:
 18647              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 18648              		.align	2
 18649              		.global	RCC_GetFlagStatus
 18650              		.thumb
 18651              		.thumb_func
 18653              	RCC_GetFlagStatus:
 18654              	.LFB58:
1290:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1291:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1292:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1293:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1294:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1295:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1296:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:
1297:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1298:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1299:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1300:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1301:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1302:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1303:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1304:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1305:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1306:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1307:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1308:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1309:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1310:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1311:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1312:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1313:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1314:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1315:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1316:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1317:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1318:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1319:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1320:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1321:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1322:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1323:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1324:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1325:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1326:../StdPeripheralDriver/src/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1327:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18655              		.loc 1 1327 0
 18656              		.cfi_startproc
 18657              		@ args = 0, pretend = 0, frame = 24
 18658              		@ frame_needed = 1, uses_anonymous_args = 0
 18659              		@ link register save eliminated.
 18660 0000 80B4     		push	{r7}
 18661              	.LCFI85:
 18662              		.cfi_def_cfa_offset 4
 18663 0002 87B0     		sub	sp, sp, #28
 18664              	.LCFI86:
 18665              		.cfi_def_cfa_offset 32
 18666 0004 00AF     		add	r7, sp, #0
 18667              		.cfi_offset 7, -4
 18668              	.LCFI87:
 18669              		.cfi_def_cfa_register 7
 18670 0006 0346     		mov	r3, r0
 18671 0008 FB71     		strb	r3, [r7, #7]
1328:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmp = 0;
 18672              		.loc 1 1328 0
 18673 000a 4FF00003 		mov	r3, #0
 18674 000e FB60     		str	r3, [r7, #12]
1329:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
 18675              		.loc 1 1329 0
 18676 0010 4FF00003 		mov	r3, #0
 18677 0014 7B61     		str	r3, [r7, #20]
1330:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
 18678              		.loc 1 1330 0
 18679 0016 4FF00003 		mov	r3, #0
 18680 001a FB74     		strb	r3, [r7, #19]
1331:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1332:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1333:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1334:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get the RCC register index */
1335:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 18681              		.loc 1 1335 0
 18682 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 18683 001e 4FEA5313 		lsr	r3, r3, #5
 18684 0022 DBB2     		uxtb	r3, r3
 18685 0024 FB60     		str	r3, [r7, #12]
1336:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 18686              		.loc 1 1336 0
 18687 0026 FB68     		ldr	r3, [r7, #12]
 18688 0028 012B     		cmp	r3, #1
 18689 002a 03D1     		bne	.L119
1337:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1338:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->CR;
 18690              		.loc 1 1338 0
 18691 002c 144B     		ldr	r3, .L124
 18692 002e 1B68     		ldr	r3, [r3, #0]
 18693 0030 7B61     		str	r3, [r7, #20]
 18694 0032 09E0     		b	.L120
 18695              	.L119:
1339:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1340:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 18696              		.loc 1 1340 0
 18697 0034 FB68     		ldr	r3, [r7, #12]
 18698 0036 022B     		cmp	r3, #2
 18699 0038 03D1     		bne	.L121
1341:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1342:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
 18700              		.loc 1 1342 0
 18701 003a 114B     		ldr	r3, .L124
 18702 003c 1B6A     		ldr	r3, [r3, #32]
 18703 003e 7B61     		str	r3, [r7, #20]
 18704 0040 02E0     		b	.L120
 18705              	.L121:
1343:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1344:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1345:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1346:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 18706              		.loc 1 1346 0
 18707 0042 0F4B     		ldr	r3, .L124
 18708 0044 5B6A     		ldr	r3, [r3, #36]
 18709 0046 7B61     		str	r3, [r7, #20]
 18710              	.L120:
1347:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1348:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1349:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get the flag position */
1350:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 18711              		.loc 1 1350 0
 18712 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 18713 004a 03F01F03 		and	r3, r3, #31
 18714 004e FB60     		str	r3, [r7, #12]
1351:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 18715              		.loc 1 1351 0
 18716 0050 FB68     		ldr	r3, [r7, #12]
 18717 0052 7A69     		ldr	r2, [r7, #20]
 18718 0054 22FA03F3 		lsr	r3, r2, r3
 18719 0058 03F00103 		and	r3, r3, #1
 18720 005c DBB2     		uxtb	r3, r3
 18721 005e 002B     		cmp	r3, #0
 18722 0060 03D0     		beq	.L122
1352:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1353:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = SET;
 18723              		.loc 1 1353 0
 18724 0062 4FF00103 		mov	r3, #1
 18725 0066 FB74     		strb	r3, [r7, #19]
 18726 0068 02E0     		b	.L123
 18727              	.L122:
1354:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1355:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1356:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1357:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 18728              		.loc 1 1357 0
 18729 006a 4FF00003 		mov	r3, #0
 18730 006e FB74     		strb	r3, [r7, #19]
 18731              	.L123:
1358:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1359:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1360:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Return the flag status */
1361:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return bitstatus;
 18732              		.loc 1 1361 0
 18733 0070 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1362:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18734              		.loc 1 1362 0
 18735 0072 1846     		mov	r0, r3
 18736 0074 07F11C07 		add	r7, r7, #28
 18737 0078 BD46     		mov	sp, r7
 18738 007a 80BC     		pop	{r7}
 18739 007c 7047     		bx	lr
 18740              	.L125:
 18741 007e 00BF     		.align	2
 18742              	.L124:
 18743 0080 00100240 		.word	1073876992
 18744              		.cfi_endproc
 18745              	.LFE58:
 18747              		.section	.text.RCC_ClearFlag,"ax",%progbits
 18748              		.align	2
 18749              		.global	RCC_ClearFlag
 18750              		.thumb
 18751              		.thumb_func
 18753              	RCC_ClearFlag:
 18754              	.LFB59:
1363:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1364:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1365:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1366:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1367:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1368:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
1369:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1370:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1371:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1372:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18755              		.loc 1 1372 0
 18756              		.cfi_startproc
 18757              		@ args = 0, pretend = 0, frame = 0
 18758              		@ frame_needed = 1, uses_anonymous_args = 0
 18759              		@ link register save eliminated.
 18760 0000 80B4     		push	{r7}
 18761              	.LCFI88:
 18762              		.cfi_def_cfa_offset 4
 18763 0002 00AF     		add	r7, sp, #0
 18764              		.cfi_offset 7, -4
 18765              	.LCFI89:
 18766              		.cfi_def_cfa_register 7
1373:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1374:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 18767              		.loc 1 1374 0
 18768 0004 044B     		ldr	r3, .L127
 18769 0006 044A     		ldr	r2, .L127
 18770 0008 526A     		ldr	r2, [r2, #36]
 18771 000a 42F08072 		orr	r2, r2, #16777216
 18772 000e 5A62     		str	r2, [r3, #36]
1375:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18773              		.loc 1 1375 0
 18774 0010 BD46     		mov	sp, r7
 18775 0012 80BC     		pop	{r7}
 18776 0014 7047     		bx	lr
 18777              	.L128:
 18778 0016 00BF     		.align	2
 18779              	.L127:
 18780 0018 00100240 		.word	1073876992
 18781              		.cfi_endproc
 18782              	.LFE59:
 18784              		.section	.text.RCC_GetITStatus,"ax",%progbits
 18785              		.align	2
 18786              		.global	RCC_GetITStatus
 18787              		.thumb
 18788              		.thumb_func
 18790              	RCC_GetITStatus:
 18791              	.LFB60:
1376:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1377:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1378:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1379:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1380:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1381:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1382:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:
1383:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1384:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1385:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1386:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1387:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1388:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1389:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1390:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1391:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1392:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1393:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1394:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1395:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1396:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1397:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1398:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1399:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1400:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1401:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1402:../StdPeripheralDriver/src/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1403:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18792              		.loc 1 1403 0
 18793              		.cfi_startproc
 18794              		@ args = 0, pretend = 0, frame = 16
 18795              		@ frame_needed = 1, uses_anonymous_args = 0
 18796              		@ link register save eliminated.
 18797 0000 80B4     		push	{r7}
 18798              	.LCFI90:
 18799              		.cfi_def_cfa_offset 4
 18800 0002 85B0     		sub	sp, sp, #20
 18801              	.LCFI91:
 18802              		.cfi_def_cfa_offset 24
 18803 0004 00AF     		add	r7, sp, #0
 18804              		.cfi_offset 7, -4
 18805              	.LCFI92:
 18806              		.cfi_def_cfa_register 7
 18807 0006 0346     		mov	r3, r0
 18808 0008 FB71     		strb	r3, [r7, #7]
1404:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
 18809              		.loc 1 1404 0
 18810 000a 4FF00003 		mov	r3, #0
 18811 000e FB73     		strb	r3, [r7, #15]
1405:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1406:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1407:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1408:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1409:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 18812              		.loc 1 1409 0
 18813 0010 0A4B     		ldr	r3, .L132
 18814 0012 9A68     		ldr	r2, [r3, #8]
 18815 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 18816 0016 02EA0303 		and	r3, r2, r3
 18817 001a 002B     		cmp	r3, #0
 18818 001c 03D0     		beq	.L130
1410:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1411:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = SET;
 18819              		.loc 1 1411 0
 18820 001e 4FF00103 		mov	r3, #1
 18821 0022 FB73     		strb	r3, [r7, #15]
 18822 0024 02E0     		b	.L131
 18823              	.L130:
1412:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1413:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1414:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1415:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 18824              		.loc 1 1415 0
 18825 0026 4FF00003 		mov	r3, #0
 18826 002a FB73     		strb	r3, [r7, #15]
 18827              	.L131:
1416:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1417:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1418:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1419:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return  bitstatus;
 18828              		.loc 1 1419 0
 18829 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1420:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18830              		.loc 1 1420 0
 18831 002e 1846     		mov	r0, r3
 18832 0030 07F11407 		add	r7, r7, #20
 18833 0034 BD46     		mov	sp, r7
 18834 0036 80BC     		pop	{r7}
 18835 0038 7047     		bx	lr
 18836              	.L133:
 18837 003a 00BF     		.align	2
 18838              	.L132:
 18839 003c 00100240 		.word	1073876992
 18840              		.cfi_endproc
 18841              	.LFE60:
 18843              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 18844              		.align	2
 18845              		.global	RCC_ClearITPendingBit
 18846              		.thumb
 18847              		.thumb_func
 18849              	RCC_ClearITPendingBit:
 18850              	.LFB61:
1421:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1422:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1423:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1424:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1425:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1426:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1427:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values:
1428:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1429:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1430:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1431:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1432:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1433:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1434:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1435:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1436:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1437:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1438:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:        
1439:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1440:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1441:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1442:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1443:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1444:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1445:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1446:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1447:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1448:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1449:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18851              		.loc 1 1449 0
 18852              		.cfi_startproc
 18853              		@ args = 0, pretend = 0, frame = 8
 18854              		@ frame_needed = 1, uses_anonymous_args = 0
 18855              		@ link register save eliminated.
 18856 0000 80B4     		push	{r7}
 18857              	.LCFI93:
 18858              		.cfi_def_cfa_offset 4
 18859 0002 83B0     		sub	sp, sp, #12
 18860              	.LCFI94:
 18861              		.cfi_def_cfa_offset 16
 18862 0004 00AF     		add	r7, sp, #0
 18863              		.cfi_offset 7, -4
 18864              	.LCFI95:
 18865              		.cfi_def_cfa_register 7
 18866 0006 0346     		mov	r3, r0
 18867 0008 FB71     		strb	r3, [r7, #7]
1450:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1451:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1452:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1453:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1454:../StdPeripheralDriver/src/stm32f10x_rcc.c ****      pending bits */
1455:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 18868              		.loc 1 1455 0
 18869 000a 044B     		ldr	r3, .L135
 18870 000c FA79     		ldrb	r2, [r7, #7]
 18871 000e 1A70     		strb	r2, [r3, #0]
1456:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18872              		.loc 1 1456 0
 18873 0010 07F10C07 		add	r7, r7, #12
 18874 0014 BD46     		mov	sp, r7
 18875 0016 80BC     		pop	{r7}
 18876 0018 7047     		bx	lr
 18877              	.L136:
 18878 001a 00BF     		.align	2
 18879              	.L135:
 18880 001c 0A100240 		.word	1073877002
 18881              		.cfi_endproc
 18882              	.LFE61:
 18884              		.text
 18885              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rcc.c
     /tmp/cc8Xx77U.s:16872  .data.APBAHBPrescTable:00000000 $d
     /tmp/cc8Xx77U.s:16875  .data.APBAHBPrescTable:00000000 APBAHBPrescTable
     /tmp/cc8Xx77U.s:16893  .data.ADCPrescTable:00000000 $d
     /tmp/cc8Xx77U.s:16896  .data.ADCPrescTable:00000000 ADCPrescTable
     /tmp/cc8Xx77U.s:16902  .text.RCC_DeInit:00000000 $t
     /tmp/cc8Xx77U.s:16907  .text.RCC_DeInit:00000000 RCC_DeInit
     /tmp/cc8Xx77U.s:16968  .text.RCC_DeInit:0000005c $d
     /tmp/cc8Xx77U.s:16974  .text.RCC_HSEConfig:00000000 $t
     /tmp/cc8Xx77U.s:16979  .text.RCC_HSEConfig:00000000 RCC_HSEConfig
     /tmp/cc8Xx77U.s:17044  .text.RCC_HSEConfig:00000058 $d
     /tmp/cc8Xx77U.s:17049  .text.RCC_WaitForHSEStartUp:00000000 $t
     /tmp/cc8Xx77U.s:17054  .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
     /tmp/cc8Xx77U.s:18653  .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
     /tmp/cc8Xx77U.s:17124  .text.RCC_AdjustHSICalibrationValue:00000000 $t
     /tmp/cc8Xx77U.s:17129  .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
     /tmp/cc8Xx77U.s:17177  .text.RCC_AdjustHSICalibrationValue:0000003c $d
     /tmp/cc8Xx77U.s:17182  .text.RCC_HSICmd:00000000 $t
     /tmp/cc8Xx77U.s:17187  .text.RCC_HSICmd:00000000 RCC_HSICmd
     /tmp/cc8Xx77U.s:17218  .text.RCC_HSICmd:0000001c $d
     /tmp/cc8Xx77U.s:17223  .text.RCC_PLLConfig:00000000 $t
     /tmp/cc8Xx77U.s:17228  .text.RCC_PLLConfig:00000000 RCC_PLLConfig
     /tmp/cc8Xx77U.s:17277  .text.RCC_PLLConfig:00000040 $d
     /tmp/cc8Xx77U.s:17282  .text.RCC_PLLCmd:00000000 $t
     /tmp/cc8Xx77U.s:17287  .text.RCC_PLLCmd:00000000 RCC_PLLCmd
     /tmp/cc8Xx77U.s:17318  .text.RCC_PLLCmd:0000001c $d
     /tmp/cc8Xx77U.s:17323  .text.RCC_PREDIV1Config:00000000 $t
     /tmp/cc8Xx77U.s:17328  .text.RCC_PREDIV1Config:00000000 RCC_PREDIV1Config
     /tmp/cc8Xx77U.s:17378  .text.RCC_PREDIV1Config:00000044 $d
     /tmp/cc8Xx77U.s:17383  .text.RCC_SYSCLKConfig:00000000 $t
     /tmp/cc8Xx77U.s:17388  .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
     /tmp/cc8Xx77U.s:17434  .text.RCC_SYSCLKConfig:00000038 $d
     /tmp/cc8Xx77U.s:17439  .text.RCC_GetSYSCLKSource:00000000 $t
     /tmp/cc8Xx77U.s:17444  .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
     /tmp/cc8Xx77U.s:17472  .text.RCC_GetSYSCLKSource:00000018 $d
     /tmp/cc8Xx77U.s:17477  .text.RCC_HCLKConfig:00000000 $t
     /tmp/cc8Xx77U.s:17482  .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
     /tmp/cc8Xx77U.s:17528  .text.RCC_HCLKConfig:00000038 $d
     /tmp/cc8Xx77U.s:17533  .text.RCC_PCLK1Config:00000000 $t
     /tmp/cc8Xx77U.s:17538  .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
     /tmp/cc8Xx77U.s:17584  .text.RCC_PCLK1Config:00000038 $d
     /tmp/cc8Xx77U.s:17589  .text.RCC_PCLK2Config:00000000 $t
     /tmp/cc8Xx77U.s:17594  .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
     /tmp/cc8Xx77U.s:17641  .text.RCC_PCLK2Config:0000003c $d
     /tmp/cc8Xx77U.s:17646  .text.RCC_ITConfig:00000000 $t
     /tmp/cc8Xx77U.s:17651  .text.RCC_ITConfig:00000000 RCC_ITConfig
     /tmp/cc8Xx77U.s:17707  .text.RCC_ITConfig:0000004c $d
     /tmp/cc8Xx77U.s:17712  .text.RCC_USBCLKConfig:00000000 $t
     /tmp/cc8Xx77U.s:17717  .text.RCC_USBCLKConfig:00000000 RCC_USBCLKConfig
     /tmp/cc8Xx77U.s:17747  .text.RCC_USBCLKConfig:00000018 $d
     /tmp/cc8Xx77U.s:17752  .text.RCC_ADCCLKConfig:00000000 $t
     /tmp/cc8Xx77U.s:17757  .text.RCC_ADCCLKConfig:00000000 RCC_ADCCLKConfig
     /tmp/cc8Xx77U.s:17803  .text.RCC_ADCCLKConfig:00000038 $d
     /tmp/cc8Xx77U.s:17808  .text.RCC_LSEConfig:00000000 $t
     /tmp/cc8Xx77U.s:17813  .text.RCC_LSEConfig:00000000 RCC_LSEConfig
     /tmp/cc8Xx77U.s:17871  .text.RCC_LSEConfig:00000044 $d
     /tmp/cc8Xx77U.s:17876  .text.RCC_LSICmd:00000000 $t
     /tmp/cc8Xx77U.s:17881  .text.RCC_LSICmd:00000000 RCC_LSICmd
     /tmp/cc8Xx77U.s:17912  .text.RCC_LSICmd:0000001c $d
     /tmp/cc8Xx77U.s:17917  .text.RCC_RTCCLKConfig:00000000 $t
     /tmp/cc8Xx77U.s:17922  .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
     /tmp/cc8Xx77U.s:17955  .text.RCC_RTCCLKConfig:00000020 $d
     /tmp/cc8Xx77U.s:17960  .text.RCC_RTCCLKCmd:00000000 $t
     /tmp/cc8Xx77U.s:17965  .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
     /tmp/cc8Xx77U.s:17996  .text.RCC_RTCCLKCmd:0000001c $d
     /tmp/cc8Xx77U.s:18001  .text.RCC_GetClocksFreq:00000000 $t
     /tmp/cc8Xx77U.s:18006  .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
     /tmp/cc8Xx77U.s:18216  .text.RCC_GetClocksFreq:00000168 $d
     /tmp/cc8Xx77U.s:18225  .text.RCC_AHBPeriphClockCmd:00000000 $t
     /tmp/cc8Xx77U.s:18230  .text.RCC_AHBPeriphClockCmd:00000000 RCC_AHBPeriphClockCmd
     /tmp/cc8Xx77U.s:18280  .text.RCC_AHBPeriphClockCmd:00000040 $d
     /tmp/cc8Xx77U.s:18285  .text.RCC_APB2PeriphClockCmd:00000000 $t
     /tmp/cc8Xx77U.s:18290  .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
     /tmp/cc8Xx77U.s:18340  .text.RCC_APB2PeriphClockCmd:00000040 $d
     /tmp/cc8Xx77U.s:18345  .text.RCC_APB1PeriphClockCmd:00000000 $t
     /tmp/cc8Xx77U.s:18350  .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
     /tmp/cc8Xx77U.s:18400  .text.RCC_APB1PeriphClockCmd:00000040 $d
     /tmp/cc8Xx77U.s:18405  .text.RCC_APB2PeriphResetCmd:00000000 $t
     /tmp/cc8Xx77U.s:18410  .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
     /tmp/cc8Xx77U.s:18460  .text.RCC_APB2PeriphResetCmd:00000040 $d
     /tmp/cc8Xx77U.s:18465  .text.RCC_APB1PeriphResetCmd:00000000 $t
     /tmp/cc8Xx77U.s:18470  .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
     /tmp/cc8Xx77U.s:18520  .text.RCC_APB1PeriphResetCmd:00000040 $d
     /tmp/cc8Xx77U.s:18525  .text.RCC_BackupResetCmd:00000000 $t
     /tmp/cc8Xx77U.s:18530  .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
     /tmp/cc8Xx77U.s:18561  .text.RCC_BackupResetCmd:0000001c $d
     /tmp/cc8Xx77U.s:18566  .text.RCC_ClockSecuritySystemCmd:00000000 $t
     /tmp/cc8Xx77U.s:18571  .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
     /tmp/cc8Xx77U.s:18602  .text.RCC_ClockSecuritySystemCmd:0000001c $d
     /tmp/cc8Xx77U.s:18607  .text.RCC_MCOConfig:00000000 $t
     /tmp/cc8Xx77U.s:18612  .text.RCC_MCOConfig:00000000 RCC_MCOConfig
     /tmp/cc8Xx77U.s:18643  .text.RCC_MCOConfig:0000001c $d
     /tmp/cc8Xx77U.s:18648  .text.RCC_GetFlagStatus:00000000 $t
     /tmp/cc8Xx77U.s:18743  .text.RCC_GetFlagStatus:00000080 $d
     /tmp/cc8Xx77U.s:18748  .text.RCC_ClearFlag:00000000 $t
     /tmp/cc8Xx77U.s:18753  .text.RCC_ClearFlag:00000000 RCC_ClearFlag
     /tmp/cc8Xx77U.s:18780  .text.RCC_ClearFlag:00000018 $d
     /tmp/cc8Xx77U.s:18785  .text.RCC_GetITStatus:00000000 $t
     /tmp/cc8Xx77U.s:18790  .text.RCC_GetITStatus:00000000 RCC_GetITStatus
     /tmp/cc8Xx77U.s:18839  .text.RCC_GetITStatus:0000003c $d
     /tmp/cc8Xx77U.s:18844  .text.RCC_ClearITPendingBit:00000000 $t
     /tmp/cc8Xx77U.s:18849  .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
     /tmp/cc8Xx77U.s:18880  .text.RCC_ClearITPendingBit:0000001c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
