   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f10x_rcc.c"
  23              	.Ltext0:
  24              		.file 1 "../StdPeripheralDriver/src/stm32f10x_rcc.c"
 17617              		.align	2
 17620              	APBAHBPrescTable:
 17621 0000 00       		.byte	0
 17622 0001 00       		.byte	0
 17623 0002 00       		.byte	0
 17624 0003 00       		.byte	0
 17625 0004 01       		.byte	1
 17626 0005 02       		.byte	2
 17627 0006 03       		.byte	3
 17628 0007 04       		.byte	4
 17629 0008 01       		.byte	1
 17630 0009 02       		.byte	2
 17631 000a 03       		.byte	3
 17632 000b 04       		.byte	4
 17633 000c 06       		.byte	6
 17634 000d 07       		.byte	7
 17635 000e 08       		.byte	8
 17636 000f 09       		.byte	9
 17637              		.section	.data.ADCPrescTable,"aw",%progbits
 17638              		.align	2
 17641              	ADCPrescTable:
 17642 0000 02       		.byte	2
 17643 0001 04       		.byte	4
 17644 0002 06       		.byte	6
 17645 0003 08       		.byte	8
 17646              		.section	.text.RCC_DeInit,"ax",%progbits
 17647              		.align	2
 17648              		.global	RCC_DeInit
 17649              		.thumb
 17650              		.thumb_func
 17652              	RCC_DeInit:
 17653              	.LFB29:
   1:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
   2:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
   3:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
   4:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @version V3.5.0
   6:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
   9:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @attention
  10:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *
  11:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *
  18:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ******************************************************************************
  20:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  21:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  22:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  25:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  27:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  28:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  29:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC 
  30:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief RCC driver modules
  31:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  32:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
  33:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  34:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  35:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  36:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  37:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  38:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
  39:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
  40:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  41:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  42:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  43:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
  44:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
  45:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  46:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  47:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  48:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  49:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CR Register ---*/
  50:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  51:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  52:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  53:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  54:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  55:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  56:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  57:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  58:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  59:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  60:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  61:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  62:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  63:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  64:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  65:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  66:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  67:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  68:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  69:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  70:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  71:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  72:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  73:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  74:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  75:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  76:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  77:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  78:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  79:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  80:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  81:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  82:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
  83:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  84:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  85:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  86:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  87:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  88:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  89:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  90:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  91:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  92:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  93:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  94:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  95:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  96:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  97:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
  98:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CSR Register ---*/
  99:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 100:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 101:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 102:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 103:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 104:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 105:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 106:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 107:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 108:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 109:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 110:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 111:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 112:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 113:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 114:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 115:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 116:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 117:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 118:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 119:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 120:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CR register bit mask */
 121:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 122:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 123:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 124:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 125:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 126:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 127:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR register bit mask */
 128:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 129:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 130:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 131:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 132:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 133:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 134:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 135:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 136:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 137:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 138:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 139:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 140:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 141:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 142:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 143:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 144:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 145:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 146:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 147:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 148:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CSR register bit mask */
 149:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 150:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 151:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 152:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 153:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 154:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 155:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 156:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 157:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 158:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 159:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 160:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 161:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 162:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* RCC Flag Mask */
 163:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 164:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 165:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 166:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 167:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 168:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 169:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 170:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 171:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 172:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 173:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 174:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /* BDCR register base address */
 175:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 176:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 177:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 178:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 179:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 180:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 181:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 182:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 183:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 184:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 185:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 186:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 187:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 188:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 189:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 190:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 191:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */ 
 192:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 193:../StdPeripheralDriver/src/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 194:../StdPeripheralDriver/src/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 195:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 196:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 197:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 198:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 199:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 200:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 201:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 202:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 203:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 204:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 205:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @}
 206:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 207:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 208:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 209:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @{
 210:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 211:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 212:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 213:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 214:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 215:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 216:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 217:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_DeInit(void)
 218:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17654              		.loc 1 218 0
 17655              		.cfi_startproc
 17656              		@ args = 0, pretend = 0, frame = 0
 17657              		@ frame_needed = 1, uses_anonymous_args = 0
 17658              		@ link register save eliminated.
 17659 0000 80B4     		push	{r7}
 17660              	.LCFI0:
 17661              		.cfi_def_cfa_offset 4
 17662 0002 00AF     		add	r7, sp, #0
 17663              		.cfi_offset 7, -4
 17664              	.LCFI1:
 17665              		.cfi_def_cfa_register 7
 219:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set HSION bit */
 220:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
 17666              		.loc 1 220 0
 17667 0004 154B     		ldr	r3, .L2
 17668 0006 154A     		ldr	r2, .L2
 17669 0008 1268     		ldr	r2, [r2, #0]
 17670 000a 42F00102 		orr	r2, r2, #1
 17671 000e 1A60     		str	r2, [r3, #0]
 221:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 222:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 223:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 224:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
 17672              		.loc 1 224 0
 17673 0010 124A     		ldr	r2, .L2
 17674 0012 124B     		ldr	r3, .L2
 17675 0014 5968     		ldr	r1, [r3, #4]
 17676 0016 124B     		ldr	r3, .L2+4
 17677 0018 01EA0303 		and	r3, r1, r3
 17678 001c 5360     		str	r3, [r2, #4]
 225:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 226:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 227:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 228:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 229:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 230:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
 17679              		.loc 1 230 0
 17680 001e 0F4A     		ldr	r2, .L2
 17681 0020 0E4B     		ldr	r3, .L2
 17682 0022 1B68     		ldr	r3, [r3, #0]
 17683 0024 23F08473 		bic	r3, r3, #17301504
 17684 0028 23F48033 		bic	r3, r3, #65536
 17685 002c 1360     		str	r3, [r2, #0]
 231:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 232:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 233:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 17686              		.loc 1 233 0
 17687 002e 0B4B     		ldr	r3, .L2
 17688 0030 0A4A     		ldr	r2, .L2
 17689 0032 1268     		ldr	r2, [r2, #0]
 17690 0034 22F48022 		bic	r2, r2, #262144
 17691 0038 1A60     		str	r2, [r3, #0]
 234:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 235:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 236:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
 17692              		.loc 1 236 0
 17693 003a 084B     		ldr	r3, .L2
 17694 003c 074A     		ldr	r2, .L2
 17695 003e 5268     		ldr	r2, [r2, #4]
 17696 0040 22F4FE02 		bic	r2, r2, #8323072
 17697 0044 5A60     		str	r2, [r3, #4]
 237:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 238:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 239:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 240:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 241:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 242:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 243:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 244:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 245:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 246:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 247:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 248:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 249:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 17698              		.loc 1 249 0
 17699 0046 054B     		ldr	r3, .L2
 17700 0048 4FF41F02 		mov	r2, #10420224
 17701 004c 9A60     		str	r2, [r3, #8]
 250:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 251:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 252:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 17702              		.loc 1 252 0
 17703 004e 034B     		ldr	r3, .L2
 17704 0050 4FF00002 		mov	r2, #0
 17705 0054 DA62     		str	r2, [r3, #44]
 253:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 254:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 255:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 256:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 257:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 258:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17706              		.loc 1 258 0
 17707 0056 BD46     		mov	sp, r7
 17708 0058 80BC     		pop	{r7}
 17709 005a 7047     		bx	lr
 17710              	.L3:
 17711              		.align	2
 17712              	.L2:
 17713 005c 00100240 		.word	1073876992
 17714 0060 0000FFF8 		.word	-117506048
 17715              		.cfi_endproc
 17716              	.LFE29:
 17718              		.section	.text.RCC_HSEConfig,"ax",%progbits
 17719              		.align	2
 17720              		.global	RCC_HSEConfig
 17721              		.thumb
 17722              		.thumb_func
 17724              	RCC_HSEConfig:
 17725              	.LFB30:
 259:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 260:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 261:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 262:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 263:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 264:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 265:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 266:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 267:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 268:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 269:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 270:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 271:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17726              		.loc 1 271 0
 17727              		.cfi_startproc
 17728              		@ args = 0, pretend = 0, frame = 8
 17729              		@ frame_needed = 1, uses_anonymous_args = 0
 17730              		@ link register save eliminated.
 17731 0000 80B4     		push	{r7}
 17732              	.LCFI2:
 17733              		.cfi_def_cfa_offset 4
 17734 0002 83B0     		sub	sp, sp, #12
 17735              	.LCFI3:
 17736              		.cfi_def_cfa_offset 16
 17737 0004 00AF     		add	r7, sp, #0
 17738              		.cfi_offset 7, -4
 17739              	.LCFI4:
 17740              		.cfi_def_cfa_register 7
 17741 0006 7860     		str	r0, [r7, #4]
 272:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 273:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 274:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 275:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 276:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
 17742              		.loc 1 276 0
 17743 0008 134B     		ldr	r3, .L9
 17744 000a 134A     		ldr	r2, .L9
 17745 000c 1268     		ldr	r2, [r2, #0]
 17746 000e 22F48032 		bic	r2, r2, #65536
 17747 0012 1A60     		str	r2, [r3, #0]
 277:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 278:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 17748              		.loc 1 278 0
 17749 0014 104B     		ldr	r3, .L9
 17750 0016 104A     		ldr	r2, .L9
 17751 0018 1268     		ldr	r2, [r2, #0]
 17752 001a 22F48022 		bic	r2, r2, #262144
 17753 001e 1A60     		str	r2, [r3, #0]
 279:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 280:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch(RCC_HSE)
 17754              		.loc 1 280 0
 17755 0020 7B68     		ldr	r3, [r7, #4]
 17756 0022 B3F5803F 		cmp	r3, #65536
 17757 0026 03D0     		beq	.L6
 17758 0028 B3F5802F 		cmp	r3, #262144
 17759 002c 07D0     		beq	.L7
 281:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 282:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 283:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set HSEON bit */
 284:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 285:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 286:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 287:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 288:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 289:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 290:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 291:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 292:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
 293:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 17760              		.loc 1 293 0
 17761 002e 0DE0     		b	.L4
 17762              	.L6:
 284:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 17763              		.loc 1 284 0
 17764 0030 094B     		ldr	r3, .L9
 17765 0032 094A     		ldr	r2, .L9
 17766 0034 1268     		ldr	r2, [r2, #0]
 17767 0036 42F48032 		orr	r2, r2, #65536
 17768 003a 1A60     		str	r2, [r3, #0]
 285:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 17769              		.loc 1 285 0
 17770 003c 06E0     		b	.L4
 17771              	.L7:
 289:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 17772              		.loc 1 289 0
 17773 003e 064B     		ldr	r3, .L9
 17774 0040 054A     		ldr	r2, .L9
 17775 0042 1268     		ldr	r2, [r2, #0]
 17776 0044 42F4A022 		orr	r2, r2, #327680
 17777 0048 1A60     		str	r2, [r3, #0]
 290:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 17778              		.loc 1 290 0
 17779 004a 00BF     		nop
 17780              	.L4:
 294:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 295:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17781              		.loc 1 295 0
 17782 004c 07F10C07 		add	r7, r7, #12
 17783 0050 BD46     		mov	sp, r7
 17784 0052 80BC     		pop	{r7}
 17785 0054 7047     		bx	lr
 17786              	.L10:
 17787 0056 00BF     		.align	2
 17788              	.L9:
 17789 0058 00100240 		.word	1073876992
 17790              		.cfi_endproc
 17791              	.LFE30:
 17793              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 17794              		.align	2
 17795              		.global	RCC_WaitForHSEStartUp
 17796              		.thumb
 17797              		.thumb_func
 17799              	RCC_WaitForHSEStartUp:
 17800              	.LFB31:
 296:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 297:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 298:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 299:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 300:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 301:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 302:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 303:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 304:../StdPeripheralDriver/src/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 305:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17801              		.loc 1 305 0
 17802              		.cfi_startproc
 17803              		@ args = 0, pretend = 0, frame = 8
 17804              		@ frame_needed = 1, uses_anonymous_args = 0
 17805 0000 80B5     		push	{r7, lr}
 17806              	.LCFI5:
 17807              		.cfi_def_cfa_offset 8
 17808 0002 82B0     		sub	sp, sp, #8
 17809              	.LCFI6:
 17810              		.cfi_def_cfa_offset 16
 17811 0004 00AF     		add	r7, sp, #0
 17812              		.cfi_offset 14, -4
 17813              		.cfi_offset 7, -8
 17814              	.LCFI7:
 17815              		.cfi_def_cfa_register 7
 306:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 17816              		.loc 1 306 0
 17817 0006 4FF00003 		mov	r3, #0
 17818 000a 3B60     		str	r3, [r7, #0]
 307:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 17819              		.loc 1 307 0
 17820 000c 4FF00003 		mov	r3, #0
 17821 0010 FB71     		strb	r3, [r7, #7]
 308:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 17822              		.loc 1 308 0
 17823 0012 4FF00003 		mov	r3, #0
 17824 0016 BB71     		strb	r3, [r7, #6]
 17825              	.L13:
 309:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 310:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 311:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   do
 312:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 313:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 17826              		.loc 1 313 0 discriminator 1
 17827 0018 4FF03100 		mov	r0, #49
 17828 001c FFF7FEFF 		bl	RCC_GetFlagStatus
 17829 0020 0346     		mov	r3, r0
 17830 0022 BB71     		strb	r3, [r7, #6]
 314:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     StartUpCounter++;  
 17831              		.loc 1 314 0 discriminator 1
 17832 0024 3B68     		ldr	r3, [r7, #0]
 17833 0026 03F10103 		add	r3, r3, #1
 17834 002a 3B60     		str	r3, [r7, #0]
 315:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 17835              		.loc 1 315 0 discriminator 1
 17836 002c 3B68     		ldr	r3, [r7, #0]
 17837 002e B3F5A06F 		cmp	r3, #1280
 17838 0032 02D0     		beq	.L12
 17839 0034 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 17840 0036 002B     		cmp	r3, #0
 17841 0038 EED0     		beq	.L13
 17842              	.L12:
 316:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 317:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 17843              		.loc 1 317 0
 17844 003a 4FF03100 		mov	r0, #49
 17845 003e FFF7FEFF 		bl	RCC_GetFlagStatus
 17846 0042 0346     		mov	r3, r0
 17847 0044 002B     		cmp	r3, #0
 17848 0046 03D0     		beq	.L14
 318:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 319:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     status = SUCCESS;
 17849              		.loc 1 319 0
 17850 0048 4FF00103 		mov	r3, #1
 17851 004c FB71     		strb	r3, [r7, #7]
 17852 004e 02E0     		b	.L15
 17853              	.L14:
 320:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 321:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
 322:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 323:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     status = ERROR;
 17854              		.loc 1 323 0
 17855 0050 4FF00003 		mov	r3, #0
 17856 0054 FB71     		strb	r3, [r7, #7]
 17857              	.L15:
 324:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }  
 325:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return (status);
 17858              		.loc 1 325 0
 17859 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 326:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17860              		.loc 1 326 0
 17861 0058 1846     		mov	r0, r3
 17862 005a 07F10807 		add	r7, r7, #8
 17863 005e BD46     		mov	sp, r7
 17864 0060 80BD     		pop	{r7, pc}
 17865              		.cfi_endproc
 17866              	.LFE31:
 17868 0062 00BF     		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 17869              		.align	2
 17870              		.global	RCC_AdjustHSICalibrationValue
 17871              		.thumb
 17872              		.thumb_func
 17874              	RCC_AdjustHSICalibrationValue:
 17875              	.LFB32:
 327:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 328:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 329:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 330:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 331:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 332:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 333:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 334:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 335:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17876              		.loc 1 335 0
 17877              		.cfi_startproc
 17878              		@ args = 0, pretend = 0, frame = 16
 17879              		@ frame_needed = 1, uses_anonymous_args = 0
 17880              		@ link register save eliminated.
 17881 0000 80B4     		push	{r7}
 17882              	.LCFI8:
 17883              		.cfi_def_cfa_offset 4
 17884 0002 85B0     		sub	sp, sp, #20
 17885              	.LCFI9:
 17886              		.cfi_def_cfa_offset 24
 17887 0004 00AF     		add	r7, sp, #0
 17888              		.cfi_offset 7, -4
 17889              	.LCFI10:
 17890              		.cfi_def_cfa_register 7
 17891 0006 0346     		mov	r3, r0
 17892 0008 FB71     		strb	r3, [r7, #7]
 336:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 17893              		.loc 1 336 0
 17894 000a 4FF00003 		mov	r3, #0
 17895 000e FB60     		str	r3, [r7, #12]
 337:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 338:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 339:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 17896              		.loc 1 339 0
 17897 0010 0A4B     		ldr	r3, .L17
 17898 0012 1B68     		ldr	r3, [r3, #0]
 17899 0014 FB60     		str	r3, [r7, #12]
 340:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 17900              		.loc 1 341 0
 17901 0016 FB68     		ldr	r3, [r7, #12]
 17902 0018 23F0F803 		bic	r3, r3, #248
 17903 001c FB60     		str	r3, [r7, #12]
 342:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 343:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 17904              		.loc 1 343 0
 17905 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 17906 0020 4FEAC303 		lsl	r3, r3, #3
 17907 0024 FA68     		ldr	r2, [r7, #12]
 17908 0026 42EA0303 		orr	r3, r2, r3
 17909 002a FB60     		str	r3, [r7, #12]
 344:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 345:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 17910              		.loc 1 345 0
 17911 002c 034B     		ldr	r3, .L17
 17912 002e FA68     		ldr	r2, [r7, #12]
 17913 0030 1A60     		str	r2, [r3, #0]
 346:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17914              		.loc 1 346 0
 17915 0032 07F11407 		add	r7, r7, #20
 17916 0036 BD46     		mov	sp, r7
 17917 0038 80BC     		pop	{r7}
 17918 003a 7047     		bx	lr
 17919              	.L18:
 17920              		.align	2
 17921              	.L17:
 17922 003c 00100240 		.word	1073876992
 17923              		.cfi_endproc
 17924              	.LFE32:
 17926              		.section	.text.RCC_HSICmd,"ax",%progbits
 17927              		.align	2
 17928              		.global	RCC_HSICmd
 17929              		.thumb
 17930              		.thumb_func
 17932              	RCC_HSICmd:
 17933              	.LFB33:
 347:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 348:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 349:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 350:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 351:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 352:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 353:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 354:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17934              		.loc 1 355 0
 17935              		.cfi_startproc
 17936              		@ args = 0, pretend = 0, frame = 8
 17937              		@ frame_needed = 1, uses_anonymous_args = 0
 17938              		@ link register save eliminated.
 17939 0000 80B4     		push	{r7}
 17940              	.LCFI11:
 17941              		.cfi_def_cfa_offset 4
 17942 0002 83B0     		sub	sp, sp, #12
 17943              	.LCFI12:
 17944              		.cfi_def_cfa_offset 16
 17945 0004 00AF     		add	r7, sp, #0
 17946              		.cfi_offset 7, -4
 17947              	.LCFI13:
 17948              		.cfi_def_cfa_register 7
 17949 0006 0346     		mov	r3, r0
 17950 0008 FB71     		strb	r3, [r7, #7]
 356:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 357:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 358:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 17951              		.loc 1 358 0
 17952 000a 044B     		ldr	r3, .L20
 17953 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 17954 000e 1A60     		str	r2, [r3, #0]
 359:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 17955              		.loc 1 359 0
 17956 0010 07F10C07 		add	r7, r7, #12
 17957 0014 BD46     		mov	sp, r7
 17958 0016 80BC     		pop	{r7}
 17959 0018 7047     		bx	lr
 17960              	.L21:
 17961 001a 00BF     		.align	2
 17962              	.L20:
 17963 001c 00004242 		.word	1111621632
 17964              		.cfi_endproc
 17965              	.LFE33:
 17967              		.section	.text.RCC_PLLConfig,"ax",%progbits
 17968              		.align	2
 17969              		.global	RCC_PLLConfig
 17970              		.thumb
 17971              		.thumb_func
 17973              	RCC_PLLConfig:
 17974              	.LFB34:
 360:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 361:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 362:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 363:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 364:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 365:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 366:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 367:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 368:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 369:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 370:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 371:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 372:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 373:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 374:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 375:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 376:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 377:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 378:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 379:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 17975              		.loc 1 379 0
 17976              		.cfi_startproc
 17977              		@ args = 0, pretend = 0, frame = 16
 17978              		@ frame_needed = 1, uses_anonymous_args = 0
 17979              		@ link register save eliminated.
 17980 0000 80B4     		push	{r7}
 17981              	.LCFI14:
 17982              		.cfi_def_cfa_offset 4
 17983 0002 85B0     		sub	sp, sp, #20
 17984              	.LCFI15:
 17985              		.cfi_def_cfa_offset 24
 17986 0004 00AF     		add	r7, sp, #0
 17987              		.cfi_offset 7, -4
 17988              	.LCFI16:
 17989              		.cfi_def_cfa_register 7
 17990 0006 7860     		str	r0, [r7, #4]
 17991 0008 3960     		str	r1, [r7, #0]
 380:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 17992              		.loc 1 380 0
 17993 000a 4FF00003 		mov	r3, #0
 17994 000e FB60     		str	r3, [r7, #12]
 381:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 382:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 383:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 384:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 385:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 386:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 17995              		.loc 1 386 0
 17996 0010 0B4B     		ldr	r3, .L23
 17997 0012 5B68     		ldr	r3, [r3, #4]
 17998 0014 FB60     		str	r3, [r7, #12]
 387:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 388:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 17999              		.loc 1 388 0
 18000 0016 FB68     		ldr	r3, [r7, #12]
 18001 0018 23F47413 		bic	r3, r3, #3997696
 18002 001c FB60     		str	r3, [r7, #12]
 389:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 390:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 18003              		.loc 1 390 0
 18004 001e 7A68     		ldr	r2, [r7, #4]
 18005 0020 3B68     		ldr	r3, [r7, #0]
 18006 0022 42EA0303 		orr	r3, r2, r3
 18007 0026 FA68     		ldr	r2, [r7, #12]
 18008 0028 42EA0303 		orr	r3, r2, r3
 18009 002c FB60     		str	r3, [r7, #12]
 391:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 392:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18010              		.loc 1 392 0
 18011 002e 044B     		ldr	r3, .L23
 18012 0030 FA68     		ldr	r2, [r7, #12]
 18013 0032 5A60     		str	r2, [r3, #4]
 393:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18014              		.loc 1 393 0
 18015 0034 07F11407 		add	r7, r7, #20
 18016 0038 BD46     		mov	sp, r7
 18017 003a 80BC     		pop	{r7}
 18018 003c 7047     		bx	lr
 18019              	.L24:
 18020 003e 00BF     		.align	2
 18021              	.L23:
 18022 0040 00100240 		.word	1073876992
 18023              		.cfi_endproc
 18024              	.LFE34:
 18026              		.section	.text.RCC_PLLCmd,"ax",%progbits
 18027              		.align	2
 18028              		.global	RCC_PLLCmd
 18029              		.thumb
 18030              		.thumb_func
 18032              	RCC_PLLCmd:
 18033              	.LFB35:
 394:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 395:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 396:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 397:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 398:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
 399:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 400:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 401:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 402:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18034              		.loc 1 402 0
 18035              		.cfi_startproc
 18036              		@ args = 0, pretend = 0, frame = 8
 18037              		@ frame_needed = 1, uses_anonymous_args = 0
 18038              		@ link register save eliminated.
 18039 0000 80B4     		push	{r7}
 18040              	.LCFI17:
 18041              		.cfi_def_cfa_offset 4
 18042 0002 83B0     		sub	sp, sp, #12
 18043              	.LCFI18:
 18044              		.cfi_def_cfa_offset 16
 18045 0004 00AF     		add	r7, sp, #0
 18046              		.cfi_offset 7, -4
 18047              	.LCFI19:
 18048              		.cfi_def_cfa_register 7
 18049 0006 0346     		mov	r3, r0
 18050 0008 FB71     		strb	r3, [r7, #7]
 403:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 404:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 405:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 406:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 18051              		.loc 1 406 0
 18052 000a 044B     		ldr	r3, .L26
 18053 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 18054 000e 1A60     		str	r2, [r3, #0]
 407:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18055              		.loc 1 407 0
 18056 0010 07F10C07 		add	r7, r7, #12
 18057 0014 BD46     		mov	sp, r7
 18058 0016 80BC     		pop	{r7}
 18059 0018 7047     		bx	lr
 18060              	.L27:
 18061 001a 00BF     		.align	2
 18062              	.L26:
 18063 001c 60004242 		.word	1111621728
 18064              		.cfi_endproc
 18065              	.LFE35:
 18067              		.section	.text.RCC_PREDIV1Config,"ax",%progbits
 18068              		.align	2
 18069              		.global	RCC_PREDIV1Config
 18070              		.thumb
 18071              		.thumb_func
 18073              	RCC_PREDIV1Config:
 18074              	.LFB36:
 408:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 409:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 410:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 411:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 412:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 413:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 414:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 415:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     devices.
 416:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 417:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 418:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 419:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 420:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 421:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 422:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 423:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 424:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 425:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 426:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 427:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18075              		.loc 1 427 0
 18076              		.cfi_startproc
 18077              		@ args = 0, pretend = 0, frame = 16
 18078              		@ frame_needed = 1, uses_anonymous_args = 0
 18079              		@ link register save eliminated.
 18080 0000 80B4     		push	{r7}
 18081              	.LCFI20:
 18082              		.cfi_def_cfa_offset 4
 18083 0002 85B0     		sub	sp, sp, #20
 18084              	.LCFI21:
 18085              		.cfi_def_cfa_offset 24
 18086 0004 00AF     		add	r7, sp, #0
 18087              		.cfi_offset 7, -4
 18088              	.LCFI22:
 18089              		.cfi_def_cfa_register 7
 18090 0006 7860     		str	r0, [r7, #4]
 18091 0008 3960     		str	r1, [r7, #0]
 428:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18092              		.loc 1 428 0
 18093 000a 4FF00003 		mov	r3, #0
 18094 000e FB60     		str	r3, [r7, #12]
 429:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 430:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 431:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 432:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 433:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 434:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 18095              		.loc 1 434 0
 18096 0010 0C4B     		ldr	r3, .L29
 18097 0012 DB6A     		ldr	r3, [r3, #44]
 18098 0014 FB60     		str	r3, [r7, #12]
 435:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 436:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 18099              		.loc 1 436 0
 18100 0016 FB68     		ldr	r3, [r7, #12]
 18101 0018 23F48033 		bic	r3, r3, #65536
 18102 001c 23F00F03 		bic	r3, r3, #15
 18103 0020 FB60     		str	r3, [r7, #12]
 437:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 438:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 18104              		.loc 1 438 0
 18105 0022 7A68     		ldr	r2, [r7, #4]
 18106 0024 3B68     		ldr	r3, [r7, #0]
 18107 0026 42EA0303 		orr	r3, r2, r3
 18108 002a FA68     		ldr	r2, [r7, #12]
 18109 002c 42EA0303 		orr	r3, r2, r3
 18110 0030 FB60     		str	r3, [r7, #12]
 439:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 440:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 18111              		.loc 1 440 0
 18112 0032 044B     		ldr	r3, .L29
 18113 0034 FA68     		ldr	r2, [r7, #12]
 18114 0036 DA62     		str	r2, [r3, #44]
 441:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18115              		.loc 1 441 0
 18116 0038 07F11407 		add	r7, r7, #20
 18117 003c BD46     		mov	sp, r7
 18118 003e 80BC     		pop	{r7}
 18119 0040 7047     		bx	lr
 18120              	.L30:
 18121 0042 00BF     		.align	2
 18122              	.L29:
 18123 0044 00100240 		.word	1073876992
 18124              		.cfi_endproc
 18125              	.LFE36:
 18127              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 18128              		.align	2
 18129              		.global	RCC_SYSCLKConfig
 18130              		.thumb
 18131              		.thumb_func
 18133              	RCC_SYSCLKConfig:
 18134              	.LFB37:
 442:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 443:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 444:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 445:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 446:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 447:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 448:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 449:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 450:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 451:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 452:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 453:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 454:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 455:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 456:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 457:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 458:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 459:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 460:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 461:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 462:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 463:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 464:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 465:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 466:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 467:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 468:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 469:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 470:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 471:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 472:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 473:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 474:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 475:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 476:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 477:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 478:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 479:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 480:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 481:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 482:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 483:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 484:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 485:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 486:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 487:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 488:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 489:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 490:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 491:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 492:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 493:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 494:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 495:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 496:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 497:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 498:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 499:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 500:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 501:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 502:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 503:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 504:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 505:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 506:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 507:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 508:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 509:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 510:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 511:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 512:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 513:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 514:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 515:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 516:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note 
 517:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 518:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 519:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 520:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 521:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 522:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 523:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 524:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 525:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 526:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 527:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 528:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 529:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 530:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 531:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 532:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 533:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 534:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 535:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 536:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 537:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 538:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 539:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 540:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 541:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 542:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 543:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 544:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 545:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 546:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 547:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 548:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 549:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 550:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 551:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 552:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 553:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 554:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 555:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 556:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 557:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 558:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 559:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 560:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 561:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 562:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 563:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 564:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 565:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18135              		.loc 1 565 0
 18136              		.cfi_startproc
 18137              		@ args = 0, pretend = 0, frame = 16
 18138              		@ frame_needed = 1, uses_anonymous_args = 0
 18139              		@ link register save eliminated.
 18140 0000 80B4     		push	{r7}
 18141              	.LCFI23:
 18142              		.cfi_def_cfa_offset 4
 18143 0002 85B0     		sub	sp, sp, #20
 18144              	.LCFI24:
 18145              		.cfi_def_cfa_offset 24
 18146 0004 00AF     		add	r7, sp, #0
 18147              		.cfi_offset 7, -4
 18148              	.LCFI25:
 18149              		.cfi_def_cfa_register 7
 18150 0006 7860     		str	r0, [r7, #4]
 566:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18151              		.loc 1 566 0
 18152 0008 4FF00003 		mov	r3, #0
 18153 000c FB60     		str	r3, [r7, #12]
 567:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 568:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 569:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 18154              		.loc 1 569 0
 18155 000e 0A4B     		ldr	r3, .L32
 18156 0010 5B68     		ldr	r3, [r3, #4]
 18157 0012 FB60     		str	r3, [r7, #12]
 570:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 571:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 18158              		.loc 1 571 0
 18159 0014 FB68     		ldr	r3, [r7, #12]
 18160 0016 23F00303 		bic	r3, r3, #3
 18161 001a FB60     		str	r3, [r7, #12]
 572:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 573:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 18162              		.loc 1 573 0
 18163 001c FA68     		ldr	r2, [r7, #12]
 18164 001e 7B68     		ldr	r3, [r7, #4]
 18165 0020 42EA0303 		orr	r3, r2, r3
 18166 0024 FB60     		str	r3, [r7, #12]
 574:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 575:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18167              		.loc 1 575 0
 18168 0026 044B     		ldr	r3, .L32
 18169 0028 FA68     		ldr	r2, [r7, #12]
 18170 002a 5A60     		str	r2, [r3, #4]
 576:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18171              		.loc 1 576 0
 18172 002c 07F11407 		add	r7, r7, #20
 18173 0030 BD46     		mov	sp, r7
 18174 0032 80BC     		pop	{r7}
 18175 0034 7047     		bx	lr
 18176              	.L33:
 18177 0036 00BF     		.align	2
 18178              	.L32:
 18179 0038 00100240 		.word	1073876992
 18180              		.cfi_endproc
 18181              	.LFE37:
 18183              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 18184              		.align	2
 18185              		.global	RCC_GetSYSCLKSource
 18186              		.thumb
 18187              		.thumb_func
 18189              	RCC_GetSYSCLKSource:
 18190              	.LFB38:
 577:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 578:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 579:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 580:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
 581:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 582:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   be one of the following:
 583:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 584:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 585:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 586:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 587:../StdPeripheralDriver/src/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 588:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18191              		.loc 1 588 0
 18192              		.cfi_startproc
 18193              		@ args = 0, pretend = 0, frame = 0
 18194              		@ frame_needed = 1, uses_anonymous_args = 0
 18195              		@ link register save eliminated.
 18196 0000 80B4     		push	{r7}
 18197              	.LCFI26:
 18198              		.cfi_def_cfa_offset 4
 18199 0002 00AF     		add	r7, sp, #0
 18200              		.cfi_offset 7, -4
 18201              	.LCFI27:
 18202              		.cfi_def_cfa_register 7
 589:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 18203              		.loc 1 589 0
 18204 0004 044B     		ldr	r3, .L35
 18205 0006 5B68     		ldr	r3, [r3, #4]
 18206 0008 DBB2     		uxtb	r3, r3
 18207 000a 03F00C03 		and	r3, r3, #12
 18208 000e DBB2     		uxtb	r3, r3
 590:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18209              		.loc 1 590 0
 18210 0010 1846     		mov	r0, r3
 18211 0012 BD46     		mov	sp, r7
 18212 0014 80BC     		pop	{r7}
 18213 0016 7047     		bx	lr
 18214              	.L36:
 18215              		.align	2
 18216              	.L35:
 18217 0018 00100240 		.word	1073876992
 18218              		.cfi_endproc
 18219              	.LFE38:
 18221              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 18222              		.align	2
 18223              		.global	RCC_HCLKConfig
 18224              		.thumb
 18225              		.thumb_func
 18227              	RCC_HCLKConfig:
 18228              	.LFB39:
 591:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 592:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 593:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 594:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 595:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 596:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 597:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 598:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 599:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 600:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 601:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 602:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 603:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 604:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 605:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 606:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 607:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 608:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 609:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18229              		.loc 1 609 0
 18230              		.cfi_startproc
 18231              		@ args = 0, pretend = 0, frame = 16
 18232              		@ frame_needed = 1, uses_anonymous_args = 0
 18233              		@ link register save eliminated.
 18234 0000 80B4     		push	{r7}
 18235              	.LCFI28:
 18236              		.cfi_def_cfa_offset 4
 18237 0002 85B0     		sub	sp, sp, #20
 18238              	.LCFI29:
 18239              		.cfi_def_cfa_offset 24
 18240 0004 00AF     		add	r7, sp, #0
 18241              		.cfi_offset 7, -4
 18242              	.LCFI30:
 18243              		.cfi_def_cfa_register 7
 18244 0006 7860     		str	r0, [r7, #4]
 610:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18245              		.loc 1 610 0
 18246 0008 4FF00003 		mov	r3, #0
 18247 000c FB60     		str	r3, [r7, #12]
 611:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 612:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 613:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 18248              		.loc 1 613 0
 18249 000e 0A4B     		ldr	r3, .L38
 18250 0010 5B68     		ldr	r3, [r3, #4]
 18251 0012 FB60     		str	r3, [r7, #12]
 614:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 615:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 18252              		.loc 1 615 0
 18253 0014 FB68     		ldr	r3, [r7, #12]
 18254 0016 23F0F003 		bic	r3, r3, #240
 18255 001a FB60     		str	r3, [r7, #12]
 616:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 617:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 18256              		.loc 1 617 0
 18257 001c FA68     		ldr	r2, [r7, #12]
 18258 001e 7B68     		ldr	r3, [r7, #4]
 18259 0020 42EA0303 		orr	r3, r2, r3
 18260 0024 FB60     		str	r3, [r7, #12]
 618:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 619:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18261              		.loc 1 619 0
 18262 0026 044B     		ldr	r3, .L38
 18263 0028 FA68     		ldr	r2, [r7, #12]
 18264 002a 5A60     		str	r2, [r3, #4]
 620:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18265              		.loc 1 620 0
 18266 002c 07F11407 		add	r7, r7, #20
 18267 0030 BD46     		mov	sp, r7
 18268 0032 80BC     		pop	{r7}
 18269 0034 7047     		bx	lr
 18270              	.L39:
 18271 0036 00BF     		.align	2
 18272              	.L38:
 18273 0038 00100240 		.word	1073876992
 18274              		.cfi_endproc
 18275              	.LFE39:
 18277              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 18278              		.align	2
 18279              		.global	RCC_PCLK1Config
 18280              		.thumb
 18281              		.thumb_func
 18283              	RCC_PCLK1Config:
 18284              	.LFB40:
 621:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 622:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 623:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 624:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 625:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 626:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 627:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 628:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 629:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 630:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 631:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 632:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 633:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 634:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 635:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18285              		.loc 1 635 0
 18286              		.cfi_startproc
 18287              		@ args = 0, pretend = 0, frame = 16
 18288              		@ frame_needed = 1, uses_anonymous_args = 0
 18289              		@ link register save eliminated.
 18290 0000 80B4     		push	{r7}
 18291              	.LCFI31:
 18292              		.cfi_def_cfa_offset 4
 18293 0002 85B0     		sub	sp, sp, #20
 18294              	.LCFI32:
 18295              		.cfi_def_cfa_offset 24
 18296 0004 00AF     		add	r7, sp, #0
 18297              		.cfi_offset 7, -4
 18298              	.LCFI33:
 18299              		.cfi_def_cfa_register 7
 18300 0006 7860     		str	r0, [r7, #4]
 636:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18301              		.loc 1 636 0
 18302 0008 4FF00003 		mov	r3, #0
 18303 000c FB60     		str	r3, [r7, #12]
 637:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 638:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 639:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 18304              		.loc 1 639 0
 18305 000e 0A4B     		ldr	r3, .L41
 18306 0010 5B68     		ldr	r3, [r3, #4]
 18307 0012 FB60     		str	r3, [r7, #12]
 640:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 641:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 18308              		.loc 1 641 0
 18309 0014 FB68     		ldr	r3, [r7, #12]
 18310 0016 23F4E063 		bic	r3, r3, #1792
 18311 001a FB60     		str	r3, [r7, #12]
 642:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 643:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 18312              		.loc 1 643 0
 18313 001c FA68     		ldr	r2, [r7, #12]
 18314 001e 7B68     		ldr	r3, [r7, #4]
 18315 0020 42EA0303 		orr	r3, r2, r3
 18316 0024 FB60     		str	r3, [r7, #12]
 644:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 645:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18317              		.loc 1 645 0
 18318 0026 044B     		ldr	r3, .L41
 18319 0028 FA68     		ldr	r2, [r7, #12]
 18320 002a 5A60     		str	r2, [r3, #4]
 646:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18321              		.loc 1 646 0
 18322 002c 07F11407 		add	r7, r7, #20
 18323 0030 BD46     		mov	sp, r7
 18324 0032 80BC     		pop	{r7}
 18325 0034 7047     		bx	lr
 18326              	.L42:
 18327 0036 00BF     		.align	2
 18328              	.L41:
 18329 0038 00100240 		.word	1073876992
 18330              		.cfi_endproc
 18331              	.LFE40:
 18333              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 18334              		.align	2
 18335              		.global	RCC_PCLK2Config
 18336              		.thumb
 18337              		.thumb_func
 18339              	RCC_PCLK2Config:
 18340              	.LFB41:
 647:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 648:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 649:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 650:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 651:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 652:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 653:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 654:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 655:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 656:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 657:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 658:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 659:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 660:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 661:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18341              		.loc 1 661 0
 18342              		.cfi_startproc
 18343              		@ args = 0, pretend = 0, frame = 16
 18344              		@ frame_needed = 1, uses_anonymous_args = 0
 18345              		@ link register save eliminated.
 18346 0000 80B4     		push	{r7}
 18347              	.LCFI34:
 18348              		.cfi_def_cfa_offset 4
 18349 0002 85B0     		sub	sp, sp, #20
 18350              	.LCFI35:
 18351              		.cfi_def_cfa_offset 24
 18352 0004 00AF     		add	r7, sp, #0
 18353              		.cfi_offset 7, -4
 18354              	.LCFI36:
 18355              		.cfi_def_cfa_register 7
 18356 0006 7860     		str	r0, [r7, #4]
 662:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18357              		.loc 1 662 0
 18358 0008 4FF00003 		mov	r3, #0
 18359 000c FB60     		str	r3, [r7, #12]
 663:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 664:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 665:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 18360              		.loc 1 665 0
 18361 000e 0B4B     		ldr	r3, .L44
 18362 0010 5B68     		ldr	r3, [r3, #4]
 18363 0012 FB60     		str	r3, [r7, #12]
 666:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 667:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 18364              		.loc 1 667 0
 18365 0014 FB68     		ldr	r3, [r7, #12]
 18366 0016 23F46053 		bic	r3, r3, #14336
 18367 001a FB60     		str	r3, [r7, #12]
 668:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 669:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 18368              		.loc 1 669 0
 18369 001c 7B68     		ldr	r3, [r7, #4]
 18370 001e 4FEAC303 		lsl	r3, r3, #3
 18371 0022 FA68     		ldr	r2, [r7, #12]
 18372 0024 42EA0303 		orr	r3, r2, r3
 18373 0028 FB60     		str	r3, [r7, #12]
 670:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 671:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18374              		.loc 1 671 0
 18375 002a 044B     		ldr	r3, .L44
 18376 002c FA68     		ldr	r2, [r7, #12]
 18377 002e 5A60     		str	r2, [r3, #4]
 672:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18378              		.loc 1 672 0
 18379 0030 07F11407 		add	r7, r7, #20
 18380 0034 BD46     		mov	sp, r7
 18381 0036 80BC     		pop	{r7}
 18382 0038 7047     		bx	lr
 18383              	.L45:
 18384 003a 00BF     		.align	2
 18385              	.L44:
 18386 003c 00100240 		.word	1073876992
 18387              		.cfi_endproc
 18388              	.LFE41:
 18390              		.section	.text.RCC_ITConfig,"ax",%progbits
 18391              		.align	2
 18392              		.global	RCC_ITConfig
 18393              		.thumb
 18394              		.thumb_func
 18396              	RCC_ITConfig:
 18397              	.LFB42:
 673:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 674:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 675:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 676:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 677:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
 678:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 679:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values        
 680:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 681:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 682:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 683:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 684:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 685:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 686:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 687:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
 688:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 689:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values        
 690:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 691:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 692:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 693:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 694:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 695:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *       
 696:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 697:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 698:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 699:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 700:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 701:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18398              		.loc 1 701 0
 18399              		.cfi_startproc
 18400              		@ args = 0, pretend = 0, frame = 8
 18401              		@ frame_needed = 1, uses_anonymous_args = 0
 18402              		@ link register save eliminated.
 18403 0000 80B4     		push	{r7}
 18404              	.LCFI37:
 18405              		.cfi_def_cfa_offset 4
 18406 0002 83B0     		sub	sp, sp, #12
 18407              	.LCFI38:
 18408              		.cfi_def_cfa_offset 16
 18409 0004 00AF     		add	r7, sp, #0
 18410              		.cfi_offset 7, -4
 18411              	.LCFI39:
 18412              		.cfi_def_cfa_register 7
 18413 0006 0246     		mov	r2, r0
 18414 0008 0B46     		mov	r3, r1
 18415 000a FA71     		strb	r2, [r7, #7]
 18416 000c BB71     		strb	r3, [r7, #6]
 702:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 703:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 704:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 705:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 18417              		.loc 1 705 0
 18418 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 18419 0010 002B     		cmp	r3, #0
 18420 0012 09D0     		beq	.L47
 706:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 707:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 708:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 18421              		.loc 1 708 0
 18422 0014 0D4B     		ldr	r3, .L49
 18423 0016 0D4A     		ldr	r2, .L49
 18424 0018 1278     		ldrb	r2, [r2, #0]
 18425 001a D1B2     		uxtb	r1, r2
 18426 001c FA79     		ldrb	r2, [r7, #7]
 18427 001e 41EA0202 		orr	r2, r1, r2
 18428 0022 D2B2     		uxtb	r2, r2
 18429 0024 1A70     		strb	r2, [r3, #0]
 18430 0026 0BE0     		b	.L46
 18431              	.L47:
 709:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 710:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
 711:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 712:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 713:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 18432              		.loc 1 713 0
 18433 0028 084B     		ldr	r3, .L49
 18434 002a 084A     		ldr	r2, .L49
 18435 002c 1278     		ldrb	r2, [r2, #0]
 18436 002e D1B2     		uxtb	r1, r2
 18437 0030 FA79     		ldrb	r2, [r7, #7]
 18438 0032 6FEA0202 		mvn	r2, r2
 18439 0036 D2B2     		uxtb	r2, r2
 18440 0038 01EA0202 		and	r2, r1, r2
 18441 003c D2B2     		uxtb	r2, r2
 18442 003e 1A70     		strb	r2, [r3, #0]
 18443              	.L46:
 714:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 715:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18444              		.loc 1 715 0
 18445 0040 07F10C07 		add	r7, r7, #12
 18446 0044 BD46     		mov	sp, r7
 18447 0046 80BC     		pop	{r7}
 18448 0048 7047     		bx	lr
 18449              	.L50:
 18450 004a 00BF     		.align	2
 18451              	.L49:
 18452 004c 09100240 		.word	1073877001
 18453              		.cfi_endproc
 18454              	.LFE42:
 18456              		.section	.text.RCC_USBCLKConfig,"ax",%progbits
 18457              		.align	2
 18458              		.global	RCC_USBCLKConfig
 18459              		.thumb
 18460              		.thumb_func
 18462              	RCC_USBCLKConfig:
 18463              	.LFB43:
 716:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 717:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 718:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 719:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 720:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 721:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   derived from the PLL output.
 722:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 723:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 724:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *                                     clock source
 725:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 726:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 727:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 728:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 729:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18464              		.loc 1 729 0
 18465              		.cfi_startproc
 18466              		@ args = 0, pretend = 0, frame = 8
 18467              		@ frame_needed = 1, uses_anonymous_args = 0
 18468              		@ link register save eliminated.
 18469 0000 80B4     		push	{r7}
 18470              	.LCFI40:
 18471              		.cfi_def_cfa_offset 4
 18472 0002 83B0     		sub	sp, sp, #12
 18473              	.LCFI41:
 18474              		.cfi_def_cfa_offset 16
 18475 0004 00AF     		add	r7, sp, #0
 18476              		.cfi_offset 7, -4
 18477              	.LCFI42:
 18478              		.cfi_def_cfa_register 7
 18479 0006 7860     		str	r0, [r7, #4]
 730:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 731:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 732:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 733:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 18480              		.loc 1 733 0
 18481 0008 034B     		ldr	r3, .L52
 18482 000a 7A68     		ldr	r2, [r7, #4]
 18483 000c 1A60     		str	r2, [r3, #0]
 734:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18484              		.loc 1 734 0
 18485 000e 07F10C07 		add	r7, r7, #12
 18486 0012 BD46     		mov	sp, r7
 18487 0014 80BC     		pop	{r7}
 18488 0016 7047     		bx	lr
 18489              	.L53:
 18490              		.align	2
 18491              	.L52:
 18492 0018 D8004242 		.word	1111621848
 18493              		.cfi_endproc
 18494              	.LFE43:
 18496              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 18497              		.align	2
 18498              		.global	RCC_ADCCLKConfig
 18499              		.thumb
 18500              		.thumb_func
 18502              	RCC_ADCCLKConfig:
 18503              	.LFB44:
 735:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 736:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 737:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 738:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 739:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 740:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 741:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 742:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 743:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 745:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 746:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 747:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 748:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 749:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 750:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 751:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 752:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 753:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 754:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 755:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 756:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 757:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 758:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 759:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 760:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 761:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 762:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 763:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 764:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 765:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 766:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 767:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18504              		.loc 1 767 0
 18505              		.cfi_startproc
 18506              		@ args = 0, pretend = 0, frame = 16
 18507              		@ frame_needed = 1, uses_anonymous_args = 0
 18508              		@ link register save eliminated.
 18509 0000 80B4     		push	{r7}
 18510              	.LCFI43:
 18511              		.cfi_def_cfa_offset 4
 18512 0002 85B0     		sub	sp, sp, #20
 18513              	.LCFI44:
 18514              		.cfi_def_cfa_offset 24
 18515 0004 00AF     		add	r7, sp, #0
 18516              		.cfi_offset 7, -4
 18517              	.LCFI45:
 18518              		.cfi_def_cfa_register 7
 18519 0006 7860     		str	r0, [r7, #4]
 768:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 18520              		.loc 1 768 0
 18521 0008 4FF00003 		mov	r3, #0
 18522 000c FB60     		str	r3, [r7, #12]
 769:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 770:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 771:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 18523              		.loc 1 771 0
 18524 000e 0A4B     		ldr	r3, .L55
 18525 0010 5B68     		ldr	r3, [r3, #4]
 18526 0012 FB60     		str	r3, [r7, #12]
 772:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 773:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 18527              		.loc 1 773 0
 18528 0014 FB68     		ldr	r3, [r7, #12]
 18529 0016 23F44043 		bic	r3, r3, #49152
 18530 001a FB60     		str	r3, [r7, #12]
 774:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 775:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 18531              		.loc 1 775 0
 18532 001c FA68     		ldr	r2, [r7, #12]
 18533 001e 7B68     		ldr	r3, [r7, #4]
 18534 0020 42EA0303 		orr	r3, r2, r3
 18535 0024 FB60     		str	r3, [r7, #12]
 776:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Store the new value */
 777:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 18536              		.loc 1 777 0
 18537 0026 044B     		ldr	r3, .L55
 18538 0028 FA68     		ldr	r2, [r7, #12]
 18539 002a 5A60     		str	r2, [r3, #4]
 778:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18540              		.loc 1 778 0
 18541 002c 07F11407 		add	r7, r7, #20
 18542 0030 BD46     		mov	sp, r7
 18543 0032 80BC     		pop	{r7}
 18544 0034 7047     		bx	lr
 18545              	.L56:
 18546 0036 00BF     		.align	2
 18547              	.L55:
 18548 0038 00100240 		.word	1073876992
 18549              		.cfi_endproc
 18550              	.LFE44:
 18552              		.section	.text.RCC_LSEConfig,"ax",%progbits
 18553              		.align	2
 18554              		.global	RCC_LSEConfig
 18555              		.thumb
 18556              		.thumb_func
 18558              	RCC_LSEConfig:
 18559              	.LFB45:
 779:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 780:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 781:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 782:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 783:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 784:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 785:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 786:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 787:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 788:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 789:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 790:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 791:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 792:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 793:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 794:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 795:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 796:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 797:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 798:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 799:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 800:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 801:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 802:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note
 803:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 804:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 805:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 806:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 807:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 808:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 809:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 810:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 811:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 812:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 813:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 814:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 815:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 816:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 817:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 818:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 819:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 820:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 821:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 822:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 823:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 824:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 825:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 826:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 827:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 828:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 829:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 830:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18560              		.loc 1 830 0
 18561              		.cfi_startproc
 18562              		@ args = 0, pretend = 0, frame = 8
 18563              		@ frame_needed = 1, uses_anonymous_args = 0
 18564              		@ link register save eliminated.
 18565 0000 80B4     		push	{r7}
 18566              	.LCFI46:
 18567              		.cfi_def_cfa_offset 4
 18568 0002 83B0     		sub	sp, sp, #12
 18569              	.LCFI47:
 18570              		.cfi_def_cfa_offset 16
 18571 0004 00AF     		add	r7, sp, #0
 18572              		.cfi_offset 7, -4
 18573              	.LCFI48:
 18574              		.cfi_def_cfa_register 7
 18575 0006 0346     		mov	r3, r0
 18576 0008 FB71     		strb	r3, [r7, #7]
 831:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 832:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 833:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 834:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 835:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 18577              		.loc 1 835 0
 18578 000a 0E4B     		ldr	r3, .L62
 18579 000c 4FF00002 		mov	r2, #0
 18580 0010 1A70     		strb	r2, [r3, #0]
 836:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 837:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 18581              		.loc 1 837 0
 18582 0012 0C4B     		ldr	r3, .L62
 18583 0014 4FF00002 		mov	r2, #0
 18584 0018 1A70     		strb	r2, [r3, #0]
 838:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 839:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch(RCC_LSE)
 18585              		.loc 1 839 0
 18586 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 18587 001c 012B     		cmp	r3, #1
 18588 001e 02D0     		beq	.L59
 18589 0020 042B     		cmp	r3, #4
 18590 0022 05D0     		beq	.L60
 840:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 841:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 842:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set LSEON bit */
 843:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 844:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 845:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 846:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 847:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 848:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 849:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;            
 850:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 851:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
 852:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;      
 18591              		.loc 1 852 0
 18592 0024 09E0     		b	.L57
 18593              	.L59:
 843:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 18594              		.loc 1 843 0
 18595 0026 074B     		ldr	r3, .L62
 18596 0028 4FF00102 		mov	r2, #1
 18597 002c 1A70     		strb	r2, [r3, #0]
 844:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18598              		.loc 1 844 0
 18599 002e 04E0     		b	.L57
 18600              	.L60:
 848:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 18601              		.loc 1 848 0
 18602 0030 044B     		ldr	r3, .L62
 18603 0032 4FF00502 		mov	r2, #5
 18604 0036 1A70     		strb	r2, [r3, #0]
 849:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;            
 18605              		.loc 1 849 0
 18606 0038 00BF     		nop
 18607              	.L57:
 853:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
 854:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18608              		.loc 1 854 0
 18609 003a 07F10C07 		add	r7, r7, #12
 18610 003e BD46     		mov	sp, r7
 18611 0040 80BC     		pop	{r7}
 18612 0042 7047     		bx	lr
 18613              	.L63:
 18614              		.align	2
 18615              	.L62:
 18616 0044 20100240 		.word	1073877024
 18617              		.cfi_endproc
 18618              	.LFE45:
 18620              		.section	.text.RCC_LSICmd,"ax",%progbits
 18621              		.align	2
 18622              		.global	RCC_LSICmd
 18623              		.thumb
 18624              		.thumb_func
 18626              	RCC_LSICmd:
 18627              	.LFB46:
 855:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 856:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 857:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 858:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 859:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 860:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 861:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 862:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 863:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18628              		.loc 1 863 0
 18629              		.cfi_startproc
 18630              		@ args = 0, pretend = 0, frame = 8
 18631              		@ frame_needed = 1, uses_anonymous_args = 0
 18632              		@ link register save eliminated.
 18633 0000 80B4     		push	{r7}
 18634              	.LCFI49:
 18635              		.cfi_def_cfa_offset 4
 18636 0002 83B0     		sub	sp, sp, #12
 18637              	.LCFI50:
 18638              		.cfi_def_cfa_offset 16
 18639 0004 00AF     		add	r7, sp, #0
 18640              		.cfi_offset 7, -4
 18641              	.LCFI51:
 18642              		.cfi_def_cfa_register 7
 18643 0006 0346     		mov	r3, r0
 18644 0008 FB71     		strb	r3, [r7, #7]
 864:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 865:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 866:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 18645              		.loc 1 866 0
 18646 000a 044B     		ldr	r3, .L65
 18647 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 18648 000e 1A60     		str	r2, [r3, #0]
 867:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18649              		.loc 1 867 0
 18650 0010 07F10C07 		add	r7, r7, #12
 18651 0014 BD46     		mov	sp, r7
 18652 0016 80BC     		pop	{r7}
 18653 0018 7047     		bx	lr
 18654              	.L66:
 18655 001a 00BF     		.align	2
 18656              	.L65:
 18657 001c 80044242 		.word	1111622784
 18658              		.cfi_endproc
 18659              	.LFE46:
 18661              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 18662              		.align	2
 18663              		.global	RCC_RTCCLKConfig
 18664              		.thumb
 18665              		.thumb_func
 18667              	RCC_RTCCLKConfig:
 18668              	.LFB47:
 868:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 869:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 870:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 871:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 872:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 873:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 874:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 875:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 876:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 877:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 878:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 879:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 880:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18669              		.loc 1 880 0
 18670              		.cfi_startproc
 18671              		@ args = 0, pretend = 0, frame = 8
 18672              		@ frame_needed = 1, uses_anonymous_args = 0
 18673              		@ link register save eliminated.
 18674 0000 80B4     		push	{r7}
 18675              	.LCFI52:
 18676              		.cfi_def_cfa_offset 4
 18677 0002 83B0     		sub	sp, sp, #12
 18678              	.LCFI53:
 18679              		.cfi_def_cfa_offset 16
 18680 0004 00AF     		add	r7, sp, #0
 18681              		.cfi_offset 7, -4
 18682              	.LCFI54:
 18683              		.cfi_def_cfa_register 7
 18684 0006 7860     		str	r0, [r7, #4]
 881:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 882:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 883:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 884:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 18685              		.loc 1 884 0
 18686 0008 054B     		ldr	r3, .L68
 18687 000a 054A     		ldr	r2, .L68
 18688 000c 116A     		ldr	r1, [r2, #32]
 18689 000e 7A68     		ldr	r2, [r7, #4]
 18690 0010 41EA0202 		orr	r2, r1, r2
 18691 0014 1A62     		str	r2, [r3, #32]
 885:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18692              		.loc 1 885 0
 18693 0016 07F10C07 		add	r7, r7, #12
 18694 001a BD46     		mov	sp, r7
 18695 001c 80BC     		pop	{r7}
 18696 001e 7047     		bx	lr
 18697              	.L69:
 18698              		.align	2
 18699              	.L68:
 18700 0020 00100240 		.word	1073876992
 18701              		.cfi_endproc
 18702              	.LFE47:
 18704              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 18705              		.align	2
 18706              		.global	RCC_RTCCLKCmd
 18707              		.thumb
 18708              		.thumb_func
 18710              	RCC_RTCCLKCmd:
 18711              	.LFB48:
 886:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 887:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 888:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 889:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 890:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 891:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 892:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 893:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 894:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18712              		.loc 1 894 0
 18713              		.cfi_startproc
 18714              		@ args = 0, pretend = 0, frame = 8
 18715              		@ frame_needed = 1, uses_anonymous_args = 0
 18716              		@ link register save eliminated.
 18717 0000 80B4     		push	{r7}
 18718              	.LCFI55:
 18719              		.cfi_def_cfa_offset 4
 18720 0002 83B0     		sub	sp, sp, #12
 18721              	.LCFI56:
 18722              		.cfi_def_cfa_offset 16
 18723 0004 00AF     		add	r7, sp, #0
 18724              		.cfi_offset 7, -4
 18725              	.LCFI57:
 18726              		.cfi_def_cfa_register 7
 18727 0006 0346     		mov	r3, r0
 18728 0008 FB71     		strb	r3, [r7, #7]
 895:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
 896:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 897:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 18729              		.loc 1 897 0
 18730 000a 044B     		ldr	r3, .L71
 18731 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 18732 000e 1A60     		str	r2, [r3, #0]
 898:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18733              		.loc 1 898 0
 18734 0010 07F10C07 		add	r7, r7, #12
 18735 0014 BD46     		mov	sp, r7
 18736 0016 80BC     		pop	{r7}
 18737 0018 7047     		bx	lr
 18738              	.L72:
 18739 001a 00BF     		.align	2
 18740              	.L71:
 18741 001c 3C044242 		.word	1111622716
 18742              		.cfi_endproc
 18743              	.LFE48:
 18745              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 18746              		.align	2
 18747              		.global	RCC_GetClocksFreq
 18748              		.thumb
 18749              		.thumb_func
 18751              	RCC_GetClocksFreq:
 18752              	.LFB49:
 899:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 900:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
 901:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 902:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 903:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *         the clocks frequencies.
 904:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 905:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 906:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
 907:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
 908:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 909:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18753              		.loc 1 909 0
 18754              		.cfi_startproc
 18755              		@ args = 0, pretend = 0, frame = 32
 18756              		@ frame_needed = 1, uses_anonymous_args = 0
 18757              		@ link register save eliminated.
 18758 0000 80B4     		push	{r7}
 18759              	.LCFI58:
 18760              		.cfi_def_cfa_offset 4
 18761 0002 89B0     		sub	sp, sp, #36
 18762              	.LCFI59:
 18763              		.cfi_def_cfa_offset 40
 18764 0004 00AF     		add	r7, sp, #0
 18765              		.cfi_offset 7, -4
 18766              	.LCFI60:
 18767              		.cfi_def_cfa_register 7
 18768 0006 7860     		str	r0, [r7, #4]
 910:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 18769              		.loc 1 910 0
 18770 0008 4FF00003 		mov	r3, #0
 18771 000c FB61     		str	r3, [r7, #28]
 18772 000e 4FF00003 		mov	r3, #0
 18773 0012 BB61     		str	r3, [r7, #24]
 18774 0014 4FF00003 		mov	r3, #0
 18775 0018 7B61     		str	r3, [r7, #20]
 18776 001a 4FF00003 		mov	r3, #0
 18777 001e 3B61     		str	r3, [r7, #16]
 911:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 912:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 913:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 914:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 915:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 916:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 917:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 18778              		.loc 1 917 0
 18779 0020 4FF00003 		mov	r3, #0
 18780 0024 FB60     		str	r3, [r7, #12]
 918:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif
 919:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     
 920:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 921:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 18781              		.loc 1 921 0
 18782 0026 504B     		ldr	r3, .L82
 18783 0028 5B68     		ldr	r3, [r3, #4]
 18784 002a 03F00C03 		and	r3, r3, #12
 18785 002e FB61     		str	r3, [r7, #28]
 922:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   
 923:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   switch (tmp)
 18786              		.loc 1 923 0
 18787 0030 FB69     		ldr	r3, [r7, #28]
 18788 0032 042B     		cmp	r3, #4
 18789 0034 07D0     		beq	.L76
 18790 0036 082B     		cmp	r3, #8
 18791 0038 09D0     		beq	.L77
 18792 003a 002B     		cmp	r3, #0
 18793 003c 32D1     		bne	.L81
 18794              	.L75:
 924:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
 925:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 926:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 18795              		.loc 1 926 0
 18796 003e 7B68     		ldr	r3, [r7, #4]
 18797 0040 4A4A     		ldr	r2, .L82+4
 18798 0042 1A60     		str	r2, [r3, #0]
 927:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18799              		.loc 1 927 0
 18800 0044 32E0     		b	.L78
 18801              	.L76:
 928:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 929:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 18802              		.loc 1 929 0
 18803 0046 7B68     		ldr	r3, [r7, #4]
 18804 0048 484A     		ldr	r2, .L82+4
 18805 004a 1A60     		str	r2, [r3, #0]
 930:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18806              		.loc 1 930 0
 18807 004c 2EE0     		b	.L78
 18808              	.L77:
 931:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 932:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
 933:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 934:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 18809              		.loc 1 934 0
 18810 004e 464B     		ldr	r3, .L82
 18811 0050 5B68     		ldr	r3, [r3, #4]
 18812 0052 03F47013 		and	r3, r3, #3932160
 18813 0056 BB61     		str	r3, [r7, #24]
 935:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 18814              		.loc 1 935 0
 18815 0058 434B     		ldr	r3, .L82
 18816 005a 5B68     		ldr	r3, [r3, #4]
 18817 005c 03F48033 		and	r3, r3, #65536
 18818 0060 7B61     		str	r3, [r7, #20]
 936:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 937:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 938:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 18819              		.loc 1 938 0
 18820 0062 BB69     		ldr	r3, [r7, #24]
 18821 0064 4FEA9343 		lsr	r3, r3, #18
 18822 0068 03F10203 		add	r3, r3, #2
 18823 006c BB61     		str	r3, [r7, #24]
 939:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 940:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 18824              		.loc 1 940 0
 18825 006e 7B69     		ldr	r3, [r7, #20]
 18826 0070 002B     		cmp	r3, #0
 18827 0072 06D1     		bne	.L79
 941:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 942:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 18828              		.loc 1 942 0
 18829 0074 BB69     		ldr	r3, [r7, #24]
 18830 0076 3E4A     		ldr	r2, .L82+8
 18831 0078 02FB03F2 		mul	r2, r2, r3
 18832 007c 7B68     		ldr	r3, [r7, #4]
 18833 007e 1A60     		str	r2, [r3, #0]
 943:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 944:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 945:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {
 946:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 947:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 948:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 949:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 950:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #else
 951:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 952:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 953:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 954:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 955:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 956:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         else
 957:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {
 958:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 959:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 960:../StdPeripheralDriver/src/stm32f10x_rcc.c ****  #endif
 961:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 962:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #else
 963:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 964:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       
 965:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 966:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {
 967:../StdPeripheralDriver/src/stm32f10x_rcc.c ****          pllmull += 2;
 968:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 969:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 970:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 971:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 972:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 973:../StdPeripheralDriver/src/stm32f10x_rcc.c ****             
 974:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 975:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 976:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 977:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 978:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       else
 979:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 980:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         
 981:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 982:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 983:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 984:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         
 985:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         if (prediv1source == 0)
 986:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 987:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 988:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 989:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         else
 990:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 991:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           
 992:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 993:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 994:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 995:../StdPeripheralDriver/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 996:../StdPeripheralDriver/src/stm32f10x_rcc.c ****         }
 997:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       }
 998:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 999:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18834              		.loc 1 999 0
 18835 0080 14E0     		b	.L78
 18836              	.L79:
 947:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 18837              		.loc 1 947 0
 18838 0082 394B     		ldr	r3, .L82
 18839 0084 DB6A     		ldr	r3, [r3, #44]
 18840 0086 03F00F03 		and	r3, r3, #15
 18841 008a 03F10103 		add	r3, r3, #1
 18842 008e FB60     		str	r3, [r7, #12]
 949:../StdPeripheralDriver/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 18843              		.loc 1 949 0
 18844 0090 364A     		ldr	r2, .L82+4
 18845 0092 FB68     		ldr	r3, [r7, #12]
 18846 0094 B2FBF3F3 		udiv	r3, r2, r3
 18847 0098 BA69     		ldr	r2, [r7, #24]
 18848 009a 02FB03F2 		mul	r2, r2, r3
 18849 009e 7B68     		ldr	r3, [r7, #4]
 18850 00a0 1A60     		str	r2, [r3, #0]
 18851              		.loc 1 999 0
 18852 00a2 03E0     		b	.L78
 18853              	.L81:
1000:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1001:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     default:
1002:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 18854              		.loc 1 1002 0
 18855 00a4 7B68     		ldr	r3, [r7, #4]
 18856 00a6 314A     		ldr	r2, .L82+4
 18857 00a8 1A60     		str	r2, [r3, #0]
1003:../StdPeripheralDriver/src/stm32f10x_rcc.c ****       break;
 18858              		.loc 1 1003 0
 18859 00aa 00BF     		nop
 18860              	.L78:
1004:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1005:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1006:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1007:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1008:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 18861              		.loc 1 1008 0
 18862 00ac 2E4B     		ldr	r3, .L82
 18863 00ae 5B68     		ldr	r3, [r3, #4]
 18864 00b0 03F0F003 		and	r3, r3, #240
 18865 00b4 FB61     		str	r3, [r7, #28]
1009:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 18866              		.loc 1 1009 0
 18867 00b6 FB69     		ldr	r3, [r7, #28]
 18868 00b8 4FEA1313 		lsr	r3, r3, #4
 18869 00bc FB61     		str	r3, [r7, #28]
1010:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 18870              		.loc 1 1010 0
 18871 00be 2D4A     		ldr	r2, .L82+12
 18872 00c0 FB69     		ldr	r3, [r7, #28]
 18873 00c2 D318     		adds	r3, r2, r3
 18874 00c4 1B78     		ldrb	r3, [r3, #0]
 18875 00c6 DBB2     		uxtb	r3, r3
 18876 00c8 3B61     		str	r3, [r7, #16]
1011:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1012:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 18877              		.loc 1 1012 0
 18878 00ca 7B68     		ldr	r3, [r7, #4]
 18879 00cc 1A68     		ldr	r2, [r3, #0]
 18880 00ce 3B69     		ldr	r3, [r7, #16]
 18881 00d0 22FA03F2 		lsr	r2, r2, r3
 18882 00d4 7B68     		ldr	r3, [r7, #4]
 18883 00d6 5A60     		str	r2, [r3, #4]
1013:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1014:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 18884              		.loc 1 1014 0
 18885 00d8 234B     		ldr	r3, .L82
 18886 00da 5B68     		ldr	r3, [r3, #4]
 18887 00dc 03F4E063 		and	r3, r3, #1792
 18888 00e0 FB61     		str	r3, [r7, #28]
1015:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 18889              		.loc 1 1015 0
 18890 00e2 FB69     		ldr	r3, [r7, #28]
 18891 00e4 4FEA1323 		lsr	r3, r3, #8
 18892 00e8 FB61     		str	r3, [r7, #28]
1016:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 18893              		.loc 1 1016 0
 18894 00ea 224A     		ldr	r2, .L82+12
 18895 00ec FB69     		ldr	r3, [r7, #28]
 18896 00ee D318     		adds	r3, r2, r3
 18897 00f0 1B78     		ldrb	r3, [r3, #0]
 18898 00f2 DBB2     		uxtb	r3, r3
 18899 00f4 3B61     		str	r3, [r7, #16]
1017:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1018:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 18900              		.loc 1 1018 0
 18901 00f6 7B68     		ldr	r3, [r7, #4]
 18902 00f8 5A68     		ldr	r2, [r3, #4]
 18903 00fa 3B69     		ldr	r3, [r7, #16]
 18904 00fc 22FA03F2 		lsr	r2, r2, r3
 18905 0100 7B68     		ldr	r3, [r7, #4]
 18906 0102 9A60     		str	r2, [r3, #8]
1019:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1020:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 18907              		.loc 1 1020 0
 18908 0104 184B     		ldr	r3, .L82
 18909 0106 5B68     		ldr	r3, [r3, #4]
 18910 0108 03F46053 		and	r3, r3, #14336
 18911 010c FB61     		str	r3, [r7, #28]
1021:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 18912              		.loc 1 1021 0
 18913 010e FB69     		ldr	r3, [r7, #28]
 18914 0110 4FEAD323 		lsr	r3, r3, #11
 18915 0114 FB61     		str	r3, [r7, #28]
1022:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 18916              		.loc 1 1022 0
 18917 0116 174A     		ldr	r2, .L82+12
 18918 0118 FB69     		ldr	r3, [r7, #28]
 18919 011a D318     		adds	r3, r2, r3
 18920 011c 1B78     		ldrb	r3, [r3, #0]
 18921 011e DBB2     		uxtb	r3, r3
 18922 0120 3B61     		str	r3, [r7, #16]
1023:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1024:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 18923              		.loc 1 1024 0
 18924 0122 7B68     		ldr	r3, [r7, #4]
 18925 0124 5A68     		ldr	r2, [r3, #4]
 18926 0126 3B69     		ldr	r3, [r7, #16]
 18927 0128 22FA03F2 		lsr	r2, r2, r3
 18928 012c 7B68     		ldr	r3, [r7, #4]
 18929 012e DA60     		str	r2, [r3, #12]
1025:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1026:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 18930              		.loc 1 1026 0
 18931 0130 0D4B     		ldr	r3, .L82
 18932 0132 5B68     		ldr	r3, [r3, #4]
 18933 0134 03F44043 		and	r3, r3, #49152
 18934 0138 FB61     		str	r3, [r7, #28]
1027:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 18935              		.loc 1 1027 0
 18936 013a FB69     		ldr	r3, [r7, #28]
 18937 013c 4FEA9333 		lsr	r3, r3, #14
 18938 0140 FB61     		str	r3, [r7, #28]
1028:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 18939              		.loc 1 1028 0
 18940 0142 0D4A     		ldr	r2, .L82+16
 18941 0144 FB69     		ldr	r3, [r7, #28]
 18942 0146 D318     		adds	r3, r2, r3
 18943 0148 1B78     		ldrb	r3, [r3, #0]
 18944 014a DBB2     		uxtb	r3, r3
 18945 014c 3B61     		str	r3, [r7, #16]
1029:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1030:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 18946              		.loc 1 1030 0
 18947 014e 7B68     		ldr	r3, [r7, #4]
 18948 0150 DA68     		ldr	r2, [r3, #12]
 18949 0152 3B69     		ldr	r3, [r7, #16]
 18950 0154 B2FBF3F2 		udiv	r2, r2, r3
 18951 0158 7B68     		ldr	r3, [r7, #4]
 18952 015a 1A61     		str	r2, [r3, #16]
1031:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 18953              		.loc 1 1031 0
 18954 015c 07F12407 		add	r7, r7, #36
 18955 0160 BD46     		mov	sp, r7
 18956 0162 80BC     		pop	{r7}
 18957 0164 7047     		bx	lr
 18958              	.L83:
 18959 0166 00BF     		.align	2
 18960              	.L82:
 18961 0168 00100240 		.word	1073876992
 18962 016c 00127A00 		.word	8000000
 18963 0170 00093D00 		.word	4000000
 18964 0174 00000000 		.word	APBAHBPrescTable
 18965 0178 00000000 		.word	ADCPrescTable
 18966              		.cfi_endproc
 18967              	.LFE49:
 18969              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 18970              		.align	2
 18971              		.global	RCC_AHBPeriphClockCmd
 18972              		.thumb
 18973              		.thumb_func
 18975              	RCC_AHBPeriphClockCmd:
 18976              	.LFB50:
1032:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1033:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1034:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1035:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1036:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1037:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1038:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values:        
1039:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1040:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1041:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1042:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1043:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1044:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1045:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1046:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1047:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1048:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1049:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1050:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:        
1051:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1052:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1053:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1054:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1055:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1056:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1057:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1058:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1059:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1060:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1061:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1062:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1063:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1064:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1065:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 18977              		.loc 1 1065 0
 18978              		.cfi_startproc
 18979              		@ args = 0, pretend = 0, frame = 8
 18980              		@ frame_needed = 1, uses_anonymous_args = 0
 18981              		@ link register save eliminated.
 18982 0000 80B4     		push	{r7}
 18983              	.LCFI61:
 18984              		.cfi_def_cfa_offset 4
 18985 0002 83B0     		sub	sp, sp, #12
 18986              	.LCFI62:
 18987              		.cfi_def_cfa_offset 16
 18988 0004 00AF     		add	r7, sp, #0
 18989              		.cfi_offset 7, -4
 18990              	.LCFI63:
 18991              		.cfi_def_cfa_register 7
 18992 0006 7860     		str	r0, [r7, #4]
 18993 0008 0B46     		mov	r3, r1
 18994 000a FB70     		strb	r3, [r7, #3]
1066:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1067:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1068:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1069:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1070:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 18995              		.loc 1 1070 0
 18996 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 18997 000e 002B     		cmp	r3, #0
 18998 0010 07D0     		beq	.L85
1071:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1072:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 18999              		.loc 1 1072 0
 19000 0012 0B4B     		ldr	r3, .L87
 19001 0014 0A4A     		ldr	r2, .L87
 19002 0016 5169     		ldr	r1, [r2, #20]
 19003 0018 7A68     		ldr	r2, [r7, #4]
 19004 001a 41EA0202 		orr	r2, r1, r2
 19005 001e 5A61     		str	r2, [r3, #20]
 19006 0020 08E0     		b	.L84
 19007              	.L85:
1073:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1074:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1075:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1076:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 19008              		.loc 1 1076 0
 19009 0022 074B     		ldr	r3, .L87
 19010 0024 064A     		ldr	r2, .L87
 19011 0026 5169     		ldr	r1, [r2, #20]
 19012 0028 7A68     		ldr	r2, [r7, #4]
 19013 002a 6FEA0202 		mvn	r2, r2
 19014 002e 01EA0202 		and	r2, r1, r2
 19015 0032 5A61     		str	r2, [r3, #20]
 19016              	.L84:
1077:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1078:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19017              		.loc 1 1078 0
 19018 0034 07F10C07 		add	r7, r7, #12
 19019 0038 BD46     		mov	sp, r7
 19020 003a 80BC     		pop	{r7}
 19021 003c 7047     		bx	lr
 19022              	.L88:
 19023 003e 00BF     		.align	2
 19024              	.L87:
 19025 0040 00100240 		.word	1073876992
 19026              		.cfi_endproc
 19027              	.LFE50:
 19029              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 19030              		.align	2
 19031              		.global	RCC_APB2PeriphClockCmd
 19032              		.thumb
 19033              		.thumb_func
 19035              	RCC_APB2PeriphClockCmd:
 19036              	.LFB51:
1079:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1080:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1081:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1082:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1083:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1084:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1085:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1086:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1087:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1088:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1089:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1090:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1091:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1092:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1093:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1094:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1095:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1096:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19037              		.loc 1 1096 0
 19038              		.cfi_startproc
 19039              		@ args = 0, pretend = 0, frame = 8
 19040              		@ frame_needed = 1, uses_anonymous_args = 0
 19041              		@ link register save eliminated.
 19042 0000 80B4     		push	{r7}
 19043              	.LCFI64:
 19044              		.cfi_def_cfa_offset 4
 19045 0002 83B0     		sub	sp, sp, #12
 19046              	.LCFI65:
 19047              		.cfi_def_cfa_offset 16
 19048 0004 00AF     		add	r7, sp, #0
 19049              		.cfi_offset 7, -4
 19050              	.LCFI66:
 19051              		.cfi_def_cfa_register 7
 19052 0006 7860     		str	r0, [r7, #4]
 19053 0008 0B46     		mov	r3, r1
 19054 000a FB70     		strb	r3, [r7, #3]
1097:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1098:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1099:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1100:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 19055              		.loc 1 1100 0
 19056 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19057 000e 002B     		cmp	r3, #0
 19058 0010 07D0     		beq	.L90
1101:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1102:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 19059              		.loc 1 1102 0
 19060 0012 0B4B     		ldr	r3, .L92
 19061 0014 0A4A     		ldr	r2, .L92
 19062 0016 9169     		ldr	r1, [r2, #24]
 19063 0018 7A68     		ldr	r2, [r7, #4]
 19064 001a 41EA0202 		orr	r2, r1, r2
 19065 001e 9A61     		str	r2, [r3, #24]
 19066 0020 08E0     		b	.L89
 19067              	.L90:
1103:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1104:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1105:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1106:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 19068              		.loc 1 1106 0
 19069 0022 074B     		ldr	r3, .L92
 19070 0024 064A     		ldr	r2, .L92
 19071 0026 9169     		ldr	r1, [r2, #24]
 19072 0028 7A68     		ldr	r2, [r7, #4]
 19073 002a 6FEA0202 		mvn	r2, r2
 19074 002e 01EA0202 		and	r2, r1, r2
 19075 0032 9A61     		str	r2, [r3, #24]
 19076              	.L89:
1107:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1108:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19077              		.loc 1 1108 0
 19078 0034 07F10C07 		add	r7, r7, #12
 19079 0038 BD46     		mov	sp, r7
 19080 003a 80BC     		pop	{r7}
 19081 003c 7047     		bx	lr
 19082              	.L93:
 19083 003e 00BF     		.align	2
 19084              	.L92:
 19085 0040 00100240 		.word	1073876992
 19086              		.cfi_endproc
 19087              	.LFE51:
 19089              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 19090              		.align	2
 19091              		.global	RCC_APB1PeriphClockCmd
 19092              		.thumb
 19093              		.thumb_func
 19095              	RCC_APB1PeriphClockCmd:
 19096              	.LFB52:
1109:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1110:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1111:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1112:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1113:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1114:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1115:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1116:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1117:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1118:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1119:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1120:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1121:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1122:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1123:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1124:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1125:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1126:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1127:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19097              		.loc 1 1127 0
 19098              		.cfi_startproc
 19099              		@ args = 0, pretend = 0, frame = 8
 19100              		@ frame_needed = 1, uses_anonymous_args = 0
 19101              		@ link register save eliminated.
 19102 0000 80B4     		push	{r7}
 19103              	.LCFI67:
 19104              		.cfi_def_cfa_offset 4
 19105 0002 83B0     		sub	sp, sp, #12
 19106              	.LCFI68:
 19107              		.cfi_def_cfa_offset 16
 19108 0004 00AF     		add	r7, sp, #0
 19109              		.cfi_offset 7, -4
 19110              	.LCFI69:
 19111              		.cfi_def_cfa_register 7
 19112 0006 7860     		str	r0, [r7, #4]
 19113 0008 0B46     		mov	r3, r1
 19114 000a FB70     		strb	r3, [r7, #3]
1128:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1129:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1130:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1131:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 19115              		.loc 1 1131 0
 19116 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19117 000e 002B     		cmp	r3, #0
 19118 0010 07D0     		beq	.L95
1132:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1133:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 19119              		.loc 1 1133 0
 19120 0012 0B4B     		ldr	r3, .L97
 19121 0014 0A4A     		ldr	r2, .L97
 19122 0016 D169     		ldr	r1, [r2, #28]
 19123 0018 7A68     		ldr	r2, [r7, #4]
 19124 001a 41EA0202 		orr	r2, r1, r2
 19125 001e DA61     		str	r2, [r3, #28]
 19126 0020 08E0     		b	.L94
 19127              	.L95:
1134:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1135:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1136:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1137:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 19128              		.loc 1 1137 0
 19129 0022 074B     		ldr	r3, .L97
 19130 0024 064A     		ldr	r2, .L97
 19131 0026 D169     		ldr	r1, [r2, #28]
 19132 0028 7A68     		ldr	r2, [r7, #4]
 19133 002a 6FEA0202 		mvn	r2, r2
 19134 002e 01EA0202 		and	r2, r1, r2
 19135 0032 DA61     		str	r2, [r3, #28]
 19136              	.L94:
1138:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1139:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19137              		.loc 1 1139 0
 19138 0034 07F10C07 		add	r7, r7, #12
 19139 0038 BD46     		mov	sp, r7
 19140 003a 80BC     		pop	{r7}
 19141 003c 7047     		bx	lr
 19142              	.L98:
 19143 003e 00BF     		.align	2
 19144              	.L97:
 19145 0040 00100240 		.word	1073876992
 19146              		.cfi_endproc
 19147              	.LFE52:
 19149              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 19150              		.align	2
 19151              		.global	RCC_APB2PeriphResetCmd
 19152              		.thumb
 19153              		.thumb_func
 19155              	RCC_APB2PeriphResetCmd:
 19156              	.LFB53:
1140:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1141:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1142:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1143:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1144:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1145:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1146:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1147:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1148:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1149:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1150:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1151:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1152:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1153:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1154:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
1155:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1156:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1157:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1158:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1159:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1160:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1161:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1162:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1163:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1164:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1165:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1166:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1167:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
1168:../StdPeripheralDriver/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1169:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1170:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1171:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1172:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1173:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1174:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1175:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1176:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1177:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1178:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1179:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1180:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1181:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1182:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1183:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1184:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1185:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1186:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19157              		.loc 1 1186 0
 19158              		.cfi_startproc
 19159              		@ args = 0, pretend = 0, frame = 8
 19160              		@ frame_needed = 1, uses_anonymous_args = 0
 19161              		@ link register save eliminated.
 19162 0000 80B4     		push	{r7}
 19163              	.LCFI70:
 19164              		.cfi_def_cfa_offset 4
 19165 0002 83B0     		sub	sp, sp, #12
 19166              	.LCFI71:
 19167              		.cfi_def_cfa_offset 16
 19168 0004 00AF     		add	r7, sp, #0
 19169              		.cfi_offset 7, -4
 19170              	.LCFI72:
 19171              		.cfi_def_cfa_register 7
 19172 0006 7860     		str	r0, [r7, #4]
 19173 0008 0B46     		mov	r3, r1
 19174 000a FB70     		strb	r3, [r7, #3]
1187:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1188:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1189:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1190:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 19175              		.loc 1 1190 0
 19176 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19177 000e 002B     		cmp	r3, #0
 19178 0010 07D0     		beq	.L100
1191:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1192:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 19179              		.loc 1 1192 0
 19180 0012 0B4B     		ldr	r3, .L102
 19181 0014 0A4A     		ldr	r2, .L102
 19182 0016 D168     		ldr	r1, [r2, #12]
 19183 0018 7A68     		ldr	r2, [r7, #4]
 19184 001a 41EA0202 		orr	r2, r1, r2
 19185 001e DA60     		str	r2, [r3, #12]
 19186 0020 08E0     		b	.L99
 19187              	.L100:
1193:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1194:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1195:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1196:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 19188              		.loc 1 1196 0
 19189 0022 074B     		ldr	r3, .L102
 19190 0024 064A     		ldr	r2, .L102
 19191 0026 D168     		ldr	r1, [r2, #12]
 19192 0028 7A68     		ldr	r2, [r7, #4]
 19193 002a 6FEA0202 		mvn	r2, r2
 19194 002e 01EA0202 		and	r2, r1, r2
 19195 0032 DA60     		str	r2, [r3, #12]
 19196              	.L99:
1197:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1198:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19197              		.loc 1 1198 0
 19198 0034 07F10C07 		add	r7, r7, #12
 19199 0038 BD46     		mov	sp, r7
 19200 003a 80BC     		pop	{r7}
 19201 003c 7047     		bx	lr
 19202              	.L103:
 19203 003e 00BF     		.align	2
 19204              	.L102:
 19205 0040 00100240 		.word	1073876992
 19206              		.cfi_endproc
 19207              	.LFE53:
 19209              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 19210              		.align	2
 19211              		.global	RCC_APB1PeriphResetCmd
 19212              		.thumb
 19213              		.thumb_func
 19215              	RCC_APB1PeriphResetCmd:
 19216              	.LFB54:
1199:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1200:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1201:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1202:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1203:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1204:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1205:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1206:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1207:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1208:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1209:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1210:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1211:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1212:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1213:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1214:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1215:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1216:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1217:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19217              		.loc 1 1217 0
 19218              		.cfi_startproc
 19219              		@ args = 0, pretend = 0, frame = 8
 19220              		@ frame_needed = 1, uses_anonymous_args = 0
 19221              		@ link register save eliminated.
 19222 0000 80B4     		push	{r7}
 19223              	.LCFI73:
 19224              		.cfi_def_cfa_offset 4
 19225 0002 83B0     		sub	sp, sp, #12
 19226              	.LCFI74:
 19227              		.cfi_def_cfa_offset 16
 19228 0004 00AF     		add	r7, sp, #0
 19229              		.cfi_offset 7, -4
 19230              	.LCFI75:
 19231              		.cfi_def_cfa_register 7
 19232 0006 7860     		str	r0, [r7, #4]
 19233 0008 0B46     		mov	r3, r1
 19234 000a FB70     		strb	r3, [r7, #3]
1218:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1219:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1220:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1221:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 19235              		.loc 1 1221 0
 19236 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 19237 000e 002B     		cmp	r3, #0
 19238 0010 07D0     		beq	.L105
1222:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1223:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 19239              		.loc 1 1223 0
 19240 0012 0B4B     		ldr	r3, .L107
 19241 0014 0A4A     		ldr	r2, .L107
 19242 0016 1169     		ldr	r1, [r2, #16]
 19243 0018 7A68     		ldr	r2, [r7, #4]
 19244 001a 41EA0202 		orr	r2, r1, r2
 19245 001e 1A61     		str	r2, [r3, #16]
 19246 0020 08E0     		b	.L104
 19247              	.L105:
1224:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1225:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1226:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1227:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 19248              		.loc 1 1227 0
 19249 0022 074B     		ldr	r3, .L107
 19250 0024 064A     		ldr	r2, .L107
 19251 0026 1169     		ldr	r1, [r2, #16]
 19252 0028 7A68     		ldr	r2, [r7, #4]
 19253 002a 6FEA0202 		mvn	r2, r2
 19254 002e 01EA0202 		and	r2, r1, r2
 19255 0032 1A61     		str	r2, [r3, #16]
 19256              	.L104:
1228:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1229:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19257              		.loc 1 1229 0
 19258 0034 07F10C07 		add	r7, r7, #12
 19259 0038 BD46     		mov	sp, r7
 19260 003a 80BC     		pop	{r7}
 19261 003c 7047     		bx	lr
 19262              	.L108:
 19263 003e 00BF     		.align	2
 19264              	.L107:
 19265 0040 00100240 		.word	1073876992
 19266              		.cfi_endproc
 19267              	.LFE54:
 19269              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 19270              		.align	2
 19271              		.global	RCC_BackupResetCmd
 19272              		.thumb
 19273              		.thumb_func
 19275              	RCC_BackupResetCmd:
 19276              	.LFB55:
1230:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1231:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1232:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1233:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1234:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1236:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1237:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1238:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19277              		.loc 1 1238 0
 19278              		.cfi_startproc
 19279              		@ args = 0, pretend = 0, frame = 8
 19280              		@ frame_needed = 1, uses_anonymous_args = 0
 19281              		@ link register save eliminated.
 19282 0000 80B4     		push	{r7}
 19283              	.LCFI76:
 19284              		.cfi_def_cfa_offset 4
 19285 0002 83B0     		sub	sp, sp, #12
 19286              	.LCFI77:
 19287              		.cfi_def_cfa_offset 16
 19288 0004 00AF     		add	r7, sp, #0
 19289              		.cfi_offset 7, -4
 19290              	.LCFI78:
 19291              		.cfi_def_cfa_register 7
 19292 0006 0346     		mov	r3, r0
 19293 0008 FB71     		strb	r3, [r7, #7]
1239:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1240:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1241:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 19294              		.loc 1 1241 0
 19295 000a 044B     		ldr	r3, .L110
 19296 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 19297 000e 1A60     		str	r2, [r3, #0]
1242:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19298              		.loc 1 1242 0
 19299 0010 07F10C07 		add	r7, r7, #12
 19300 0014 BD46     		mov	sp, r7
 19301 0016 80BC     		pop	{r7}
 19302 0018 7047     		bx	lr
 19303              	.L111:
 19304 001a 00BF     		.align	2
 19305              	.L110:
 19306 001c 40044242 		.word	1111622720
 19307              		.cfi_endproc
 19308              	.LFE55:
 19310              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 19311              		.align	2
 19312              		.global	RCC_ClockSecuritySystemCmd
 19313              		.thumb
 19314              		.thumb_func
 19316              	RCC_ClockSecuritySystemCmd:
 19317              	.LFB56:
1243:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1244:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1245:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1246:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1247:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1248:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1249:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1250:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1251:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19318              		.loc 1 1251 0
 19319              		.cfi_startproc
 19320              		@ args = 0, pretend = 0, frame = 8
 19321              		@ frame_needed = 1, uses_anonymous_args = 0
 19322              		@ link register save eliminated.
 19323 0000 80B4     		push	{r7}
 19324              	.LCFI79:
 19325              		.cfi_def_cfa_offset 4
 19326 0002 83B0     		sub	sp, sp, #12
 19327              	.LCFI80:
 19328              		.cfi_def_cfa_offset 16
 19329 0004 00AF     		add	r7, sp, #0
 19330              		.cfi_offset 7, -4
 19331              	.LCFI81:
 19332              		.cfi_def_cfa_register 7
 19333 0006 0346     		mov	r3, r0
 19334 0008 FB71     		strb	r3, [r7, #7]
1252:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1253:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1254:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 19335              		.loc 1 1254 0
 19336 000a 044B     		ldr	r3, .L113
 19337 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 19338 000e 1A60     		str	r2, [r3, #0]
1255:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19339              		.loc 1 1255 0
 19340 0010 07F10C07 		add	r7, r7, #12
 19341 0014 BD46     		mov	sp, r7
 19342 0016 80BC     		pop	{r7}
 19343 0018 7047     		bx	lr
 19344              	.L114:
 19345 001a 00BF     		.align	2
 19346              	.L113:
 19347 001c 4C004242 		.word	1111621708
 19348              		.cfi_endproc
 19349              	.LFE56:
 19351              		.section	.text.RCC_MCOConfig,"ax",%progbits
 19352              		.align	2
 19353              		.global	RCC_MCOConfig
 19354              		.thumb
 19355              		.thumb_func
 19357              	RCC_MCOConfig:
 19358              	.LFB57:
1256:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1257:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1258:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1259:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1260:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1261:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1262:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:       
1263:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1264:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1265:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1266:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1267:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1268:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1269:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1270:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1271:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1272:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1273:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1274:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1275:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1276:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1277:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1278:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1279:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1280:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1281:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1282:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1283:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19359              		.loc 1 1283 0
 19360              		.cfi_startproc
 19361              		@ args = 0, pretend = 0, frame = 8
 19362              		@ frame_needed = 1, uses_anonymous_args = 0
 19363              		@ link register save eliminated.
 19364 0000 80B4     		push	{r7}
 19365              	.LCFI82:
 19366              		.cfi_def_cfa_offset 4
 19367 0002 83B0     		sub	sp, sp, #12
 19368              	.LCFI83:
 19369              		.cfi_def_cfa_offset 16
 19370 0004 00AF     		add	r7, sp, #0
 19371              		.cfi_offset 7, -4
 19372              	.LCFI84:
 19373              		.cfi_def_cfa_register 7
 19374 0006 0346     		mov	r3, r0
 19375 0008 FB71     		strb	r3, [r7, #7]
1284:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1285:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
1286:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1287:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1288:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 19376              		.loc 1 1288 0
 19377 000a 044B     		ldr	r3, .L116
 19378 000c FA79     		ldrb	r2, [r7, #7]
 19379 000e 1A70     		strb	r2, [r3, #0]
1289:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19380              		.loc 1 1289 0
 19381 0010 07F10C07 		add	r7, r7, #12
 19382 0014 BD46     		mov	sp, r7
 19383 0016 80BC     		pop	{r7}
 19384 0018 7047     		bx	lr
 19385              	.L117:
 19386 001a 00BF     		.align	2
 19387              	.L116:
 19388 001c 07100240 		.word	1073876999
 19389              		.cfi_endproc
 19390              	.LFE57:
 19392              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 19393              		.align	2
 19394              		.global	RCC_GetFlagStatus
 19395              		.thumb
 19396              		.thumb_func
 19398              	RCC_GetFlagStatus:
 19399              	.LFB58:
1290:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1291:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1292:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1293:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1294:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1295:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1296:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:
1297:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1298:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1299:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1300:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1301:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1302:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1303:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1304:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1305:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1306:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1307:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1308:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1309:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1310:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1311:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1312:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1313:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1314:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1315:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1316:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1317:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1318:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1319:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1320:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1321:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1322:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1323:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1324:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1325:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1326:../StdPeripheralDriver/src/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1327:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19400              		.loc 1 1327 0
 19401              		.cfi_startproc
 19402              		@ args = 0, pretend = 0, frame = 24
 19403              		@ frame_needed = 1, uses_anonymous_args = 0
 19404              		@ link register save eliminated.
 19405 0000 80B4     		push	{r7}
 19406              	.LCFI85:
 19407              		.cfi_def_cfa_offset 4
 19408 0002 87B0     		sub	sp, sp, #28
 19409              	.LCFI86:
 19410              		.cfi_def_cfa_offset 32
 19411 0004 00AF     		add	r7, sp, #0
 19412              		.cfi_offset 7, -4
 19413              	.LCFI87:
 19414              		.cfi_def_cfa_register 7
 19415 0006 0346     		mov	r3, r0
 19416 0008 FB71     		strb	r3, [r7, #7]
1328:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t tmp = 0;
 19417              		.loc 1 1328 0
 19418 000a 4FF00003 		mov	r3, #0
 19419 000e FB60     		str	r3, [r7, #12]
1329:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
 19420              		.loc 1 1329 0
 19421 0010 4FF00003 		mov	r3, #0
 19422 0014 7B61     		str	r3, [r7, #20]
1330:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
 19423              		.loc 1 1330 0
 19424 0016 4FF00003 		mov	r3, #0
 19425 001a FB74     		strb	r3, [r7, #19]
1331:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1332:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1333:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1334:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get the RCC register index */
1335:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 19426              		.loc 1 1335 0
 19427 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 19428 001e 4FEA5313 		lsr	r3, r3, #5
 19429 0022 DBB2     		uxtb	r3, r3
 19430 0024 FB60     		str	r3, [r7, #12]
1336:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 19431              		.loc 1 1336 0
 19432 0026 FB68     		ldr	r3, [r7, #12]
 19433 0028 012B     		cmp	r3, #1
 19434 002a 03D1     		bne	.L119
1337:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1338:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->CR;
 19435              		.loc 1 1338 0
 19436 002c 144B     		ldr	r3, .L124
 19437 002e 1B68     		ldr	r3, [r3, #0]
 19438 0030 7B61     		str	r3, [r7, #20]
 19439 0032 09E0     		b	.L120
 19440              	.L119:
1339:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1340:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 19441              		.loc 1 1340 0
 19442 0034 FB68     		ldr	r3, [r7, #12]
 19443 0036 022B     		cmp	r3, #2
 19444 0038 03D1     		bne	.L121
1341:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1342:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
 19445              		.loc 1 1342 0
 19446 003a 114B     		ldr	r3, .L124
 19447 003c 1B6A     		ldr	r3, [r3, #32]
 19448 003e 7B61     		str	r3, [r7, #20]
 19449 0040 02E0     		b	.L120
 19450              	.L121:
1343:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1344:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1345:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1346:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 19451              		.loc 1 1346 0
 19452 0042 0F4B     		ldr	r3, .L124
 19453 0044 5B6A     		ldr	r3, [r3, #36]
 19454 0046 7B61     		str	r3, [r7, #20]
 19455              	.L120:
1347:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1348:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1349:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Get the flag position */
1350:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 19456              		.loc 1 1350 0
 19457 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 19458 004a 03F01F03 		and	r3, r3, #31
 19459 004e FB60     		str	r3, [r7, #12]
1351:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 19460              		.loc 1 1351 0
 19461 0050 FB68     		ldr	r3, [r7, #12]
 19462 0052 7A69     		ldr	r2, [r7, #20]
 19463 0054 22FA03F3 		lsr	r3, r2, r3
 19464 0058 03F00103 		and	r3, r3, #1
 19465 005c DBB2     		uxtb	r3, r3
 19466 005e 002B     		cmp	r3, #0
 19467 0060 03D0     		beq	.L122
1352:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1353:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = SET;
 19468              		.loc 1 1353 0
 19469 0062 4FF00103 		mov	r3, #1
 19470 0066 FB74     		strb	r3, [r7, #19]
 19471 0068 02E0     		b	.L123
 19472              	.L122:
1354:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1355:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1356:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1357:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 19473              		.loc 1 1357 0
 19474 006a 4FF00003 		mov	r3, #0
 19475 006e FB74     		strb	r3, [r7, #19]
 19476              	.L123:
1358:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1359:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1360:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Return the flag status */
1361:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return bitstatus;
 19477              		.loc 1 1361 0
 19478 0070 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1362:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19479              		.loc 1 1362 0
 19480 0072 1846     		mov	r0, r3
 19481 0074 07F11C07 		add	r7, r7, #28
 19482 0078 BD46     		mov	sp, r7
 19483 007a 80BC     		pop	{r7}
 19484 007c 7047     		bx	lr
 19485              	.L125:
 19486 007e 00BF     		.align	2
 19487              	.L124:
 19488 0080 00100240 		.word	1073876992
 19489              		.cfi_endproc
 19490              	.LFE58:
 19492              		.section	.text.RCC_ClearFlag,"ax",%progbits
 19493              		.align	2
 19494              		.global	RCC_ClearFlag
 19495              		.thumb
 19496              		.thumb_func
 19498              	RCC_ClearFlag:
 19499              	.LFB59:
1363:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1364:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1365:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1366:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1367:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1368:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  None
1369:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1370:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1371:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1372:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19500              		.loc 1 1372 0
 19501              		.cfi_startproc
 19502              		@ args = 0, pretend = 0, frame = 0
 19503              		@ frame_needed = 1, uses_anonymous_args = 0
 19504              		@ link register save eliminated.
 19505 0000 80B4     		push	{r7}
 19506              	.LCFI88:
 19507              		.cfi_def_cfa_offset 4
 19508 0002 00AF     		add	r7, sp, #0
 19509              		.cfi_offset 7, -4
 19510              	.LCFI89:
 19511              		.cfi_def_cfa_register 7
1373:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1374:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 19512              		.loc 1 1374 0
 19513 0004 044B     		ldr	r3, .L127
 19514 0006 044A     		ldr	r2, .L127
 19515 0008 526A     		ldr	r2, [r2, #36]
 19516 000a 42F08072 		orr	r2, r2, #16777216
 19517 000e 5A62     		str	r2, [r3, #36]
1375:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19518              		.loc 1 1375 0
 19519 0010 BD46     		mov	sp, r7
 19520 0012 80BC     		pop	{r7}
 19521 0014 7047     		bx	lr
 19522              	.L128:
 19523 0016 00BF     		.align	2
 19524              	.L127:
 19525 0018 00100240 		.word	1073876992
 19526              		.cfi_endproc
 19527              	.LFE59:
 19529              		.section	.text.RCC_GetITStatus,"ax",%progbits
 19530              		.align	2
 19531              		.global	RCC_GetITStatus
 19532              		.thumb
 19533              		.thumb_func
 19535              	RCC_GetITStatus:
 19536              	.LFB60:
1376:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1377:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1378:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1379:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1380:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1381:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1382:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:
1383:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1384:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1385:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1386:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1387:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1388:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1389:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1390:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1391:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1392:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1393:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1394:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1395:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1396:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1397:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1398:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1399:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1400:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1401:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1402:../StdPeripheralDriver/src/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1403:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19537              		.loc 1 1403 0
 19538              		.cfi_startproc
 19539              		@ args = 0, pretend = 0, frame = 16
 19540              		@ frame_needed = 1, uses_anonymous_args = 0
 19541              		@ link register save eliminated.
 19542 0000 80B4     		push	{r7}
 19543              	.LCFI90:
 19544              		.cfi_def_cfa_offset 4
 19545 0002 85B0     		sub	sp, sp, #20
 19546              	.LCFI91:
 19547              		.cfi_def_cfa_offset 24
 19548 0004 00AF     		add	r7, sp, #0
 19549              		.cfi_offset 7, -4
 19550              	.LCFI92:
 19551              		.cfi_def_cfa_register 7
 19552 0006 0346     		mov	r3, r0
 19553 0008 FB71     		strb	r3, [r7, #7]
1404:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
 19554              		.loc 1 1404 0
 19555 000a 4FF00003 		mov	r3, #0
 19556 000e FB73     		strb	r3, [r7, #15]
1405:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1406:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1407:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1408:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1409:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 19557              		.loc 1 1409 0
 19558 0010 0A4B     		ldr	r3, .L132
 19559 0012 9A68     		ldr	r2, [r3, #8]
 19560 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 19561 0016 02EA0303 		and	r3, r2, r3
 19562 001a 002B     		cmp	r3, #0
 19563 001c 03D0     		beq	.L130
1410:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1411:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = SET;
 19564              		.loc 1 1411 0
 19565 001e 4FF00103 		mov	r3, #1
 19566 0022 FB73     		strb	r3, [r7, #15]
 19567 0024 02E0     		b	.L131
 19568              	.L130:
1412:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1413:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   else
1414:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   {
1415:../StdPeripheralDriver/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 19569              		.loc 1 1415 0
 19570 0026 4FF00003 		mov	r3, #0
 19571 002a FB73     		strb	r3, [r7, #15]
 19572              	.L131:
1416:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   }
1417:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1418:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1419:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   return  bitstatus;
 19573              		.loc 1 1419 0
 19574 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1420:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19575              		.loc 1 1420 0
 19576 002e 1846     		mov	r0, r3
 19577 0030 07F11407 		add	r7, r7, #20
 19578 0034 BD46     		mov	sp, r7
 19579 0036 80BC     		pop	{r7}
 19580 0038 7047     		bx	lr
 19581              	.L133:
 19582 003a 00BF     		.align	2
 19583              	.L132:
 19584 003c 00100240 		.word	1073876992
 19585              		.cfi_endproc
 19586              	.LFE60:
 19588              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 19589              		.align	2
 19590              		.global	RCC_ClearITPendingBit
 19591              		.thumb
 19592              		.thumb_func
 19594              	RCC_ClearITPendingBit:
 19595              	.LFB61:
1421:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1422:../StdPeripheralDriver/src/stm32f10x_rcc.c **** /**
1423:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1424:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1425:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1426:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1427:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   of the following values:
1428:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1429:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1430:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1431:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1432:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1433:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1434:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1435:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1436:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * 
1437:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1438:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   following values:        
1439:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1440:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1441:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1442:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1443:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1444:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *   
1445:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1446:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   * @retval None
1447:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   */
1448:../StdPeripheralDriver/src/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1449:../StdPeripheralDriver/src/stm32f10x_rcc.c **** {
 19596              		.loc 1 1449 0
 19597              		.cfi_startproc
 19598              		@ args = 0, pretend = 0, frame = 8
 19599              		@ frame_needed = 1, uses_anonymous_args = 0
 19600              		@ link register save eliminated.
 19601 0000 80B4     		push	{r7}
 19602              	.LCFI93:
 19603              		.cfi_def_cfa_offset 4
 19604 0002 83B0     		sub	sp, sp, #12
 19605              	.LCFI94:
 19606              		.cfi_def_cfa_offset 16
 19607 0004 00AF     		add	r7, sp, #0
 19608              		.cfi_offset 7, -4
 19609              	.LCFI95:
 19610              		.cfi_def_cfa_register 7
 19611 0006 0346     		mov	r3, r0
 19612 0008 FB71     		strb	r3, [r7, #7]
1450:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Check the parameters */
1451:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1452:../StdPeripheralDriver/src/stm32f10x_rcc.c **** 
1453:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1454:../StdPeripheralDriver/src/stm32f10x_rcc.c ****      pending bits */
1455:../StdPeripheralDriver/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 19613              		.loc 1 1455 0
 19614 000a 044B     		ldr	r3, .L135
 19615 000c FA79     		ldrb	r2, [r7, #7]
 19616 000e 1A70     		strb	r2, [r3, #0]
1456:../StdPeripheralDriver/src/stm32f10x_rcc.c **** }
 19617              		.loc 1 1456 0
 19618 0010 07F10C07 		add	r7, r7, #12
 19619 0014 BD46     		mov	sp, r7
 19620 0016 80BC     		pop	{r7}
 19621 0018 7047     		bx	lr
 19622              	.L136:
 19623 001a 00BF     		.align	2
 19624              	.L135:
 19625 001c 0A100240 		.word	1073877002
 19626              		.cfi_endproc
 19627              	.LFE61:
 19629              		.text
 19630              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rcc.c
     /tmp/ccFZihBM.s:17617  .data.APBAHBPrescTable:00000000 $d
     /tmp/ccFZihBM.s:17620  .data.APBAHBPrescTable:00000000 APBAHBPrescTable
     /tmp/ccFZihBM.s:17638  .data.ADCPrescTable:00000000 $d
     /tmp/ccFZihBM.s:17641  .data.ADCPrescTable:00000000 ADCPrescTable
     /tmp/ccFZihBM.s:17647  .text.RCC_DeInit:00000000 $t
     /tmp/ccFZihBM.s:17652  .text.RCC_DeInit:00000000 RCC_DeInit
     /tmp/ccFZihBM.s:17713  .text.RCC_DeInit:0000005c $d
     /tmp/ccFZihBM.s:17719  .text.RCC_HSEConfig:00000000 $t
     /tmp/ccFZihBM.s:17724  .text.RCC_HSEConfig:00000000 RCC_HSEConfig
     /tmp/ccFZihBM.s:17789  .text.RCC_HSEConfig:00000058 $d
     /tmp/ccFZihBM.s:17794  .text.RCC_WaitForHSEStartUp:00000000 $t
     /tmp/ccFZihBM.s:17799  .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
     /tmp/ccFZihBM.s:19398  .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
     /tmp/ccFZihBM.s:17869  .text.RCC_AdjustHSICalibrationValue:00000000 $t
     /tmp/ccFZihBM.s:17874  .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
     /tmp/ccFZihBM.s:17922  .text.RCC_AdjustHSICalibrationValue:0000003c $d
     /tmp/ccFZihBM.s:17927  .text.RCC_HSICmd:00000000 $t
     /tmp/ccFZihBM.s:17932  .text.RCC_HSICmd:00000000 RCC_HSICmd
     /tmp/ccFZihBM.s:17963  .text.RCC_HSICmd:0000001c $d
     /tmp/ccFZihBM.s:17968  .text.RCC_PLLConfig:00000000 $t
     /tmp/ccFZihBM.s:17973  .text.RCC_PLLConfig:00000000 RCC_PLLConfig
     /tmp/ccFZihBM.s:18022  .text.RCC_PLLConfig:00000040 $d
     /tmp/ccFZihBM.s:18027  .text.RCC_PLLCmd:00000000 $t
     /tmp/ccFZihBM.s:18032  .text.RCC_PLLCmd:00000000 RCC_PLLCmd
     /tmp/ccFZihBM.s:18063  .text.RCC_PLLCmd:0000001c $d
     /tmp/ccFZihBM.s:18068  .text.RCC_PREDIV1Config:00000000 $t
     /tmp/ccFZihBM.s:18073  .text.RCC_PREDIV1Config:00000000 RCC_PREDIV1Config
     /tmp/ccFZihBM.s:18123  .text.RCC_PREDIV1Config:00000044 $d
     /tmp/ccFZihBM.s:18128  .text.RCC_SYSCLKConfig:00000000 $t
     /tmp/ccFZihBM.s:18133  .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
     /tmp/ccFZihBM.s:18179  .text.RCC_SYSCLKConfig:00000038 $d
     /tmp/ccFZihBM.s:18184  .text.RCC_GetSYSCLKSource:00000000 $t
     /tmp/ccFZihBM.s:18189  .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
     /tmp/ccFZihBM.s:18217  .text.RCC_GetSYSCLKSource:00000018 $d
     /tmp/ccFZihBM.s:18222  .text.RCC_HCLKConfig:00000000 $t
     /tmp/ccFZihBM.s:18227  .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
     /tmp/ccFZihBM.s:18273  .text.RCC_HCLKConfig:00000038 $d
     /tmp/ccFZihBM.s:18278  .text.RCC_PCLK1Config:00000000 $t
     /tmp/ccFZihBM.s:18283  .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
     /tmp/ccFZihBM.s:18329  .text.RCC_PCLK1Config:00000038 $d
     /tmp/ccFZihBM.s:18334  .text.RCC_PCLK2Config:00000000 $t
     /tmp/ccFZihBM.s:18339  .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
     /tmp/ccFZihBM.s:18386  .text.RCC_PCLK2Config:0000003c $d
     /tmp/ccFZihBM.s:18391  .text.RCC_ITConfig:00000000 $t
     /tmp/ccFZihBM.s:18396  .text.RCC_ITConfig:00000000 RCC_ITConfig
     /tmp/ccFZihBM.s:18452  .text.RCC_ITConfig:0000004c $d
     /tmp/ccFZihBM.s:18457  .text.RCC_USBCLKConfig:00000000 $t
     /tmp/ccFZihBM.s:18462  .text.RCC_USBCLKConfig:00000000 RCC_USBCLKConfig
     /tmp/ccFZihBM.s:18492  .text.RCC_USBCLKConfig:00000018 $d
     /tmp/ccFZihBM.s:18497  .text.RCC_ADCCLKConfig:00000000 $t
     /tmp/ccFZihBM.s:18502  .text.RCC_ADCCLKConfig:00000000 RCC_ADCCLKConfig
     /tmp/ccFZihBM.s:18548  .text.RCC_ADCCLKConfig:00000038 $d
     /tmp/ccFZihBM.s:18553  .text.RCC_LSEConfig:00000000 $t
     /tmp/ccFZihBM.s:18558  .text.RCC_LSEConfig:00000000 RCC_LSEConfig
     /tmp/ccFZihBM.s:18616  .text.RCC_LSEConfig:00000044 $d
     /tmp/ccFZihBM.s:18621  .text.RCC_LSICmd:00000000 $t
     /tmp/ccFZihBM.s:18626  .text.RCC_LSICmd:00000000 RCC_LSICmd
     /tmp/ccFZihBM.s:18657  .text.RCC_LSICmd:0000001c $d
     /tmp/ccFZihBM.s:18662  .text.RCC_RTCCLKConfig:00000000 $t
     /tmp/ccFZihBM.s:18667  .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
     /tmp/ccFZihBM.s:18700  .text.RCC_RTCCLKConfig:00000020 $d
     /tmp/ccFZihBM.s:18705  .text.RCC_RTCCLKCmd:00000000 $t
     /tmp/ccFZihBM.s:18710  .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
     /tmp/ccFZihBM.s:18741  .text.RCC_RTCCLKCmd:0000001c $d
     /tmp/ccFZihBM.s:18746  .text.RCC_GetClocksFreq:00000000 $t
     /tmp/ccFZihBM.s:18751  .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
     /tmp/ccFZihBM.s:18961  .text.RCC_GetClocksFreq:00000168 $d
     /tmp/ccFZihBM.s:18970  .text.RCC_AHBPeriphClockCmd:00000000 $t
     /tmp/ccFZihBM.s:18975  .text.RCC_AHBPeriphClockCmd:00000000 RCC_AHBPeriphClockCmd
     /tmp/ccFZihBM.s:19025  .text.RCC_AHBPeriphClockCmd:00000040 $d
     /tmp/ccFZihBM.s:19030  .text.RCC_APB2PeriphClockCmd:00000000 $t
     /tmp/ccFZihBM.s:19035  .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
     /tmp/ccFZihBM.s:19085  .text.RCC_APB2PeriphClockCmd:00000040 $d
     /tmp/ccFZihBM.s:19090  .text.RCC_APB1PeriphClockCmd:00000000 $t
     /tmp/ccFZihBM.s:19095  .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
     /tmp/ccFZihBM.s:19145  .text.RCC_APB1PeriphClockCmd:00000040 $d
     /tmp/ccFZihBM.s:19150  .text.RCC_APB2PeriphResetCmd:00000000 $t
     /tmp/ccFZihBM.s:19155  .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
     /tmp/ccFZihBM.s:19205  .text.RCC_APB2PeriphResetCmd:00000040 $d
     /tmp/ccFZihBM.s:19210  .text.RCC_APB1PeriphResetCmd:00000000 $t
     /tmp/ccFZihBM.s:19215  .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
     /tmp/ccFZihBM.s:19265  .text.RCC_APB1PeriphResetCmd:00000040 $d
     /tmp/ccFZihBM.s:19270  .text.RCC_BackupResetCmd:00000000 $t
     /tmp/ccFZihBM.s:19275  .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
     /tmp/ccFZihBM.s:19306  .text.RCC_BackupResetCmd:0000001c $d
     /tmp/ccFZihBM.s:19311  .text.RCC_ClockSecuritySystemCmd:00000000 $t
     /tmp/ccFZihBM.s:19316  .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
     /tmp/ccFZihBM.s:19347  .text.RCC_ClockSecuritySystemCmd:0000001c $d
     /tmp/ccFZihBM.s:19352  .text.RCC_MCOConfig:00000000 $t
     /tmp/ccFZihBM.s:19357  .text.RCC_MCOConfig:00000000 RCC_MCOConfig
     /tmp/ccFZihBM.s:19388  .text.RCC_MCOConfig:0000001c $d
     /tmp/ccFZihBM.s:19393  .text.RCC_GetFlagStatus:00000000 $t
     /tmp/ccFZihBM.s:19488  .text.RCC_GetFlagStatus:00000080 $d
     /tmp/ccFZihBM.s:19493  .text.RCC_ClearFlag:00000000 $t
     /tmp/ccFZihBM.s:19498  .text.RCC_ClearFlag:00000000 RCC_ClearFlag
     /tmp/ccFZihBM.s:19525  .text.RCC_ClearFlag:00000018 $d
     /tmp/ccFZihBM.s:19530  .text.RCC_GetITStatus:00000000 $t
     /tmp/ccFZihBM.s:19535  .text.RCC_GetITStatus:00000000 RCC_GetITStatus
     /tmp/ccFZihBM.s:19584  .text.RCC_GetITStatus:0000003c $d
     /tmp/ccFZihBM.s:19589  .text.RCC_ClearITPendingBit:00000000 $t
     /tmp/ccFZihBM.s:19594  .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
     /tmp/ccFZihBM.s:19625  .text.RCC_ClearITPendingBit:0000001c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
